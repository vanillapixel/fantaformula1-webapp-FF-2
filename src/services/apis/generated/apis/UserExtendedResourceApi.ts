/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UserExtended,
} from '../models';
import {
    UserExtendedFromJSON,
    UserExtendedToJSON,
} from '../models';

export interface CountUserExtendedsRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    avatarFilenameContains?: string;
    avatarFilenameDoesNotContain?: string;
    avatarFilenameEquals?: string;
    avatarFilenameNotEquals?: string;
    avatarFilenameSpecified?: boolean;
    avatarFilenameIn?: Array<string>;
    avatarFilenameNotIn?: Array<string>;
    avatarFilepathContains?: string;
    avatarFilepathDoesNotContain?: string;
    avatarFilepathEquals?: string;
    avatarFilepathNotEquals?: string;
    avatarFilepathSpecified?: boolean;
    avatarFilepathIn?: Array<string>;
    avatarFilepathNotIn?: Array<string>;
    avatarUrlContains?: string;
    avatarUrlDoesNotContain?: string;
    avatarUrlEquals?: string;
    avatarUrlNotEquals?: string;
    avatarUrlSpecified?: boolean;
    avatarUrlIn?: Array<string>;
    avatarUrlNotIn?: Array<string>;
    telephoneContains?: string;
    telephoneDoesNotContain?: string;
    telephoneEquals?: string;
    telephoneNotEquals?: string;
    telephoneSpecified?: boolean;
    telephoneIn?: Array<string>;
    telephoneNotIn?: Array<string>;
    typeEquals?: CountUserExtendedsTypeEqualsEnum;
    typeNotEquals?: CountUserExtendedsTypeNotEqualsEnum;
    typeSpecified?: boolean;
    typeIn?: Array<CountUserExtendedsTypeInEnum>;
    typeNotIn?: Array<CountUserExtendedsTypeNotInEnum>;
    userIdGreaterThan?: number;
    userIdLessThan?: number;
    userIdGreaterThanOrEqual?: number;
    userIdLessThanOrEqual?: number;
    userIdEquals?: number;
    userIdNotEquals?: number;
    userIdSpecified?: boolean;
    userIdIn?: Array<number>;
    userIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface CreateUserExtendedRequest {
    userExtended: UserExtended;
}

export interface DeleteUserExtendedRequest {
    id: number;
}

export interface GetAllUserExtendedsRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    avatarFilenameContains?: string;
    avatarFilenameDoesNotContain?: string;
    avatarFilenameEquals?: string;
    avatarFilenameNotEquals?: string;
    avatarFilenameSpecified?: boolean;
    avatarFilenameIn?: Array<string>;
    avatarFilenameNotIn?: Array<string>;
    avatarFilepathContains?: string;
    avatarFilepathDoesNotContain?: string;
    avatarFilepathEquals?: string;
    avatarFilepathNotEquals?: string;
    avatarFilepathSpecified?: boolean;
    avatarFilepathIn?: Array<string>;
    avatarFilepathNotIn?: Array<string>;
    avatarUrlContains?: string;
    avatarUrlDoesNotContain?: string;
    avatarUrlEquals?: string;
    avatarUrlNotEquals?: string;
    avatarUrlSpecified?: boolean;
    avatarUrlIn?: Array<string>;
    avatarUrlNotIn?: Array<string>;
    telephoneContains?: string;
    telephoneDoesNotContain?: string;
    telephoneEquals?: string;
    telephoneNotEquals?: string;
    telephoneSpecified?: boolean;
    telephoneIn?: Array<string>;
    telephoneNotIn?: Array<string>;
    typeEquals?: GetAllUserExtendedsTypeEqualsEnum;
    typeNotEquals?: GetAllUserExtendedsTypeNotEqualsEnum;
    typeSpecified?: boolean;
    typeIn?: Array<GetAllUserExtendedsTypeInEnum>;
    typeNotIn?: Array<GetAllUserExtendedsTypeNotInEnum>;
    userIdGreaterThan?: number;
    userIdLessThan?: number;
    userIdGreaterThanOrEqual?: number;
    userIdLessThanOrEqual?: number;
    userIdEquals?: number;
    userIdNotEquals?: number;
    userIdSpecified?: boolean;
    userIdIn?: Array<number>;
    userIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface GetUserExtendedRequest {
    id: number;
}

export interface PartialUpdateUserExtendedRequest {
    id: number;
    userExtended: UserExtended;
}

export interface UpdateUserExtendedRequest {
    id: number;
    userExtended: UserExtended;
}

/**
 * 
 */
export class UserExtendedResourceApi extends runtime.BaseAPI {

    /**
     */
    async countUserExtendedsRaw(requestParameters: CountUserExtendedsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.avatarFilenameContains !== undefined) {
            queryParameters['avatarFilename.contains'] = requestParameters.avatarFilenameContains;
        }

        if (requestParameters.avatarFilenameDoesNotContain !== undefined) {
            queryParameters['avatarFilename.doesNotContain'] = requestParameters.avatarFilenameDoesNotContain;
        }

        if (requestParameters.avatarFilenameEquals !== undefined) {
            queryParameters['avatarFilename.equals'] = requestParameters.avatarFilenameEquals;
        }

        if (requestParameters.avatarFilenameNotEquals !== undefined) {
            queryParameters['avatarFilename.notEquals'] = requestParameters.avatarFilenameNotEquals;
        }

        if (requestParameters.avatarFilenameSpecified !== undefined) {
            queryParameters['avatarFilename.specified'] = requestParameters.avatarFilenameSpecified;
        }

        if (requestParameters.avatarFilenameIn) {
            queryParameters['avatarFilename.in'] = requestParameters.avatarFilenameIn;
        }

        if (requestParameters.avatarFilenameNotIn) {
            queryParameters['avatarFilename.notIn'] = requestParameters.avatarFilenameNotIn;
        }

        if (requestParameters.avatarFilepathContains !== undefined) {
            queryParameters['avatarFilepath.contains'] = requestParameters.avatarFilepathContains;
        }

        if (requestParameters.avatarFilepathDoesNotContain !== undefined) {
            queryParameters['avatarFilepath.doesNotContain'] = requestParameters.avatarFilepathDoesNotContain;
        }

        if (requestParameters.avatarFilepathEquals !== undefined) {
            queryParameters['avatarFilepath.equals'] = requestParameters.avatarFilepathEquals;
        }

        if (requestParameters.avatarFilepathNotEquals !== undefined) {
            queryParameters['avatarFilepath.notEquals'] = requestParameters.avatarFilepathNotEquals;
        }

        if (requestParameters.avatarFilepathSpecified !== undefined) {
            queryParameters['avatarFilepath.specified'] = requestParameters.avatarFilepathSpecified;
        }

        if (requestParameters.avatarFilepathIn) {
            queryParameters['avatarFilepath.in'] = requestParameters.avatarFilepathIn;
        }

        if (requestParameters.avatarFilepathNotIn) {
            queryParameters['avatarFilepath.notIn'] = requestParameters.avatarFilepathNotIn;
        }

        if (requestParameters.avatarUrlContains !== undefined) {
            queryParameters['avatarUrl.contains'] = requestParameters.avatarUrlContains;
        }

        if (requestParameters.avatarUrlDoesNotContain !== undefined) {
            queryParameters['avatarUrl.doesNotContain'] = requestParameters.avatarUrlDoesNotContain;
        }

        if (requestParameters.avatarUrlEquals !== undefined) {
            queryParameters['avatarUrl.equals'] = requestParameters.avatarUrlEquals;
        }

        if (requestParameters.avatarUrlNotEquals !== undefined) {
            queryParameters['avatarUrl.notEquals'] = requestParameters.avatarUrlNotEquals;
        }

        if (requestParameters.avatarUrlSpecified !== undefined) {
            queryParameters['avatarUrl.specified'] = requestParameters.avatarUrlSpecified;
        }

        if (requestParameters.avatarUrlIn) {
            queryParameters['avatarUrl.in'] = requestParameters.avatarUrlIn;
        }

        if (requestParameters.avatarUrlNotIn) {
            queryParameters['avatarUrl.notIn'] = requestParameters.avatarUrlNotIn;
        }

        if (requestParameters.telephoneContains !== undefined) {
            queryParameters['telephone.contains'] = requestParameters.telephoneContains;
        }

        if (requestParameters.telephoneDoesNotContain !== undefined) {
            queryParameters['telephone.doesNotContain'] = requestParameters.telephoneDoesNotContain;
        }

        if (requestParameters.telephoneEquals !== undefined) {
            queryParameters['telephone.equals'] = requestParameters.telephoneEquals;
        }

        if (requestParameters.telephoneNotEquals !== undefined) {
            queryParameters['telephone.notEquals'] = requestParameters.telephoneNotEquals;
        }

        if (requestParameters.telephoneSpecified !== undefined) {
            queryParameters['telephone.specified'] = requestParameters.telephoneSpecified;
        }

        if (requestParameters.telephoneIn) {
            queryParameters['telephone.in'] = requestParameters.telephoneIn;
        }

        if (requestParameters.telephoneNotIn) {
            queryParameters['telephone.notIn'] = requestParameters.telephoneNotIn;
        }

        if (requestParameters.typeEquals !== undefined) {
            queryParameters['type.equals'] = requestParameters.typeEquals;
        }

        if (requestParameters.typeNotEquals !== undefined) {
            queryParameters['type.notEquals'] = requestParameters.typeNotEquals;
        }

        if (requestParameters.typeSpecified !== undefined) {
            queryParameters['type.specified'] = requestParameters.typeSpecified;
        }

        if (requestParameters.typeIn) {
            queryParameters['type.in'] = requestParameters.typeIn;
        }

        if (requestParameters.typeNotIn) {
            queryParameters['type.notIn'] = requestParameters.typeNotIn;
        }

        if (requestParameters.userIdGreaterThan !== undefined) {
            queryParameters['userId.greaterThan'] = requestParameters.userIdGreaterThan;
        }

        if (requestParameters.userIdLessThan !== undefined) {
            queryParameters['userId.lessThan'] = requestParameters.userIdLessThan;
        }

        if (requestParameters.userIdGreaterThanOrEqual !== undefined) {
            queryParameters['userId.greaterThanOrEqual'] = requestParameters.userIdGreaterThanOrEqual;
        }

        if (requestParameters.userIdLessThanOrEqual !== undefined) {
            queryParameters['userId.lessThanOrEqual'] = requestParameters.userIdLessThanOrEqual;
        }

        if (requestParameters.userIdEquals !== undefined) {
            queryParameters['userId.equals'] = requestParameters.userIdEquals;
        }

        if (requestParameters.userIdNotEquals !== undefined) {
            queryParameters['userId.notEquals'] = requestParameters.userIdNotEquals;
        }

        if (requestParameters.userIdSpecified !== undefined) {
            queryParameters['userId.specified'] = requestParameters.userIdSpecified;
        }

        if (requestParameters.userIdIn) {
            queryParameters['userId.in'] = requestParameters.userIdIn;
        }

        if (requestParameters.userIdNotIn) {
            queryParameters['userId.notIn'] = requestParameters.userIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user-extendeds/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async countUserExtendeds(requestParameters: CountUserExtendedsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.countUserExtendedsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createUserExtendedRaw(requestParameters: CreateUserExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserExtended>> {
        if (requestParameters.userExtended === null || requestParameters.userExtended === undefined) {
            throw new runtime.RequiredError('userExtended','Required parameter requestParameters.userExtended was null or undefined when calling createUserExtended.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user-extendeds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserExtendedToJSON(requestParameters.userExtended),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserExtendedFromJSON(jsonValue));
    }

    /**
     */
    async createUserExtended(requestParameters: CreateUserExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserExtended> {
        const response = await this.createUserExtendedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteUserExtendedRaw(requestParameters: DeleteUserExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUserExtended.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user-extendeds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUserExtended(requestParameters: DeleteUserExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserExtendedRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllUserExtendedsRaw(requestParameters: GetAllUserExtendedsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserExtended>>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.avatarFilenameContains !== undefined) {
            queryParameters['avatarFilename.contains'] = requestParameters.avatarFilenameContains;
        }

        if (requestParameters.avatarFilenameDoesNotContain !== undefined) {
            queryParameters['avatarFilename.doesNotContain'] = requestParameters.avatarFilenameDoesNotContain;
        }

        if (requestParameters.avatarFilenameEquals !== undefined) {
            queryParameters['avatarFilename.equals'] = requestParameters.avatarFilenameEquals;
        }

        if (requestParameters.avatarFilenameNotEquals !== undefined) {
            queryParameters['avatarFilename.notEquals'] = requestParameters.avatarFilenameNotEquals;
        }

        if (requestParameters.avatarFilenameSpecified !== undefined) {
            queryParameters['avatarFilename.specified'] = requestParameters.avatarFilenameSpecified;
        }

        if (requestParameters.avatarFilenameIn) {
            queryParameters['avatarFilename.in'] = requestParameters.avatarFilenameIn;
        }

        if (requestParameters.avatarFilenameNotIn) {
            queryParameters['avatarFilename.notIn'] = requestParameters.avatarFilenameNotIn;
        }

        if (requestParameters.avatarFilepathContains !== undefined) {
            queryParameters['avatarFilepath.contains'] = requestParameters.avatarFilepathContains;
        }

        if (requestParameters.avatarFilepathDoesNotContain !== undefined) {
            queryParameters['avatarFilepath.doesNotContain'] = requestParameters.avatarFilepathDoesNotContain;
        }

        if (requestParameters.avatarFilepathEquals !== undefined) {
            queryParameters['avatarFilepath.equals'] = requestParameters.avatarFilepathEquals;
        }

        if (requestParameters.avatarFilepathNotEquals !== undefined) {
            queryParameters['avatarFilepath.notEquals'] = requestParameters.avatarFilepathNotEquals;
        }

        if (requestParameters.avatarFilepathSpecified !== undefined) {
            queryParameters['avatarFilepath.specified'] = requestParameters.avatarFilepathSpecified;
        }

        if (requestParameters.avatarFilepathIn) {
            queryParameters['avatarFilepath.in'] = requestParameters.avatarFilepathIn;
        }

        if (requestParameters.avatarFilepathNotIn) {
            queryParameters['avatarFilepath.notIn'] = requestParameters.avatarFilepathNotIn;
        }

        if (requestParameters.avatarUrlContains !== undefined) {
            queryParameters['avatarUrl.contains'] = requestParameters.avatarUrlContains;
        }

        if (requestParameters.avatarUrlDoesNotContain !== undefined) {
            queryParameters['avatarUrl.doesNotContain'] = requestParameters.avatarUrlDoesNotContain;
        }

        if (requestParameters.avatarUrlEquals !== undefined) {
            queryParameters['avatarUrl.equals'] = requestParameters.avatarUrlEquals;
        }

        if (requestParameters.avatarUrlNotEquals !== undefined) {
            queryParameters['avatarUrl.notEquals'] = requestParameters.avatarUrlNotEquals;
        }

        if (requestParameters.avatarUrlSpecified !== undefined) {
            queryParameters['avatarUrl.specified'] = requestParameters.avatarUrlSpecified;
        }

        if (requestParameters.avatarUrlIn) {
            queryParameters['avatarUrl.in'] = requestParameters.avatarUrlIn;
        }

        if (requestParameters.avatarUrlNotIn) {
            queryParameters['avatarUrl.notIn'] = requestParameters.avatarUrlNotIn;
        }

        if (requestParameters.telephoneContains !== undefined) {
            queryParameters['telephone.contains'] = requestParameters.telephoneContains;
        }

        if (requestParameters.telephoneDoesNotContain !== undefined) {
            queryParameters['telephone.doesNotContain'] = requestParameters.telephoneDoesNotContain;
        }

        if (requestParameters.telephoneEquals !== undefined) {
            queryParameters['telephone.equals'] = requestParameters.telephoneEquals;
        }

        if (requestParameters.telephoneNotEquals !== undefined) {
            queryParameters['telephone.notEquals'] = requestParameters.telephoneNotEquals;
        }

        if (requestParameters.telephoneSpecified !== undefined) {
            queryParameters['telephone.specified'] = requestParameters.telephoneSpecified;
        }

        if (requestParameters.telephoneIn) {
            queryParameters['telephone.in'] = requestParameters.telephoneIn;
        }

        if (requestParameters.telephoneNotIn) {
            queryParameters['telephone.notIn'] = requestParameters.telephoneNotIn;
        }

        if (requestParameters.typeEquals !== undefined) {
            queryParameters['type.equals'] = requestParameters.typeEquals;
        }

        if (requestParameters.typeNotEquals !== undefined) {
            queryParameters['type.notEquals'] = requestParameters.typeNotEquals;
        }

        if (requestParameters.typeSpecified !== undefined) {
            queryParameters['type.specified'] = requestParameters.typeSpecified;
        }

        if (requestParameters.typeIn) {
            queryParameters['type.in'] = requestParameters.typeIn;
        }

        if (requestParameters.typeNotIn) {
            queryParameters['type.notIn'] = requestParameters.typeNotIn;
        }

        if (requestParameters.userIdGreaterThan !== undefined) {
            queryParameters['userId.greaterThan'] = requestParameters.userIdGreaterThan;
        }

        if (requestParameters.userIdLessThan !== undefined) {
            queryParameters['userId.lessThan'] = requestParameters.userIdLessThan;
        }

        if (requestParameters.userIdGreaterThanOrEqual !== undefined) {
            queryParameters['userId.greaterThanOrEqual'] = requestParameters.userIdGreaterThanOrEqual;
        }

        if (requestParameters.userIdLessThanOrEqual !== undefined) {
            queryParameters['userId.lessThanOrEqual'] = requestParameters.userIdLessThanOrEqual;
        }

        if (requestParameters.userIdEquals !== undefined) {
            queryParameters['userId.equals'] = requestParameters.userIdEquals;
        }

        if (requestParameters.userIdNotEquals !== undefined) {
            queryParameters['userId.notEquals'] = requestParameters.userIdNotEquals;
        }

        if (requestParameters.userIdSpecified !== undefined) {
            queryParameters['userId.specified'] = requestParameters.userIdSpecified;
        }

        if (requestParameters.userIdIn) {
            queryParameters['userId.in'] = requestParameters.userIdIn;
        }

        if (requestParameters.userIdNotIn) {
            queryParameters['userId.notIn'] = requestParameters.userIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user-extendeds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserExtendedFromJSON));
    }

    /**
     */
    async getAllUserExtendeds(requestParameters: GetAllUserExtendedsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserExtended>> {
        const response = await this.getAllUserExtendedsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserExtendedRaw(requestParameters: GetUserExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserExtended>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserExtended.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user-extendeds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserExtendedFromJSON(jsonValue));
    }

    /**
     */
    async getUserExtended(requestParameters: GetUserExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserExtended> {
        const response = await this.getUserExtendedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async partialUpdateUserExtendedRaw(requestParameters: PartialUpdateUserExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserExtended>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateUserExtended.');
        }

        if (requestParameters.userExtended === null || requestParameters.userExtended === undefined) {
            throw new runtime.RequiredError('userExtended','Required parameter requestParameters.userExtended was null or undefined when calling partialUpdateUserExtended.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user-extendeds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserExtendedToJSON(requestParameters.userExtended),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserExtendedFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateUserExtended(requestParameters: PartialUpdateUserExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserExtended> {
        const response = await this.partialUpdateUserExtendedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateUserExtendedRaw(requestParameters: UpdateUserExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserExtended>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUserExtended.');
        }

        if (requestParameters.userExtended === null || requestParameters.userExtended === undefined) {
            throw new runtime.RequiredError('userExtended','Required parameter requestParameters.userExtended was null or undefined when calling updateUserExtended.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user-extendeds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserExtendedToJSON(requestParameters.userExtended),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserExtendedFromJSON(jsonValue));
    }

    /**
     */
    async updateUserExtended(requestParameters: UpdateUserExtendedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserExtended> {
        const response = await this.updateUserExtendedRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CountUserExtendedsTypeEqualsEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type CountUserExtendedsTypeEqualsEnum = typeof CountUserExtendedsTypeEqualsEnum[keyof typeof CountUserExtendedsTypeEqualsEnum];
/**
 * @export
 */
export const CountUserExtendedsTypeNotEqualsEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type CountUserExtendedsTypeNotEqualsEnum = typeof CountUserExtendedsTypeNotEqualsEnum[keyof typeof CountUserExtendedsTypeNotEqualsEnum];
/**
 * @export
 */
export const CountUserExtendedsTypeInEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type CountUserExtendedsTypeInEnum = typeof CountUserExtendedsTypeInEnum[keyof typeof CountUserExtendedsTypeInEnum];
/**
 * @export
 */
export const CountUserExtendedsTypeNotInEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type CountUserExtendedsTypeNotInEnum = typeof CountUserExtendedsTypeNotInEnum[keyof typeof CountUserExtendedsTypeNotInEnum];
/**
 * @export
 */
export const GetAllUserExtendedsTypeEqualsEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type GetAllUserExtendedsTypeEqualsEnum = typeof GetAllUserExtendedsTypeEqualsEnum[keyof typeof GetAllUserExtendedsTypeEqualsEnum];
/**
 * @export
 */
export const GetAllUserExtendedsTypeNotEqualsEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type GetAllUserExtendedsTypeNotEqualsEnum = typeof GetAllUserExtendedsTypeNotEqualsEnum[keyof typeof GetAllUserExtendedsTypeNotEqualsEnum];
/**
 * @export
 */
export const GetAllUserExtendedsTypeInEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type GetAllUserExtendedsTypeInEnum = typeof GetAllUserExtendedsTypeInEnum[keyof typeof GetAllUserExtendedsTypeInEnum];
/**
 * @export
 */
export const GetAllUserExtendedsTypeNotInEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type GetAllUserExtendedsTypeNotInEnum = typeof GetAllUserExtendedsTypeNotInEnum[keyof typeof GetAllUserExtendedsTypeNotInEnum];
