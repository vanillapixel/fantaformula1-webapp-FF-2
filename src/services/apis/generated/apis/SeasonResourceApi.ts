/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Season,
} from '../models';
import {
    SeasonFromJSON,
    SeasonToJSON,
} from '../models';

export interface CountSeasonsRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    yearContains?: string;
    yearDoesNotContain?: string;
    yearEquals?: string;
    yearNotEquals?: string;
    yearSpecified?: boolean;
    yearIn?: Array<string>;
    yearNotIn?: Array<string>;
    granPrixIdGreaterThan?: number;
    granPrixIdLessThan?: number;
    granPrixIdGreaterThanOrEqual?: number;
    granPrixIdLessThanOrEqual?: number;
    granPrixIdEquals?: number;
    granPrixIdNotEquals?: number;
    granPrixIdSpecified?: boolean;
    granPrixIdIn?: Array<number>;
    granPrixIdNotIn?: Array<number>;
    leagueIdGreaterThan?: number;
    leagueIdLessThan?: number;
    leagueIdGreaterThanOrEqual?: number;
    leagueIdLessThanOrEqual?: number;
    leagueIdEquals?: number;
    leagueIdNotEquals?: number;
    leagueIdSpecified?: boolean;
    leagueIdIn?: Array<number>;
    leagueIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface CreateSeasonRequest {
    season: Season;
}

export interface DeleteSeasonRequest {
    id: number;
}

export interface GetAllSeasonsRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    yearContains?: string;
    yearDoesNotContain?: string;
    yearEquals?: string;
    yearNotEquals?: string;
    yearSpecified?: boolean;
    yearIn?: Array<string>;
    yearNotIn?: Array<string>;
    granPrixIdGreaterThan?: number;
    granPrixIdLessThan?: number;
    granPrixIdGreaterThanOrEqual?: number;
    granPrixIdLessThanOrEqual?: number;
    granPrixIdEquals?: number;
    granPrixIdNotEquals?: number;
    granPrixIdSpecified?: boolean;
    granPrixIdIn?: Array<number>;
    granPrixIdNotIn?: Array<number>;
    leagueIdGreaterThan?: number;
    leagueIdLessThan?: number;
    leagueIdGreaterThanOrEqual?: number;
    leagueIdLessThanOrEqual?: number;
    leagueIdEquals?: number;
    leagueIdNotEquals?: number;
    leagueIdSpecified?: boolean;
    leagueIdIn?: Array<number>;
    leagueIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface GetSeasonRequest {
    id: number;
}

export interface PartialUpdateSeasonRequest {
    id: number;
    season: Season;
}

export interface UpdateSeasonRequest {
    id: number;
    season: Season;
}

/**
 * 
 */
export class SeasonResourceApi extends runtime.BaseAPI {

    /**
     */
    async countSeasonsRaw(requestParameters: CountSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.yearContains !== undefined) {
            queryParameters['year.contains'] = requestParameters.yearContains;
        }

        if (requestParameters.yearDoesNotContain !== undefined) {
            queryParameters['year.doesNotContain'] = requestParameters.yearDoesNotContain;
        }

        if (requestParameters.yearEquals !== undefined) {
            queryParameters['year.equals'] = requestParameters.yearEquals;
        }

        if (requestParameters.yearNotEquals !== undefined) {
            queryParameters['year.notEquals'] = requestParameters.yearNotEquals;
        }

        if (requestParameters.yearSpecified !== undefined) {
            queryParameters['year.specified'] = requestParameters.yearSpecified;
        }

        if (requestParameters.yearIn) {
            queryParameters['year.in'] = requestParameters.yearIn;
        }

        if (requestParameters.yearNotIn) {
            queryParameters['year.notIn'] = requestParameters.yearNotIn;
        }

        if (requestParameters.granPrixIdGreaterThan !== undefined) {
            queryParameters['granPrixId.greaterThan'] = requestParameters.granPrixIdGreaterThan;
        }

        if (requestParameters.granPrixIdLessThan !== undefined) {
            queryParameters['granPrixId.lessThan'] = requestParameters.granPrixIdLessThan;
        }

        if (requestParameters.granPrixIdGreaterThanOrEqual !== undefined) {
            queryParameters['granPrixId.greaterThanOrEqual'] = requestParameters.granPrixIdGreaterThanOrEqual;
        }

        if (requestParameters.granPrixIdLessThanOrEqual !== undefined) {
            queryParameters['granPrixId.lessThanOrEqual'] = requestParameters.granPrixIdLessThanOrEqual;
        }

        if (requestParameters.granPrixIdEquals !== undefined) {
            queryParameters['granPrixId.equals'] = requestParameters.granPrixIdEquals;
        }

        if (requestParameters.granPrixIdNotEquals !== undefined) {
            queryParameters['granPrixId.notEquals'] = requestParameters.granPrixIdNotEquals;
        }

        if (requestParameters.granPrixIdSpecified !== undefined) {
            queryParameters['granPrixId.specified'] = requestParameters.granPrixIdSpecified;
        }

        if (requestParameters.granPrixIdIn) {
            queryParameters['granPrixId.in'] = requestParameters.granPrixIdIn;
        }

        if (requestParameters.granPrixIdNotIn) {
            queryParameters['granPrixId.notIn'] = requestParameters.granPrixIdNotIn;
        }

        if (requestParameters.leagueIdGreaterThan !== undefined) {
            queryParameters['leagueId.greaterThan'] = requestParameters.leagueIdGreaterThan;
        }

        if (requestParameters.leagueIdLessThan !== undefined) {
            queryParameters['leagueId.lessThan'] = requestParameters.leagueIdLessThan;
        }

        if (requestParameters.leagueIdGreaterThanOrEqual !== undefined) {
            queryParameters['leagueId.greaterThanOrEqual'] = requestParameters.leagueIdGreaterThanOrEqual;
        }

        if (requestParameters.leagueIdLessThanOrEqual !== undefined) {
            queryParameters['leagueId.lessThanOrEqual'] = requestParameters.leagueIdLessThanOrEqual;
        }

        if (requestParameters.leagueIdEquals !== undefined) {
            queryParameters['leagueId.equals'] = requestParameters.leagueIdEquals;
        }

        if (requestParameters.leagueIdNotEquals !== undefined) {
            queryParameters['leagueId.notEquals'] = requestParameters.leagueIdNotEquals;
        }

        if (requestParameters.leagueIdSpecified !== undefined) {
            queryParameters['leagueId.specified'] = requestParameters.leagueIdSpecified;
        }

        if (requestParameters.leagueIdIn) {
            queryParameters['leagueId.in'] = requestParameters.leagueIdIn;
        }

        if (requestParameters.leagueIdNotIn) {
            queryParameters['leagueId.notIn'] = requestParameters.leagueIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/seasons/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async countSeasons(requestParameters: CountSeasonsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.countSeasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createSeasonRaw(requestParameters: CreateSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Season>> {
        if (requestParameters.season === null || requestParameters.season === undefined) {
            throw new runtime.RequiredError('season','Required parameter requestParameters.season was null or undefined when calling createSeason.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/seasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeasonToJSON(requestParameters.season),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeasonFromJSON(jsonValue));
    }

    /**
     */
    async createSeason(requestParameters: CreateSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Season> {
        const response = await this.createSeasonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSeasonRaw(requestParameters: DeleteSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSeason.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/seasons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteSeason(requestParameters: DeleteSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSeasonRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllSeasonsRaw(requestParameters: GetAllSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Season>>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.yearContains !== undefined) {
            queryParameters['year.contains'] = requestParameters.yearContains;
        }

        if (requestParameters.yearDoesNotContain !== undefined) {
            queryParameters['year.doesNotContain'] = requestParameters.yearDoesNotContain;
        }

        if (requestParameters.yearEquals !== undefined) {
            queryParameters['year.equals'] = requestParameters.yearEquals;
        }

        if (requestParameters.yearNotEquals !== undefined) {
            queryParameters['year.notEquals'] = requestParameters.yearNotEquals;
        }

        if (requestParameters.yearSpecified !== undefined) {
            queryParameters['year.specified'] = requestParameters.yearSpecified;
        }

        if (requestParameters.yearIn) {
            queryParameters['year.in'] = requestParameters.yearIn;
        }

        if (requestParameters.yearNotIn) {
            queryParameters['year.notIn'] = requestParameters.yearNotIn;
        }

        if (requestParameters.granPrixIdGreaterThan !== undefined) {
            queryParameters['granPrixId.greaterThan'] = requestParameters.granPrixIdGreaterThan;
        }

        if (requestParameters.granPrixIdLessThan !== undefined) {
            queryParameters['granPrixId.lessThan'] = requestParameters.granPrixIdLessThan;
        }

        if (requestParameters.granPrixIdGreaterThanOrEqual !== undefined) {
            queryParameters['granPrixId.greaterThanOrEqual'] = requestParameters.granPrixIdGreaterThanOrEqual;
        }

        if (requestParameters.granPrixIdLessThanOrEqual !== undefined) {
            queryParameters['granPrixId.lessThanOrEqual'] = requestParameters.granPrixIdLessThanOrEqual;
        }

        if (requestParameters.granPrixIdEquals !== undefined) {
            queryParameters['granPrixId.equals'] = requestParameters.granPrixIdEquals;
        }

        if (requestParameters.granPrixIdNotEquals !== undefined) {
            queryParameters['granPrixId.notEquals'] = requestParameters.granPrixIdNotEquals;
        }

        if (requestParameters.granPrixIdSpecified !== undefined) {
            queryParameters['granPrixId.specified'] = requestParameters.granPrixIdSpecified;
        }

        if (requestParameters.granPrixIdIn) {
            queryParameters['granPrixId.in'] = requestParameters.granPrixIdIn;
        }

        if (requestParameters.granPrixIdNotIn) {
            queryParameters['granPrixId.notIn'] = requestParameters.granPrixIdNotIn;
        }

        if (requestParameters.leagueIdGreaterThan !== undefined) {
            queryParameters['leagueId.greaterThan'] = requestParameters.leagueIdGreaterThan;
        }

        if (requestParameters.leagueIdLessThan !== undefined) {
            queryParameters['leagueId.lessThan'] = requestParameters.leagueIdLessThan;
        }

        if (requestParameters.leagueIdGreaterThanOrEqual !== undefined) {
            queryParameters['leagueId.greaterThanOrEqual'] = requestParameters.leagueIdGreaterThanOrEqual;
        }

        if (requestParameters.leagueIdLessThanOrEqual !== undefined) {
            queryParameters['leagueId.lessThanOrEqual'] = requestParameters.leagueIdLessThanOrEqual;
        }

        if (requestParameters.leagueIdEquals !== undefined) {
            queryParameters['leagueId.equals'] = requestParameters.leagueIdEquals;
        }

        if (requestParameters.leagueIdNotEquals !== undefined) {
            queryParameters['leagueId.notEquals'] = requestParameters.leagueIdNotEquals;
        }

        if (requestParameters.leagueIdSpecified !== undefined) {
            queryParameters['leagueId.specified'] = requestParameters.leagueIdSpecified;
        }

        if (requestParameters.leagueIdIn) {
            queryParameters['leagueId.in'] = requestParameters.leagueIdIn;
        }

        if (requestParameters.leagueIdNotIn) {
            queryParameters['leagueId.notIn'] = requestParameters.leagueIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/seasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SeasonFromJSON));
    }

    /**
     */
    async getAllSeasons(requestParameters: GetAllSeasonsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Season>> {
        const response = await this.getAllSeasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSeasonRaw(requestParameters: GetSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Season>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSeason.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/seasons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeasonFromJSON(jsonValue));
    }

    /**
     */
    async getSeason(requestParameters: GetSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Season> {
        const response = await this.getSeasonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async partialUpdateSeasonRaw(requestParameters: PartialUpdateSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Season>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateSeason.');
        }

        if (requestParameters.season === null || requestParameters.season === undefined) {
            throw new runtime.RequiredError('season','Required parameter requestParameters.season was null or undefined when calling partialUpdateSeason.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/seasons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SeasonToJSON(requestParameters.season),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeasonFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateSeason(requestParameters: PartialUpdateSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Season> {
        const response = await this.partialUpdateSeasonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateSeasonRaw(requestParameters: UpdateSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Season>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSeason.');
        }

        if (requestParameters.season === null || requestParameters.season === undefined) {
            throw new runtime.RequiredError('season','Required parameter requestParameters.season was null or undefined when calling updateSeason.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/seasons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SeasonToJSON(requestParameters.season),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeasonFromJSON(jsonValue));
    }

    /**
     */
    async updateSeason(requestParameters: UpdateSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Season> {
        const response = await this.updateSeasonRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
