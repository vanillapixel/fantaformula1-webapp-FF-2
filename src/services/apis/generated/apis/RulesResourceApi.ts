/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Rules,
} from '../models';
import {
    RulesFromJSON,
    RulesToJSON,
} from '../models';

export interface CountRulesRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    nameContains?: string;
    nameDoesNotContain?: string;
    nameEquals?: string;
    nameNotEquals?: string;
    nameSpecified?: boolean;
    nameIn?: Array<string>;
    nameNotIn?: Array<string>;
    rulesTypeEquals?: CountRulesRulesTypeEqualsEnum;
    rulesTypeNotEquals?: CountRulesRulesTypeNotEqualsEnum;
    rulesTypeSpecified?: boolean;
    rulesTypeIn?: Array<CountRulesRulesTypeInEnum>;
    rulesTypeNotIn?: Array<CountRulesRulesTypeNotInEnum>;
    leagueIdGreaterThan?: number;
    leagueIdLessThan?: number;
    leagueIdGreaterThanOrEqual?: number;
    leagueIdLessThanOrEqual?: number;
    leagueIdEquals?: number;
    leagueIdNotEquals?: number;
    leagueIdSpecified?: boolean;
    leagueIdIn?: Array<number>;
    leagueIdNotIn?: Array<number>;
    standingPointsIdGreaterThan?: number;
    standingPointsIdLessThan?: number;
    standingPointsIdGreaterThanOrEqual?: number;
    standingPointsIdLessThanOrEqual?: number;
    standingPointsIdEquals?: number;
    standingPointsIdNotEquals?: number;
    standingPointsIdSpecified?: boolean;
    standingPointsIdIn?: Array<number>;
    standingPointsIdNotIn?: Array<number>;
    userSeasonRulesIdGreaterThan?: number;
    userSeasonRulesIdLessThan?: number;
    userSeasonRulesIdGreaterThanOrEqual?: number;
    userSeasonRulesIdLessThanOrEqual?: number;
    userSeasonRulesIdEquals?: number;
    userSeasonRulesIdNotEquals?: number;
    userSeasonRulesIdSpecified?: boolean;
    userSeasonRulesIdIn?: Array<number>;
    userSeasonRulesIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface CreateRulesRequest {
    rules: Rules;
}

export interface DeleteRulesRequest {
    id: number;
}

export interface GetAllRulesRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    nameContains?: string;
    nameDoesNotContain?: string;
    nameEquals?: string;
    nameNotEquals?: string;
    nameSpecified?: boolean;
    nameIn?: Array<string>;
    nameNotIn?: Array<string>;
    rulesTypeEquals?: GetAllRulesRulesTypeEqualsEnum;
    rulesTypeNotEquals?: GetAllRulesRulesTypeNotEqualsEnum;
    rulesTypeSpecified?: boolean;
    rulesTypeIn?: Array<GetAllRulesRulesTypeInEnum>;
    rulesTypeNotIn?: Array<GetAllRulesRulesTypeNotInEnum>;
    leagueIdGreaterThan?: number;
    leagueIdLessThan?: number;
    leagueIdGreaterThanOrEqual?: number;
    leagueIdLessThanOrEqual?: number;
    leagueIdEquals?: number;
    leagueIdNotEquals?: number;
    leagueIdSpecified?: boolean;
    leagueIdIn?: Array<number>;
    leagueIdNotIn?: Array<number>;
    standingPointsIdGreaterThan?: number;
    standingPointsIdLessThan?: number;
    standingPointsIdGreaterThanOrEqual?: number;
    standingPointsIdLessThanOrEqual?: number;
    standingPointsIdEquals?: number;
    standingPointsIdNotEquals?: number;
    standingPointsIdSpecified?: boolean;
    standingPointsIdIn?: Array<number>;
    standingPointsIdNotIn?: Array<number>;
    userSeasonRulesIdGreaterThan?: number;
    userSeasonRulesIdLessThan?: number;
    userSeasonRulesIdGreaterThanOrEqual?: number;
    userSeasonRulesIdLessThanOrEqual?: number;
    userSeasonRulesIdEquals?: number;
    userSeasonRulesIdNotEquals?: number;
    userSeasonRulesIdSpecified?: boolean;
    userSeasonRulesIdIn?: Array<number>;
    userSeasonRulesIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface GetRulesRequest {
    id: number;
}

export interface PartialUpdateRulesRequest {
    id: number;
    rules: Rules;
}

export interface UpdateRulesRequest {
    id: number;
    rules: Rules;
}

/**
 * 
 */
export class RulesResourceApi extends runtime.BaseAPI {

    /**
     */
    async countRulesRaw(requestParameters: CountRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.nameContains !== undefined) {
            queryParameters['name.contains'] = requestParameters.nameContains;
        }

        if (requestParameters.nameDoesNotContain !== undefined) {
            queryParameters['name.doesNotContain'] = requestParameters.nameDoesNotContain;
        }

        if (requestParameters.nameEquals !== undefined) {
            queryParameters['name.equals'] = requestParameters.nameEquals;
        }

        if (requestParameters.nameNotEquals !== undefined) {
            queryParameters['name.notEquals'] = requestParameters.nameNotEquals;
        }

        if (requestParameters.nameSpecified !== undefined) {
            queryParameters['name.specified'] = requestParameters.nameSpecified;
        }

        if (requestParameters.nameIn) {
            queryParameters['name.in'] = requestParameters.nameIn;
        }

        if (requestParameters.nameNotIn) {
            queryParameters['name.notIn'] = requestParameters.nameNotIn;
        }

        if (requestParameters.rulesTypeEquals !== undefined) {
            queryParameters['rulesType.equals'] = requestParameters.rulesTypeEquals;
        }

        if (requestParameters.rulesTypeNotEquals !== undefined) {
            queryParameters['rulesType.notEquals'] = requestParameters.rulesTypeNotEquals;
        }

        if (requestParameters.rulesTypeSpecified !== undefined) {
            queryParameters['rulesType.specified'] = requestParameters.rulesTypeSpecified;
        }

        if (requestParameters.rulesTypeIn) {
            queryParameters['rulesType.in'] = requestParameters.rulesTypeIn;
        }

        if (requestParameters.rulesTypeNotIn) {
            queryParameters['rulesType.notIn'] = requestParameters.rulesTypeNotIn;
        }

        if (requestParameters.leagueIdGreaterThan !== undefined) {
            queryParameters['leagueId.greaterThan'] = requestParameters.leagueIdGreaterThan;
        }

        if (requestParameters.leagueIdLessThan !== undefined) {
            queryParameters['leagueId.lessThan'] = requestParameters.leagueIdLessThan;
        }

        if (requestParameters.leagueIdGreaterThanOrEqual !== undefined) {
            queryParameters['leagueId.greaterThanOrEqual'] = requestParameters.leagueIdGreaterThanOrEqual;
        }

        if (requestParameters.leagueIdLessThanOrEqual !== undefined) {
            queryParameters['leagueId.lessThanOrEqual'] = requestParameters.leagueIdLessThanOrEqual;
        }

        if (requestParameters.leagueIdEquals !== undefined) {
            queryParameters['leagueId.equals'] = requestParameters.leagueIdEquals;
        }

        if (requestParameters.leagueIdNotEquals !== undefined) {
            queryParameters['leagueId.notEquals'] = requestParameters.leagueIdNotEquals;
        }

        if (requestParameters.leagueIdSpecified !== undefined) {
            queryParameters['leagueId.specified'] = requestParameters.leagueIdSpecified;
        }

        if (requestParameters.leagueIdIn) {
            queryParameters['leagueId.in'] = requestParameters.leagueIdIn;
        }

        if (requestParameters.leagueIdNotIn) {
            queryParameters['leagueId.notIn'] = requestParameters.leagueIdNotIn;
        }

        if (requestParameters.standingPointsIdGreaterThan !== undefined) {
            queryParameters['standingPointsId.greaterThan'] = requestParameters.standingPointsIdGreaterThan;
        }

        if (requestParameters.standingPointsIdLessThan !== undefined) {
            queryParameters['standingPointsId.lessThan'] = requestParameters.standingPointsIdLessThan;
        }

        if (requestParameters.standingPointsIdGreaterThanOrEqual !== undefined) {
            queryParameters['standingPointsId.greaterThanOrEqual'] = requestParameters.standingPointsIdGreaterThanOrEqual;
        }

        if (requestParameters.standingPointsIdLessThanOrEqual !== undefined) {
            queryParameters['standingPointsId.lessThanOrEqual'] = requestParameters.standingPointsIdLessThanOrEqual;
        }

        if (requestParameters.standingPointsIdEquals !== undefined) {
            queryParameters['standingPointsId.equals'] = requestParameters.standingPointsIdEquals;
        }

        if (requestParameters.standingPointsIdNotEquals !== undefined) {
            queryParameters['standingPointsId.notEquals'] = requestParameters.standingPointsIdNotEquals;
        }

        if (requestParameters.standingPointsIdSpecified !== undefined) {
            queryParameters['standingPointsId.specified'] = requestParameters.standingPointsIdSpecified;
        }

        if (requestParameters.standingPointsIdIn) {
            queryParameters['standingPointsId.in'] = requestParameters.standingPointsIdIn;
        }

        if (requestParameters.standingPointsIdNotIn) {
            queryParameters['standingPointsId.notIn'] = requestParameters.standingPointsIdNotIn;
        }

        if (requestParameters.userSeasonRulesIdGreaterThan !== undefined) {
            queryParameters['userSeasonRulesId.greaterThan'] = requestParameters.userSeasonRulesIdGreaterThan;
        }

        if (requestParameters.userSeasonRulesIdLessThan !== undefined) {
            queryParameters['userSeasonRulesId.lessThan'] = requestParameters.userSeasonRulesIdLessThan;
        }

        if (requestParameters.userSeasonRulesIdGreaterThanOrEqual !== undefined) {
            queryParameters['userSeasonRulesId.greaterThanOrEqual'] = requestParameters.userSeasonRulesIdGreaterThanOrEqual;
        }

        if (requestParameters.userSeasonRulesIdLessThanOrEqual !== undefined) {
            queryParameters['userSeasonRulesId.lessThanOrEqual'] = requestParameters.userSeasonRulesIdLessThanOrEqual;
        }

        if (requestParameters.userSeasonRulesIdEquals !== undefined) {
            queryParameters['userSeasonRulesId.equals'] = requestParameters.userSeasonRulesIdEquals;
        }

        if (requestParameters.userSeasonRulesIdNotEquals !== undefined) {
            queryParameters['userSeasonRulesId.notEquals'] = requestParameters.userSeasonRulesIdNotEquals;
        }

        if (requestParameters.userSeasonRulesIdSpecified !== undefined) {
            queryParameters['userSeasonRulesId.specified'] = requestParameters.userSeasonRulesIdSpecified;
        }

        if (requestParameters.userSeasonRulesIdIn) {
            queryParameters['userSeasonRulesId.in'] = requestParameters.userSeasonRulesIdIn;
        }

        if (requestParameters.userSeasonRulesIdNotIn) {
            queryParameters['userSeasonRulesId.notIn'] = requestParameters.userSeasonRulesIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rules/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async countRules(requestParameters: CountRulesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.countRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createRulesRaw(requestParameters: CreateRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rules>> {
        if (requestParameters.rules === null || requestParameters.rules === undefined) {
            throw new runtime.RequiredError('rules','Required parameter requestParameters.rules was null or undefined when calling createRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RulesToJSON(requestParameters.rules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RulesFromJSON(jsonValue));
    }

    /**
     */
    async createRules(requestParameters: CreateRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rules> {
        const response = await this.createRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteRulesRaw(requestParameters: DeleteRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteRules(requestParameters: DeleteRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRulesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllRulesRaw(requestParameters: GetAllRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Rules>>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.nameContains !== undefined) {
            queryParameters['name.contains'] = requestParameters.nameContains;
        }

        if (requestParameters.nameDoesNotContain !== undefined) {
            queryParameters['name.doesNotContain'] = requestParameters.nameDoesNotContain;
        }

        if (requestParameters.nameEquals !== undefined) {
            queryParameters['name.equals'] = requestParameters.nameEquals;
        }

        if (requestParameters.nameNotEquals !== undefined) {
            queryParameters['name.notEquals'] = requestParameters.nameNotEquals;
        }

        if (requestParameters.nameSpecified !== undefined) {
            queryParameters['name.specified'] = requestParameters.nameSpecified;
        }

        if (requestParameters.nameIn) {
            queryParameters['name.in'] = requestParameters.nameIn;
        }

        if (requestParameters.nameNotIn) {
            queryParameters['name.notIn'] = requestParameters.nameNotIn;
        }

        if (requestParameters.rulesTypeEquals !== undefined) {
            queryParameters['rulesType.equals'] = requestParameters.rulesTypeEquals;
        }

        if (requestParameters.rulesTypeNotEquals !== undefined) {
            queryParameters['rulesType.notEquals'] = requestParameters.rulesTypeNotEquals;
        }

        if (requestParameters.rulesTypeSpecified !== undefined) {
            queryParameters['rulesType.specified'] = requestParameters.rulesTypeSpecified;
        }

        if (requestParameters.rulesTypeIn) {
            queryParameters['rulesType.in'] = requestParameters.rulesTypeIn;
        }

        if (requestParameters.rulesTypeNotIn) {
            queryParameters['rulesType.notIn'] = requestParameters.rulesTypeNotIn;
        }

        if (requestParameters.leagueIdGreaterThan !== undefined) {
            queryParameters['leagueId.greaterThan'] = requestParameters.leagueIdGreaterThan;
        }

        if (requestParameters.leagueIdLessThan !== undefined) {
            queryParameters['leagueId.lessThan'] = requestParameters.leagueIdLessThan;
        }

        if (requestParameters.leagueIdGreaterThanOrEqual !== undefined) {
            queryParameters['leagueId.greaterThanOrEqual'] = requestParameters.leagueIdGreaterThanOrEqual;
        }

        if (requestParameters.leagueIdLessThanOrEqual !== undefined) {
            queryParameters['leagueId.lessThanOrEqual'] = requestParameters.leagueIdLessThanOrEqual;
        }

        if (requestParameters.leagueIdEquals !== undefined) {
            queryParameters['leagueId.equals'] = requestParameters.leagueIdEquals;
        }

        if (requestParameters.leagueIdNotEquals !== undefined) {
            queryParameters['leagueId.notEquals'] = requestParameters.leagueIdNotEquals;
        }

        if (requestParameters.leagueIdSpecified !== undefined) {
            queryParameters['leagueId.specified'] = requestParameters.leagueIdSpecified;
        }

        if (requestParameters.leagueIdIn) {
            queryParameters['leagueId.in'] = requestParameters.leagueIdIn;
        }

        if (requestParameters.leagueIdNotIn) {
            queryParameters['leagueId.notIn'] = requestParameters.leagueIdNotIn;
        }

        if (requestParameters.standingPointsIdGreaterThan !== undefined) {
            queryParameters['standingPointsId.greaterThan'] = requestParameters.standingPointsIdGreaterThan;
        }

        if (requestParameters.standingPointsIdLessThan !== undefined) {
            queryParameters['standingPointsId.lessThan'] = requestParameters.standingPointsIdLessThan;
        }

        if (requestParameters.standingPointsIdGreaterThanOrEqual !== undefined) {
            queryParameters['standingPointsId.greaterThanOrEqual'] = requestParameters.standingPointsIdGreaterThanOrEqual;
        }

        if (requestParameters.standingPointsIdLessThanOrEqual !== undefined) {
            queryParameters['standingPointsId.lessThanOrEqual'] = requestParameters.standingPointsIdLessThanOrEqual;
        }

        if (requestParameters.standingPointsIdEquals !== undefined) {
            queryParameters['standingPointsId.equals'] = requestParameters.standingPointsIdEquals;
        }

        if (requestParameters.standingPointsIdNotEquals !== undefined) {
            queryParameters['standingPointsId.notEquals'] = requestParameters.standingPointsIdNotEquals;
        }

        if (requestParameters.standingPointsIdSpecified !== undefined) {
            queryParameters['standingPointsId.specified'] = requestParameters.standingPointsIdSpecified;
        }

        if (requestParameters.standingPointsIdIn) {
            queryParameters['standingPointsId.in'] = requestParameters.standingPointsIdIn;
        }

        if (requestParameters.standingPointsIdNotIn) {
            queryParameters['standingPointsId.notIn'] = requestParameters.standingPointsIdNotIn;
        }

        if (requestParameters.userSeasonRulesIdGreaterThan !== undefined) {
            queryParameters['userSeasonRulesId.greaterThan'] = requestParameters.userSeasonRulesIdGreaterThan;
        }

        if (requestParameters.userSeasonRulesIdLessThan !== undefined) {
            queryParameters['userSeasonRulesId.lessThan'] = requestParameters.userSeasonRulesIdLessThan;
        }

        if (requestParameters.userSeasonRulesIdGreaterThanOrEqual !== undefined) {
            queryParameters['userSeasonRulesId.greaterThanOrEqual'] = requestParameters.userSeasonRulesIdGreaterThanOrEqual;
        }

        if (requestParameters.userSeasonRulesIdLessThanOrEqual !== undefined) {
            queryParameters['userSeasonRulesId.lessThanOrEqual'] = requestParameters.userSeasonRulesIdLessThanOrEqual;
        }

        if (requestParameters.userSeasonRulesIdEquals !== undefined) {
            queryParameters['userSeasonRulesId.equals'] = requestParameters.userSeasonRulesIdEquals;
        }

        if (requestParameters.userSeasonRulesIdNotEquals !== undefined) {
            queryParameters['userSeasonRulesId.notEquals'] = requestParameters.userSeasonRulesIdNotEquals;
        }

        if (requestParameters.userSeasonRulesIdSpecified !== undefined) {
            queryParameters['userSeasonRulesId.specified'] = requestParameters.userSeasonRulesIdSpecified;
        }

        if (requestParameters.userSeasonRulesIdIn) {
            queryParameters['userSeasonRulesId.in'] = requestParameters.userSeasonRulesIdIn;
        }

        if (requestParameters.userSeasonRulesIdNotIn) {
            queryParameters['userSeasonRulesId.notIn'] = requestParameters.userSeasonRulesIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RulesFromJSON));
    }

    /**
     */
    async getAllRules(requestParameters: GetAllRulesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Rules>> {
        const response = await this.getAllRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRulesRaw(requestParameters: GetRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rules>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RulesFromJSON(jsonValue));
    }

    /**
     */
    async getRules(requestParameters: GetRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rules> {
        const response = await this.getRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async partialUpdateRulesRaw(requestParameters: PartialUpdateRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rules>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateRules.');
        }

        if (requestParameters.rules === null || requestParameters.rules === undefined) {
            throw new runtime.RequiredError('rules','Required parameter requestParameters.rules was null or undefined when calling partialUpdateRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RulesToJSON(requestParameters.rules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RulesFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateRules(requestParameters: PartialUpdateRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rules> {
        const response = await this.partialUpdateRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateRulesRaw(requestParameters: UpdateRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rules>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRules.');
        }

        if (requestParameters.rules === null || requestParameters.rules === undefined) {
            throw new runtime.RequiredError('rules','Required parameter requestParameters.rules was null or undefined when calling updateRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RulesToJSON(requestParameters.rules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RulesFromJSON(jsonValue));
    }

    /**
     */
    async updateRules(requestParameters: UpdateRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rules> {
        const response = await this.updateRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CountRulesRulesTypeEqualsEnum = {
    Fantasyformula1Managment: 'FANTASYFORMULA1MANAGMENT'
} as const;
export type CountRulesRulesTypeEqualsEnum = typeof CountRulesRulesTypeEqualsEnum[keyof typeof CountRulesRulesTypeEqualsEnum];
/**
 * @export
 */
export const CountRulesRulesTypeNotEqualsEnum = {
    Fantasyformula1Managment: 'FANTASYFORMULA1MANAGMENT'
} as const;
export type CountRulesRulesTypeNotEqualsEnum = typeof CountRulesRulesTypeNotEqualsEnum[keyof typeof CountRulesRulesTypeNotEqualsEnum];
/**
 * @export
 */
export const CountRulesRulesTypeInEnum = {
    Fantasyformula1Managment: 'FANTASYFORMULA1MANAGMENT'
} as const;
export type CountRulesRulesTypeInEnum = typeof CountRulesRulesTypeInEnum[keyof typeof CountRulesRulesTypeInEnum];
/**
 * @export
 */
export const CountRulesRulesTypeNotInEnum = {
    Fantasyformula1Managment: 'FANTASYFORMULA1MANAGMENT'
} as const;
export type CountRulesRulesTypeNotInEnum = typeof CountRulesRulesTypeNotInEnum[keyof typeof CountRulesRulesTypeNotInEnum];
/**
 * @export
 */
export const GetAllRulesRulesTypeEqualsEnum = {
    Fantasyformula1Managment: 'FANTASYFORMULA1MANAGMENT'
} as const;
export type GetAllRulesRulesTypeEqualsEnum = typeof GetAllRulesRulesTypeEqualsEnum[keyof typeof GetAllRulesRulesTypeEqualsEnum];
/**
 * @export
 */
export const GetAllRulesRulesTypeNotEqualsEnum = {
    Fantasyformula1Managment: 'FANTASYFORMULA1MANAGMENT'
} as const;
export type GetAllRulesRulesTypeNotEqualsEnum = typeof GetAllRulesRulesTypeNotEqualsEnum[keyof typeof GetAllRulesRulesTypeNotEqualsEnum];
/**
 * @export
 */
export const GetAllRulesRulesTypeInEnum = {
    Fantasyformula1Managment: 'FANTASYFORMULA1MANAGMENT'
} as const;
export type GetAllRulesRulesTypeInEnum = typeof GetAllRulesRulesTypeInEnum[keyof typeof GetAllRulesRulesTypeInEnum];
/**
 * @export
 */
export const GetAllRulesRulesTypeNotInEnum = {
    Fantasyformula1Managment: 'FANTASYFORMULA1MANAGMENT'
} as const;
export type GetAllRulesRulesTypeNotInEnum = typeof GetAllRulesRulesTypeNotInEnum[keyof typeof GetAllRulesRulesTypeNotInEnum];
