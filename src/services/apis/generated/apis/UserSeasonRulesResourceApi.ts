/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UserSeasonRules,
} from '../models';
import {
    UserSeasonRulesFromJSON,
    UserSeasonRulesToJSON,
} from '../models';

export interface CountUserSeasonRulesRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    roleEquals?: CountUserSeasonRulesRoleEqualsEnum;
    roleNotEquals?: CountUserSeasonRulesRoleNotEqualsEnum;
    roleSpecified?: boolean;
    roleIn?: Array<CountUserSeasonRulesRoleInEnum>;
    roleNotIn?: Array<CountUserSeasonRulesRoleNotInEnum>;
    userIdGreaterThan?: number;
    userIdLessThan?: number;
    userIdGreaterThanOrEqual?: number;
    userIdLessThanOrEqual?: number;
    userIdEquals?: number;
    userIdNotEquals?: number;
    userIdSpecified?: boolean;
    userIdIn?: Array<number>;
    userIdNotIn?: Array<number>;
    leagueIdGreaterThan?: number;
    leagueIdLessThan?: number;
    leagueIdGreaterThanOrEqual?: number;
    leagueIdLessThanOrEqual?: number;
    leagueIdEquals?: number;
    leagueIdNotEquals?: number;
    leagueIdSpecified?: boolean;
    leagueIdIn?: Array<number>;
    leagueIdNotIn?: Array<number>;
    rulesIdGreaterThan?: number;
    rulesIdLessThan?: number;
    rulesIdGreaterThanOrEqual?: number;
    rulesIdLessThanOrEqual?: number;
    rulesIdEquals?: number;
    rulesIdNotEquals?: number;
    rulesIdSpecified?: boolean;
    rulesIdIn?: Array<number>;
    rulesIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface CreateUserSeasonRulesRequest {
    userSeasonRules: UserSeasonRules;
}

export interface DeleteUserSeasonRulesRequest {
    id: number;
}

export interface GetAllUserSeasonRulesRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    roleEquals?: GetAllUserSeasonRulesRoleEqualsEnum;
    roleNotEquals?: GetAllUserSeasonRulesRoleNotEqualsEnum;
    roleSpecified?: boolean;
    roleIn?: Array<GetAllUserSeasonRulesRoleInEnum>;
    roleNotIn?: Array<GetAllUserSeasonRulesRoleNotInEnum>;
    userIdGreaterThan?: number;
    userIdLessThan?: number;
    userIdGreaterThanOrEqual?: number;
    userIdLessThanOrEqual?: number;
    userIdEquals?: number;
    userIdNotEquals?: number;
    userIdSpecified?: boolean;
    userIdIn?: Array<number>;
    userIdNotIn?: Array<number>;
    leagueIdGreaterThan?: number;
    leagueIdLessThan?: number;
    leagueIdGreaterThanOrEqual?: number;
    leagueIdLessThanOrEqual?: number;
    leagueIdEquals?: number;
    leagueIdNotEquals?: number;
    leagueIdSpecified?: boolean;
    leagueIdIn?: Array<number>;
    leagueIdNotIn?: Array<number>;
    rulesIdGreaterThan?: number;
    rulesIdLessThan?: number;
    rulesIdGreaterThanOrEqual?: number;
    rulesIdLessThanOrEqual?: number;
    rulesIdEquals?: number;
    rulesIdNotEquals?: number;
    rulesIdSpecified?: boolean;
    rulesIdIn?: Array<number>;
    rulesIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface GetUserSeasonRulesRequest {
    id: number;
}

export interface PartialUpdateUserSeasonRulesRequest {
    id: number;
    userSeasonRules: UserSeasonRules;
}

export interface UpdateUserSeasonRulesRequest {
    id: number;
    userSeasonRules: UserSeasonRules;
}

/**
 * 
 */
export class UserSeasonRulesResourceApi extends runtime.BaseAPI {

    /**
     */
    async countUserSeasonRulesRaw(requestParameters: CountUserSeasonRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.roleEquals !== undefined) {
            queryParameters['role.equals'] = requestParameters.roleEquals;
        }

        if (requestParameters.roleNotEquals !== undefined) {
            queryParameters['role.notEquals'] = requestParameters.roleNotEquals;
        }

        if (requestParameters.roleSpecified !== undefined) {
            queryParameters['role.specified'] = requestParameters.roleSpecified;
        }

        if (requestParameters.roleIn) {
            queryParameters['role.in'] = requestParameters.roleIn;
        }

        if (requestParameters.roleNotIn) {
            queryParameters['role.notIn'] = requestParameters.roleNotIn;
        }

        if (requestParameters.userIdGreaterThan !== undefined) {
            queryParameters['userId.greaterThan'] = requestParameters.userIdGreaterThan;
        }

        if (requestParameters.userIdLessThan !== undefined) {
            queryParameters['userId.lessThan'] = requestParameters.userIdLessThan;
        }

        if (requestParameters.userIdGreaterThanOrEqual !== undefined) {
            queryParameters['userId.greaterThanOrEqual'] = requestParameters.userIdGreaterThanOrEqual;
        }

        if (requestParameters.userIdLessThanOrEqual !== undefined) {
            queryParameters['userId.lessThanOrEqual'] = requestParameters.userIdLessThanOrEqual;
        }

        if (requestParameters.userIdEquals !== undefined) {
            queryParameters['userId.equals'] = requestParameters.userIdEquals;
        }

        if (requestParameters.userIdNotEquals !== undefined) {
            queryParameters['userId.notEquals'] = requestParameters.userIdNotEquals;
        }

        if (requestParameters.userIdSpecified !== undefined) {
            queryParameters['userId.specified'] = requestParameters.userIdSpecified;
        }

        if (requestParameters.userIdIn) {
            queryParameters['userId.in'] = requestParameters.userIdIn;
        }

        if (requestParameters.userIdNotIn) {
            queryParameters['userId.notIn'] = requestParameters.userIdNotIn;
        }

        if (requestParameters.leagueIdGreaterThan !== undefined) {
            queryParameters['leagueId.greaterThan'] = requestParameters.leagueIdGreaterThan;
        }

        if (requestParameters.leagueIdLessThan !== undefined) {
            queryParameters['leagueId.lessThan'] = requestParameters.leagueIdLessThan;
        }

        if (requestParameters.leagueIdGreaterThanOrEqual !== undefined) {
            queryParameters['leagueId.greaterThanOrEqual'] = requestParameters.leagueIdGreaterThanOrEqual;
        }

        if (requestParameters.leagueIdLessThanOrEqual !== undefined) {
            queryParameters['leagueId.lessThanOrEqual'] = requestParameters.leagueIdLessThanOrEqual;
        }

        if (requestParameters.leagueIdEquals !== undefined) {
            queryParameters['leagueId.equals'] = requestParameters.leagueIdEquals;
        }

        if (requestParameters.leagueIdNotEquals !== undefined) {
            queryParameters['leagueId.notEquals'] = requestParameters.leagueIdNotEquals;
        }

        if (requestParameters.leagueIdSpecified !== undefined) {
            queryParameters['leagueId.specified'] = requestParameters.leagueIdSpecified;
        }

        if (requestParameters.leagueIdIn) {
            queryParameters['leagueId.in'] = requestParameters.leagueIdIn;
        }

        if (requestParameters.leagueIdNotIn) {
            queryParameters['leagueId.notIn'] = requestParameters.leagueIdNotIn;
        }

        if (requestParameters.rulesIdGreaterThan !== undefined) {
            queryParameters['rulesId.greaterThan'] = requestParameters.rulesIdGreaterThan;
        }

        if (requestParameters.rulesIdLessThan !== undefined) {
            queryParameters['rulesId.lessThan'] = requestParameters.rulesIdLessThan;
        }

        if (requestParameters.rulesIdGreaterThanOrEqual !== undefined) {
            queryParameters['rulesId.greaterThanOrEqual'] = requestParameters.rulesIdGreaterThanOrEqual;
        }

        if (requestParameters.rulesIdLessThanOrEqual !== undefined) {
            queryParameters['rulesId.lessThanOrEqual'] = requestParameters.rulesIdLessThanOrEqual;
        }

        if (requestParameters.rulesIdEquals !== undefined) {
            queryParameters['rulesId.equals'] = requestParameters.rulesIdEquals;
        }

        if (requestParameters.rulesIdNotEquals !== undefined) {
            queryParameters['rulesId.notEquals'] = requestParameters.rulesIdNotEquals;
        }

        if (requestParameters.rulesIdSpecified !== undefined) {
            queryParameters['rulesId.specified'] = requestParameters.rulesIdSpecified;
        }

        if (requestParameters.rulesIdIn) {
            queryParameters['rulesId.in'] = requestParameters.rulesIdIn;
        }

        if (requestParameters.rulesIdNotIn) {
            queryParameters['rulesId.notIn'] = requestParameters.rulesIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user-season-rules/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async countUserSeasonRules(requestParameters: CountUserSeasonRulesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.countUserSeasonRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createUserSeasonRulesRaw(requestParameters: CreateUserSeasonRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSeasonRules>> {
        if (requestParameters.userSeasonRules === null || requestParameters.userSeasonRules === undefined) {
            throw new runtime.RequiredError('userSeasonRules','Required parameter requestParameters.userSeasonRules was null or undefined when calling createUserSeasonRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user-season-rules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSeasonRulesToJSON(requestParameters.userSeasonRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSeasonRulesFromJSON(jsonValue));
    }

    /**
     */
    async createUserSeasonRules(requestParameters: CreateUserSeasonRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSeasonRules> {
        const response = await this.createUserSeasonRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteUserSeasonRulesRaw(requestParameters: DeleteUserSeasonRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUserSeasonRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user-season-rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUserSeasonRules(requestParameters: DeleteUserSeasonRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserSeasonRulesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllUserSeasonRulesRaw(requestParameters: GetAllUserSeasonRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserSeasonRules>>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.roleEquals !== undefined) {
            queryParameters['role.equals'] = requestParameters.roleEquals;
        }

        if (requestParameters.roleNotEquals !== undefined) {
            queryParameters['role.notEquals'] = requestParameters.roleNotEquals;
        }

        if (requestParameters.roleSpecified !== undefined) {
            queryParameters['role.specified'] = requestParameters.roleSpecified;
        }

        if (requestParameters.roleIn) {
            queryParameters['role.in'] = requestParameters.roleIn;
        }

        if (requestParameters.roleNotIn) {
            queryParameters['role.notIn'] = requestParameters.roleNotIn;
        }

        if (requestParameters.userIdGreaterThan !== undefined) {
            queryParameters['userId.greaterThan'] = requestParameters.userIdGreaterThan;
        }

        if (requestParameters.userIdLessThan !== undefined) {
            queryParameters['userId.lessThan'] = requestParameters.userIdLessThan;
        }

        if (requestParameters.userIdGreaterThanOrEqual !== undefined) {
            queryParameters['userId.greaterThanOrEqual'] = requestParameters.userIdGreaterThanOrEqual;
        }

        if (requestParameters.userIdLessThanOrEqual !== undefined) {
            queryParameters['userId.lessThanOrEqual'] = requestParameters.userIdLessThanOrEqual;
        }

        if (requestParameters.userIdEquals !== undefined) {
            queryParameters['userId.equals'] = requestParameters.userIdEquals;
        }

        if (requestParameters.userIdNotEquals !== undefined) {
            queryParameters['userId.notEquals'] = requestParameters.userIdNotEquals;
        }

        if (requestParameters.userIdSpecified !== undefined) {
            queryParameters['userId.specified'] = requestParameters.userIdSpecified;
        }

        if (requestParameters.userIdIn) {
            queryParameters['userId.in'] = requestParameters.userIdIn;
        }

        if (requestParameters.userIdNotIn) {
            queryParameters['userId.notIn'] = requestParameters.userIdNotIn;
        }

        if (requestParameters.leagueIdGreaterThan !== undefined) {
            queryParameters['leagueId.greaterThan'] = requestParameters.leagueIdGreaterThan;
        }

        if (requestParameters.leagueIdLessThan !== undefined) {
            queryParameters['leagueId.lessThan'] = requestParameters.leagueIdLessThan;
        }

        if (requestParameters.leagueIdGreaterThanOrEqual !== undefined) {
            queryParameters['leagueId.greaterThanOrEqual'] = requestParameters.leagueIdGreaterThanOrEqual;
        }

        if (requestParameters.leagueIdLessThanOrEqual !== undefined) {
            queryParameters['leagueId.lessThanOrEqual'] = requestParameters.leagueIdLessThanOrEqual;
        }

        if (requestParameters.leagueIdEquals !== undefined) {
            queryParameters['leagueId.equals'] = requestParameters.leagueIdEquals;
        }

        if (requestParameters.leagueIdNotEquals !== undefined) {
            queryParameters['leagueId.notEquals'] = requestParameters.leagueIdNotEquals;
        }

        if (requestParameters.leagueIdSpecified !== undefined) {
            queryParameters['leagueId.specified'] = requestParameters.leagueIdSpecified;
        }

        if (requestParameters.leagueIdIn) {
            queryParameters['leagueId.in'] = requestParameters.leagueIdIn;
        }

        if (requestParameters.leagueIdNotIn) {
            queryParameters['leagueId.notIn'] = requestParameters.leagueIdNotIn;
        }

        if (requestParameters.rulesIdGreaterThan !== undefined) {
            queryParameters['rulesId.greaterThan'] = requestParameters.rulesIdGreaterThan;
        }

        if (requestParameters.rulesIdLessThan !== undefined) {
            queryParameters['rulesId.lessThan'] = requestParameters.rulesIdLessThan;
        }

        if (requestParameters.rulesIdGreaterThanOrEqual !== undefined) {
            queryParameters['rulesId.greaterThanOrEqual'] = requestParameters.rulesIdGreaterThanOrEqual;
        }

        if (requestParameters.rulesIdLessThanOrEqual !== undefined) {
            queryParameters['rulesId.lessThanOrEqual'] = requestParameters.rulesIdLessThanOrEqual;
        }

        if (requestParameters.rulesIdEquals !== undefined) {
            queryParameters['rulesId.equals'] = requestParameters.rulesIdEquals;
        }

        if (requestParameters.rulesIdNotEquals !== undefined) {
            queryParameters['rulesId.notEquals'] = requestParameters.rulesIdNotEquals;
        }

        if (requestParameters.rulesIdSpecified !== undefined) {
            queryParameters['rulesId.specified'] = requestParameters.rulesIdSpecified;
        }

        if (requestParameters.rulesIdIn) {
            queryParameters['rulesId.in'] = requestParameters.rulesIdIn;
        }

        if (requestParameters.rulesIdNotIn) {
            queryParameters['rulesId.notIn'] = requestParameters.rulesIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user-season-rules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserSeasonRulesFromJSON));
    }

    /**
     */
    async getAllUserSeasonRules(requestParameters: GetAllUserSeasonRulesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserSeasonRules>> {
        const response = await this.getAllUserSeasonRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserSeasonRulesRaw(requestParameters: GetUserSeasonRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSeasonRules>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserSeasonRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user-season-rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSeasonRulesFromJSON(jsonValue));
    }

    /**
     */
    async getUserSeasonRules(requestParameters: GetUserSeasonRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSeasonRules> {
        const response = await this.getUserSeasonRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async partialUpdateUserSeasonRulesRaw(requestParameters: PartialUpdateUserSeasonRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSeasonRules>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateUserSeasonRules.');
        }

        if (requestParameters.userSeasonRules === null || requestParameters.userSeasonRules === undefined) {
            throw new runtime.RequiredError('userSeasonRules','Required parameter requestParameters.userSeasonRules was null or undefined when calling partialUpdateUserSeasonRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user-season-rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserSeasonRulesToJSON(requestParameters.userSeasonRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSeasonRulesFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateUserSeasonRules(requestParameters: PartialUpdateUserSeasonRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSeasonRules> {
        const response = await this.partialUpdateUserSeasonRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateUserSeasonRulesRaw(requestParameters: UpdateUserSeasonRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSeasonRules>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUserSeasonRules.');
        }

        if (requestParameters.userSeasonRules === null || requestParameters.userSeasonRules === undefined) {
            throw new runtime.RequiredError('userSeasonRules','Required parameter requestParameters.userSeasonRules was null or undefined when calling updateUserSeasonRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user-season-rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserSeasonRulesToJSON(requestParameters.userSeasonRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSeasonRulesFromJSON(jsonValue));
    }

    /**
     */
    async updateUserSeasonRules(requestParameters: UpdateUserSeasonRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSeasonRules> {
        const response = await this.updateUserSeasonRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CountUserSeasonRulesRoleEqualsEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type CountUserSeasonRulesRoleEqualsEnum = typeof CountUserSeasonRulesRoleEqualsEnum[keyof typeof CountUserSeasonRulesRoleEqualsEnum];
/**
 * @export
 */
export const CountUserSeasonRulesRoleNotEqualsEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type CountUserSeasonRulesRoleNotEqualsEnum = typeof CountUserSeasonRulesRoleNotEqualsEnum[keyof typeof CountUserSeasonRulesRoleNotEqualsEnum];
/**
 * @export
 */
export const CountUserSeasonRulesRoleInEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type CountUserSeasonRulesRoleInEnum = typeof CountUserSeasonRulesRoleInEnum[keyof typeof CountUserSeasonRulesRoleInEnum];
/**
 * @export
 */
export const CountUserSeasonRulesRoleNotInEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type CountUserSeasonRulesRoleNotInEnum = typeof CountUserSeasonRulesRoleNotInEnum[keyof typeof CountUserSeasonRulesRoleNotInEnum];
/**
 * @export
 */
export const GetAllUserSeasonRulesRoleEqualsEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type GetAllUserSeasonRulesRoleEqualsEnum = typeof GetAllUserSeasonRulesRoleEqualsEnum[keyof typeof GetAllUserSeasonRulesRoleEqualsEnum];
/**
 * @export
 */
export const GetAllUserSeasonRulesRoleNotEqualsEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type GetAllUserSeasonRulesRoleNotEqualsEnum = typeof GetAllUserSeasonRulesRoleNotEqualsEnum[keyof typeof GetAllUserSeasonRulesRoleNotEqualsEnum];
/**
 * @export
 */
export const GetAllUserSeasonRulesRoleInEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type GetAllUserSeasonRulesRoleInEnum = typeof GetAllUserSeasonRulesRoleInEnum[keyof typeof GetAllUserSeasonRulesRoleInEnum];
/**
 * @export
 */
export const GetAllUserSeasonRulesRoleNotInEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type GetAllUserSeasonRulesRoleNotInEnum = typeof GetAllUserSeasonRulesRoleNotInEnum[keyof typeof GetAllUserSeasonRulesRoleNotInEnum];
