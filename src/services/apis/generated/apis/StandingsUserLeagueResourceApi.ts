/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StandingsUserLeague,
} from '../models';
import {
    StandingsUserLeagueFromJSON,
    StandingsUserLeagueToJSON,
} from '../models';

export interface CountStandingsUserLeaguesRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    posGreaterThan?: number;
    posLessThan?: number;
    posGreaterThanOrEqual?: number;
    posLessThanOrEqual?: number;
    posEquals?: number;
    posNotEquals?: number;
    posSpecified?: boolean;
    posIn?: Array<number>;
    posNotIn?: Array<number>;
    pointsGreaterThan?: number;
    pointsLessThan?: number;
    pointsGreaterThanOrEqual?: number;
    pointsLessThanOrEqual?: number;
    pointsEquals?: number;
    pointsNotEquals?: number;
    pointsSpecified?: boolean;
    pointsIn?: Array<number>;
    pointsNotIn?: Array<number>;
    userIdGreaterThan?: number;
    userIdLessThan?: number;
    userIdGreaterThanOrEqual?: number;
    userIdLessThanOrEqual?: number;
    userIdEquals?: number;
    userIdNotEquals?: number;
    userIdSpecified?: boolean;
    userIdIn?: Array<number>;
    userIdNotIn?: Array<number>;
    leagueIdGreaterThan?: number;
    leagueIdLessThan?: number;
    leagueIdGreaterThanOrEqual?: number;
    leagueIdLessThanOrEqual?: number;
    leagueIdEquals?: number;
    leagueIdNotEquals?: number;
    leagueIdSpecified?: boolean;
    leagueIdIn?: Array<number>;
    leagueIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface CreateStandingsUserLeagueRequest {
    standingsUserLeague: StandingsUserLeague;
}

export interface DeleteStandingsUserLeagueRequest {
    id: number;
}

export interface GetAllStandingsUserLeaguesRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    posGreaterThan?: number;
    posLessThan?: number;
    posGreaterThanOrEqual?: number;
    posLessThanOrEqual?: number;
    posEquals?: number;
    posNotEquals?: number;
    posSpecified?: boolean;
    posIn?: Array<number>;
    posNotIn?: Array<number>;
    pointsGreaterThan?: number;
    pointsLessThan?: number;
    pointsGreaterThanOrEqual?: number;
    pointsLessThanOrEqual?: number;
    pointsEquals?: number;
    pointsNotEquals?: number;
    pointsSpecified?: boolean;
    pointsIn?: Array<number>;
    pointsNotIn?: Array<number>;
    userIdGreaterThan?: number;
    userIdLessThan?: number;
    userIdGreaterThanOrEqual?: number;
    userIdLessThanOrEqual?: number;
    userIdEquals?: number;
    userIdNotEquals?: number;
    userIdSpecified?: boolean;
    userIdIn?: Array<number>;
    userIdNotIn?: Array<number>;
    leagueIdGreaterThan?: number;
    leagueIdLessThan?: number;
    leagueIdGreaterThanOrEqual?: number;
    leagueIdLessThanOrEqual?: number;
    leagueIdEquals?: number;
    leagueIdNotEquals?: number;
    leagueIdSpecified?: boolean;
    leagueIdIn?: Array<number>;
    leagueIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface GetStandingsUserLeagueRequest {
    id: number;
}

export interface PartialUpdateStandingsUserLeagueRequest {
    id: number;
    standingsUserLeague: StandingsUserLeague;
}

export interface UpdateStandingsUserLeagueRequest {
    id: number;
    standingsUserLeague: StandingsUserLeague;
}

/**
 * 
 */
export class StandingsUserLeagueResourceApi extends runtime.BaseAPI {

    /**
     */
    async countStandingsUserLeaguesRaw(requestParameters: CountStandingsUserLeaguesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.posGreaterThan !== undefined) {
            queryParameters['pos.greaterThan'] = requestParameters.posGreaterThan;
        }

        if (requestParameters.posLessThan !== undefined) {
            queryParameters['pos.lessThan'] = requestParameters.posLessThan;
        }

        if (requestParameters.posGreaterThanOrEqual !== undefined) {
            queryParameters['pos.greaterThanOrEqual'] = requestParameters.posGreaterThanOrEqual;
        }

        if (requestParameters.posLessThanOrEqual !== undefined) {
            queryParameters['pos.lessThanOrEqual'] = requestParameters.posLessThanOrEqual;
        }

        if (requestParameters.posEquals !== undefined) {
            queryParameters['pos.equals'] = requestParameters.posEquals;
        }

        if (requestParameters.posNotEquals !== undefined) {
            queryParameters['pos.notEquals'] = requestParameters.posNotEquals;
        }

        if (requestParameters.posSpecified !== undefined) {
            queryParameters['pos.specified'] = requestParameters.posSpecified;
        }

        if (requestParameters.posIn) {
            queryParameters['pos.in'] = requestParameters.posIn;
        }

        if (requestParameters.posNotIn) {
            queryParameters['pos.notIn'] = requestParameters.posNotIn;
        }

        if (requestParameters.pointsGreaterThan !== undefined) {
            queryParameters['points.greaterThan'] = requestParameters.pointsGreaterThan;
        }

        if (requestParameters.pointsLessThan !== undefined) {
            queryParameters['points.lessThan'] = requestParameters.pointsLessThan;
        }

        if (requestParameters.pointsGreaterThanOrEqual !== undefined) {
            queryParameters['points.greaterThanOrEqual'] = requestParameters.pointsGreaterThanOrEqual;
        }

        if (requestParameters.pointsLessThanOrEqual !== undefined) {
            queryParameters['points.lessThanOrEqual'] = requestParameters.pointsLessThanOrEqual;
        }

        if (requestParameters.pointsEquals !== undefined) {
            queryParameters['points.equals'] = requestParameters.pointsEquals;
        }

        if (requestParameters.pointsNotEquals !== undefined) {
            queryParameters['points.notEquals'] = requestParameters.pointsNotEquals;
        }

        if (requestParameters.pointsSpecified !== undefined) {
            queryParameters['points.specified'] = requestParameters.pointsSpecified;
        }

        if (requestParameters.pointsIn) {
            queryParameters['points.in'] = requestParameters.pointsIn;
        }

        if (requestParameters.pointsNotIn) {
            queryParameters['points.notIn'] = requestParameters.pointsNotIn;
        }

        if (requestParameters.userIdGreaterThan !== undefined) {
            queryParameters['userId.greaterThan'] = requestParameters.userIdGreaterThan;
        }

        if (requestParameters.userIdLessThan !== undefined) {
            queryParameters['userId.lessThan'] = requestParameters.userIdLessThan;
        }

        if (requestParameters.userIdGreaterThanOrEqual !== undefined) {
            queryParameters['userId.greaterThanOrEqual'] = requestParameters.userIdGreaterThanOrEqual;
        }

        if (requestParameters.userIdLessThanOrEqual !== undefined) {
            queryParameters['userId.lessThanOrEqual'] = requestParameters.userIdLessThanOrEqual;
        }

        if (requestParameters.userIdEquals !== undefined) {
            queryParameters['userId.equals'] = requestParameters.userIdEquals;
        }

        if (requestParameters.userIdNotEquals !== undefined) {
            queryParameters['userId.notEquals'] = requestParameters.userIdNotEquals;
        }

        if (requestParameters.userIdSpecified !== undefined) {
            queryParameters['userId.specified'] = requestParameters.userIdSpecified;
        }

        if (requestParameters.userIdIn) {
            queryParameters['userId.in'] = requestParameters.userIdIn;
        }

        if (requestParameters.userIdNotIn) {
            queryParameters['userId.notIn'] = requestParameters.userIdNotIn;
        }

        if (requestParameters.leagueIdGreaterThan !== undefined) {
            queryParameters['leagueId.greaterThan'] = requestParameters.leagueIdGreaterThan;
        }

        if (requestParameters.leagueIdLessThan !== undefined) {
            queryParameters['leagueId.lessThan'] = requestParameters.leagueIdLessThan;
        }

        if (requestParameters.leagueIdGreaterThanOrEqual !== undefined) {
            queryParameters['leagueId.greaterThanOrEqual'] = requestParameters.leagueIdGreaterThanOrEqual;
        }

        if (requestParameters.leagueIdLessThanOrEqual !== undefined) {
            queryParameters['leagueId.lessThanOrEqual'] = requestParameters.leagueIdLessThanOrEqual;
        }

        if (requestParameters.leagueIdEquals !== undefined) {
            queryParameters['leagueId.equals'] = requestParameters.leagueIdEquals;
        }

        if (requestParameters.leagueIdNotEquals !== undefined) {
            queryParameters['leagueId.notEquals'] = requestParameters.leagueIdNotEquals;
        }

        if (requestParameters.leagueIdSpecified !== undefined) {
            queryParameters['leagueId.specified'] = requestParameters.leagueIdSpecified;
        }

        if (requestParameters.leagueIdIn) {
            queryParameters['leagueId.in'] = requestParameters.leagueIdIn;
        }

        if (requestParameters.leagueIdNotIn) {
            queryParameters['leagueId.notIn'] = requestParameters.leagueIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/standings-user-leagues/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async countStandingsUserLeagues(requestParameters: CountStandingsUserLeaguesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.countStandingsUserLeaguesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createStandingsUserLeagueRaw(requestParameters: CreateStandingsUserLeagueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandingsUserLeague>> {
        if (requestParameters.standingsUserLeague === null || requestParameters.standingsUserLeague === undefined) {
            throw new runtime.RequiredError('standingsUserLeague','Required parameter requestParameters.standingsUserLeague was null or undefined when calling createStandingsUserLeague.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/standings-user-leagues`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StandingsUserLeagueToJSON(requestParameters.standingsUserLeague),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandingsUserLeagueFromJSON(jsonValue));
    }

    /**
     */
    async createStandingsUserLeague(requestParameters: CreateStandingsUserLeagueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandingsUserLeague> {
        const response = await this.createStandingsUserLeagueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteStandingsUserLeagueRaw(requestParameters: DeleteStandingsUserLeagueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStandingsUserLeague.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/standings-user-leagues/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteStandingsUserLeague(requestParameters: DeleteStandingsUserLeagueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStandingsUserLeagueRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllStandingsUserLeaguesRaw(requestParameters: GetAllStandingsUserLeaguesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StandingsUserLeague>>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.posGreaterThan !== undefined) {
            queryParameters['pos.greaterThan'] = requestParameters.posGreaterThan;
        }

        if (requestParameters.posLessThan !== undefined) {
            queryParameters['pos.lessThan'] = requestParameters.posLessThan;
        }

        if (requestParameters.posGreaterThanOrEqual !== undefined) {
            queryParameters['pos.greaterThanOrEqual'] = requestParameters.posGreaterThanOrEqual;
        }

        if (requestParameters.posLessThanOrEqual !== undefined) {
            queryParameters['pos.lessThanOrEqual'] = requestParameters.posLessThanOrEqual;
        }

        if (requestParameters.posEquals !== undefined) {
            queryParameters['pos.equals'] = requestParameters.posEquals;
        }

        if (requestParameters.posNotEquals !== undefined) {
            queryParameters['pos.notEquals'] = requestParameters.posNotEquals;
        }

        if (requestParameters.posSpecified !== undefined) {
            queryParameters['pos.specified'] = requestParameters.posSpecified;
        }

        if (requestParameters.posIn) {
            queryParameters['pos.in'] = requestParameters.posIn;
        }

        if (requestParameters.posNotIn) {
            queryParameters['pos.notIn'] = requestParameters.posNotIn;
        }

        if (requestParameters.pointsGreaterThan !== undefined) {
            queryParameters['points.greaterThan'] = requestParameters.pointsGreaterThan;
        }

        if (requestParameters.pointsLessThan !== undefined) {
            queryParameters['points.lessThan'] = requestParameters.pointsLessThan;
        }

        if (requestParameters.pointsGreaterThanOrEqual !== undefined) {
            queryParameters['points.greaterThanOrEqual'] = requestParameters.pointsGreaterThanOrEqual;
        }

        if (requestParameters.pointsLessThanOrEqual !== undefined) {
            queryParameters['points.lessThanOrEqual'] = requestParameters.pointsLessThanOrEqual;
        }

        if (requestParameters.pointsEquals !== undefined) {
            queryParameters['points.equals'] = requestParameters.pointsEquals;
        }

        if (requestParameters.pointsNotEquals !== undefined) {
            queryParameters['points.notEquals'] = requestParameters.pointsNotEquals;
        }

        if (requestParameters.pointsSpecified !== undefined) {
            queryParameters['points.specified'] = requestParameters.pointsSpecified;
        }

        if (requestParameters.pointsIn) {
            queryParameters['points.in'] = requestParameters.pointsIn;
        }

        if (requestParameters.pointsNotIn) {
            queryParameters['points.notIn'] = requestParameters.pointsNotIn;
        }

        if (requestParameters.userIdGreaterThan !== undefined) {
            queryParameters['userId.greaterThan'] = requestParameters.userIdGreaterThan;
        }

        if (requestParameters.userIdLessThan !== undefined) {
            queryParameters['userId.lessThan'] = requestParameters.userIdLessThan;
        }

        if (requestParameters.userIdGreaterThanOrEqual !== undefined) {
            queryParameters['userId.greaterThanOrEqual'] = requestParameters.userIdGreaterThanOrEqual;
        }

        if (requestParameters.userIdLessThanOrEqual !== undefined) {
            queryParameters['userId.lessThanOrEqual'] = requestParameters.userIdLessThanOrEqual;
        }

        if (requestParameters.userIdEquals !== undefined) {
            queryParameters['userId.equals'] = requestParameters.userIdEquals;
        }

        if (requestParameters.userIdNotEquals !== undefined) {
            queryParameters['userId.notEquals'] = requestParameters.userIdNotEquals;
        }

        if (requestParameters.userIdSpecified !== undefined) {
            queryParameters['userId.specified'] = requestParameters.userIdSpecified;
        }

        if (requestParameters.userIdIn) {
            queryParameters['userId.in'] = requestParameters.userIdIn;
        }

        if (requestParameters.userIdNotIn) {
            queryParameters['userId.notIn'] = requestParameters.userIdNotIn;
        }

        if (requestParameters.leagueIdGreaterThan !== undefined) {
            queryParameters['leagueId.greaterThan'] = requestParameters.leagueIdGreaterThan;
        }

        if (requestParameters.leagueIdLessThan !== undefined) {
            queryParameters['leagueId.lessThan'] = requestParameters.leagueIdLessThan;
        }

        if (requestParameters.leagueIdGreaterThanOrEqual !== undefined) {
            queryParameters['leagueId.greaterThanOrEqual'] = requestParameters.leagueIdGreaterThanOrEqual;
        }

        if (requestParameters.leagueIdLessThanOrEqual !== undefined) {
            queryParameters['leagueId.lessThanOrEqual'] = requestParameters.leagueIdLessThanOrEqual;
        }

        if (requestParameters.leagueIdEquals !== undefined) {
            queryParameters['leagueId.equals'] = requestParameters.leagueIdEquals;
        }

        if (requestParameters.leagueIdNotEquals !== undefined) {
            queryParameters['leagueId.notEquals'] = requestParameters.leagueIdNotEquals;
        }

        if (requestParameters.leagueIdSpecified !== undefined) {
            queryParameters['leagueId.specified'] = requestParameters.leagueIdSpecified;
        }

        if (requestParameters.leagueIdIn) {
            queryParameters['leagueId.in'] = requestParameters.leagueIdIn;
        }

        if (requestParameters.leagueIdNotIn) {
            queryParameters['leagueId.notIn'] = requestParameters.leagueIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/standings-user-leagues`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StandingsUserLeagueFromJSON));
    }

    /**
     */
    async getAllStandingsUserLeagues(requestParameters: GetAllStandingsUserLeaguesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StandingsUserLeague>> {
        const response = await this.getAllStandingsUserLeaguesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getStandingsUserLeagueRaw(requestParameters: GetStandingsUserLeagueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandingsUserLeague>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStandingsUserLeague.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/standings-user-leagues/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandingsUserLeagueFromJSON(jsonValue));
    }

    /**
     */
    async getStandingsUserLeague(requestParameters: GetStandingsUserLeagueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandingsUserLeague> {
        const response = await this.getStandingsUserLeagueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async partialUpdateStandingsUserLeagueRaw(requestParameters: PartialUpdateStandingsUserLeagueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandingsUserLeague>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateStandingsUserLeague.');
        }

        if (requestParameters.standingsUserLeague === null || requestParameters.standingsUserLeague === undefined) {
            throw new runtime.RequiredError('standingsUserLeague','Required parameter requestParameters.standingsUserLeague was null or undefined when calling partialUpdateStandingsUserLeague.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/standings-user-leagues/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StandingsUserLeagueToJSON(requestParameters.standingsUserLeague),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandingsUserLeagueFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateStandingsUserLeague(requestParameters: PartialUpdateStandingsUserLeagueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandingsUserLeague> {
        const response = await this.partialUpdateStandingsUserLeagueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateStandingsUserLeagueRaw(requestParameters: UpdateStandingsUserLeagueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StandingsUserLeague>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStandingsUserLeague.');
        }

        if (requestParameters.standingsUserLeague === null || requestParameters.standingsUserLeague === undefined) {
            throw new runtime.RequiredError('standingsUserLeague','Required parameter requestParameters.standingsUserLeague was null or undefined when calling updateStandingsUserLeague.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/standings-user-leagues/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StandingsUserLeagueToJSON(requestParameters.standingsUserLeague),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StandingsUserLeagueFromJSON(jsonValue));
    }

    /**
     */
    async updateStandingsUserLeague(requestParameters: UpdateStandingsUserLeagueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StandingsUserLeague> {
        const response = await this.updateStandingsUserLeagueRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
