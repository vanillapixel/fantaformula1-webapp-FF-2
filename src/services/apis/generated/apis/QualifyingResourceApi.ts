/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Qualifying,
} from '../models';
import {
    QualifyingFromJSON,
    QualifyingToJSON,
} from '../models';

export interface CountQualifyingsRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    posContains?: string;
    posDoesNotContain?: string;
    posEquals?: string;
    posNotEquals?: string;
    posSpecified?: boolean;
    posIn?: Array<string>;
    posNotIn?: Array<string>;
    numberDriverContains?: string;
    numberDriverDoesNotContain?: string;
    numberDriverEquals?: string;
    numberDriverNotEquals?: string;
    numberDriverSpecified?: boolean;
    numberDriverIn?: Array<string>;
    numberDriverNotIn?: Array<string>;
    nameDriverContains?: string;
    nameDriverDoesNotContain?: string;
    nameDriverEquals?: string;
    nameDriverNotEquals?: string;
    nameDriverSpecified?: boolean;
    nameDriverIn?: Array<string>;
    nameDriverNotIn?: Array<string>;
    nameTeamContains?: string;
    nameTeamDoesNotContain?: string;
    nameTeamEquals?: string;
    nameTeamNotEquals?: string;
    nameTeamSpecified?: boolean;
    nameTeamIn?: Array<string>;
    nameTeamNotIn?: Array<string>;
    q1BestLapGreaterThan?: Date;
    q1BestLapLessThan?: Date;
    q1BestLapGreaterThanOrEqual?: Date;
    q1BestLapLessThanOrEqual?: Date;
    q1BestLapEquals?: Date;
    q1BestLapNotEquals?: Date;
    q1BestLapSpecified?: boolean;
    q1BestLapIn?: Array<Date>;
    q1BestLapNotIn?: Array<Date>;
    q2BestLapGreaterThan?: Date;
    q2BestLapLessThan?: Date;
    q2BestLapGreaterThanOrEqual?: Date;
    q2BestLapLessThanOrEqual?: Date;
    q2BestLapEquals?: Date;
    q2BestLapNotEquals?: Date;
    q2BestLapSpecified?: boolean;
    q2BestLapIn?: Array<Date>;
    q2BestLapNotIn?: Array<Date>;
    q3BestLapGreaterThan?: Date;
    q3BestLapLessThan?: Date;
    q3BestLapGreaterThanOrEqual?: Date;
    q3BestLapLessThanOrEqual?: Date;
    q3BestLapEquals?: Date;
    q3BestLapNotEquals?: Date;
    q3BestLapSpecified?: boolean;
    q3BestLapIn?: Array<Date>;
    q3BestLapNotIn?: Array<Date>;
    numberLapsGreaterThan?: number;
    numberLapsLessThan?: number;
    numberLapsGreaterThanOrEqual?: number;
    numberLapsLessThanOrEqual?: number;
    numberLapsEquals?: number;
    numberLapsNotEquals?: number;
    numberLapsSpecified?: boolean;
    numberLapsIn?: Array<number>;
    numberLapsNotIn?: Array<number>;
    qualifyTypeEquals?: CountQualifyingsQualifyTypeEqualsEnum;
    qualifyTypeNotEquals?: CountQualifyingsQualifyTypeNotEqualsEnum;
    qualifyTypeSpecified?: boolean;
    qualifyTypeIn?: Array<CountQualifyingsQualifyTypeInEnum>;
    qualifyTypeNotIn?: Array<CountQualifyingsQualifyTypeNotInEnum>;
    granPrixIdGreaterThan?: number;
    granPrixIdLessThan?: number;
    granPrixIdGreaterThanOrEqual?: number;
    granPrixIdLessThanOrEqual?: number;
    granPrixIdEquals?: number;
    granPrixIdNotEquals?: number;
    granPrixIdSpecified?: boolean;
    granPrixIdIn?: Array<number>;
    granPrixIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface CreateQualifyingRequest {
    qualifying: Qualifying;
}

export interface DeleteQualifyingRequest {
    id: number;
}

export interface GetAllQualifyingsRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    posContains?: string;
    posDoesNotContain?: string;
    posEquals?: string;
    posNotEquals?: string;
    posSpecified?: boolean;
    posIn?: Array<string>;
    posNotIn?: Array<string>;
    numberDriverContains?: string;
    numberDriverDoesNotContain?: string;
    numberDriverEquals?: string;
    numberDriverNotEquals?: string;
    numberDriverSpecified?: boolean;
    numberDriverIn?: Array<string>;
    numberDriverNotIn?: Array<string>;
    nameDriverContains?: string;
    nameDriverDoesNotContain?: string;
    nameDriverEquals?: string;
    nameDriverNotEquals?: string;
    nameDriverSpecified?: boolean;
    nameDriverIn?: Array<string>;
    nameDriverNotIn?: Array<string>;
    nameTeamContains?: string;
    nameTeamDoesNotContain?: string;
    nameTeamEquals?: string;
    nameTeamNotEquals?: string;
    nameTeamSpecified?: boolean;
    nameTeamIn?: Array<string>;
    nameTeamNotIn?: Array<string>;
    q1BestLapGreaterThan?: Date;
    q1BestLapLessThan?: Date;
    q1BestLapGreaterThanOrEqual?: Date;
    q1BestLapLessThanOrEqual?: Date;
    q1BestLapEquals?: Date;
    q1BestLapNotEquals?: Date;
    q1BestLapSpecified?: boolean;
    q1BestLapIn?: Array<Date>;
    q1BestLapNotIn?: Array<Date>;
    q2BestLapGreaterThan?: Date;
    q2BestLapLessThan?: Date;
    q2BestLapGreaterThanOrEqual?: Date;
    q2BestLapLessThanOrEqual?: Date;
    q2BestLapEquals?: Date;
    q2BestLapNotEquals?: Date;
    q2BestLapSpecified?: boolean;
    q2BestLapIn?: Array<Date>;
    q2BestLapNotIn?: Array<Date>;
    q3BestLapGreaterThan?: Date;
    q3BestLapLessThan?: Date;
    q3BestLapGreaterThanOrEqual?: Date;
    q3BestLapLessThanOrEqual?: Date;
    q3BestLapEquals?: Date;
    q3BestLapNotEquals?: Date;
    q3BestLapSpecified?: boolean;
    q3BestLapIn?: Array<Date>;
    q3BestLapNotIn?: Array<Date>;
    numberLapsGreaterThan?: number;
    numberLapsLessThan?: number;
    numberLapsGreaterThanOrEqual?: number;
    numberLapsLessThanOrEqual?: number;
    numberLapsEquals?: number;
    numberLapsNotEquals?: number;
    numberLapsSpecified?: boolean;
    numberLapsIn?: Array<number>;
    numberLapsNotIn?: Array<number>;
    qualifyTypeEquals?: GetAllQualifyingsQualifyTypeEqualsEnum;
    qualifyTypeNotEquals?: GetAllQualifyingsQualifyTypeNotEqualsEnum;
    qualifyTypeSpecified?: boolean;
    qualifyTypeIn?: Array<GetAllQualifyingsQualifyTypeInEnum>;
    qualifyTypeNotIn?: Array<GetAllQualifyingsQualifyTypeNotInEnum>;
    granPrixIdGreaterThan?: number;
    granPrixIdLessThan?: number;
    granPrixIdGreaterThanOrEqual?: number;
    granPrixIdLessThanOrEqual?: number;
    granPrixIdEquals?: number;
    granPrixIdNotEquals?: number;
    granPrixIdSpecified?: boolean;
    granPrixIdIn?: Array<number>;
    granPrixIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface GetQualifyingRequest {
    id: number;
}

export interface PartialUpdateQualifyingRequest {
    id: number;
    qualifying: Qualifying;
}

export interface UpdateQualifyingRequest {
    id: number;
    qualifying: Qualifying;
}

/**
 * 
 */
export class QualifyingResourceApi extends runtime.BaseAPI {

    /**
     */
    async countQualifyingsRaw(requestParameters: CountQualifyingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.posContains !== undefined) {
            queryParameters['pos.contains'] = requestParameters.posContains;
        }

        if (requestParameters.posDoesNotContain !== undefined) {
            queryParameters['pos.doesNotContain'] = requestParameters.posDoesNotContain;
        }

        if (requestParameters.posEquals !== undefined) {
            queryParameters['pos.equals'] = requestParameters.posEquals;
        }

        if (requestParameters.posNotEquals !== undefined) {
            queryParameters['pos.notEquals'] = requestParameters.posNotEquals;
        }

        if (requestParameters.posSpecified !== undefined) {
            queryParameters['pos.specified'] = requestParameters.posSpecified;
        }

        if (requestParameters.posIn) {
            queryParameters['pos.in'] = requestParameters.posIn;
        }

        if (requestParameters.posNotIn) {
            queryParameters['pos.notIn'] = requestParameters.posNotIn;
        }

        if (requestParameters.numberDriverContains !== undefined) {
            queryParameters['numberDriver.contains'] = requestParameters.numberDriverContains;
        }

        if (requestParameters.numberDriverDoesNotContain !== undefined) {
            queryParameters['numberDriver.doesNotContain'] = requestParameters.numberDriverDoesNotContain;
        }

        if (requestParameters.numberDriverEquals !== undefined) {
            queryParameters['numberDriver.equals'] = requestParameters.numberDriverEquals;
        }

        if (requestParameters.numberDriverNotEquals !== undefined) {
            queryParameters['numberDriver.notEquals'] = requestParameters.numberDriverNotEquals;
        }

        if (requestParameters.numberDriverSpecified !== undefined) {
            queryParameters['numberDriver.specified'] = requestParameters.numberDriverSpecified;
        }

        if (requestParameters.numberDriverIn) {
            queryParameters['numberDriver.in'] = requestParameters.numberDriverIn;
        }

        if (requestParameters.numberDriverNotIn) {
            queryParameters['numberDriver.notIn'] = requestParameters.numberDriverNotIn;
        }

        if (requestParameters.nameDriverContains !== undefined) {
            queryParameters['nameDriver.contains'] = requestParameters.nameDriverContains;
        }

        if (requestParameters.nameDriverDoesNotContain !== undefined) {
            queryParameters['nameDriver.doesNotContain'] = requestParameters.nameDriverDoesNotContain;
        }

        if (requestParameters.nameDriverEquals !== undefined) {
            queryParameters['nameDriver.equals'] = requestParameters.nameDriverEquals;
        }

        if (requestParameters.nameDriverNotEquals !== undefined) {
            queryParameters['nameDriver.notEquals'] = requestParameters.nameDriverNotEquals;
        }

        if (requestParameters.nameDriverSpecified !== undefined) {
            queryParameters['nameDriver.specified'] = requestParameters.nameDriverSpecified;
        }

        if (requestParameters.nameDriverIn) {
            queryParameters['nameDriver.in'] = requestParameters.nameDriverIn;
        }

        if (requestParameters.nameDriverNotIn) {
            queryParameters['nameDriver.notIn'] = requestParameters.nameDriverNotIn;
        }

        if (requestParameters.nameTeamContains !== undefined) {
            queryParameters['nameTeam.contains'] = requestParameters.nameTeamContains;
        }

        if (requestParameters.nameTeamDoesNotContain !== undefined) {
            queryParameters['nameTeam.doesNotContain'] = requestParameters.nameTeamDoesNotContain;
        }

        if (requestParameters.nameTeamEquals !== undefined) {
            queryParameters['nameTeam.equals'] = requestParameters.nameTeamEquals;
        }

        if (requestParameters.nameTeamNotEquals !== undefined) {
            queryParameters['nameTeam.notEquals'] = requestParameters.nameTeamNotEquals;
        }

        if (requestParameters.nameTeamSpecified !== undefined) {
            queryParameters['nameTeam.specified'] = requestParameters.nameTeamSpecified;
        }

        if (requestParameters.nameTeamIn) {
            queryParameters['nameTeam.in'] = requestParameters.nameTeamIn;
        }

        if (requestParameters.nameTeamNotIn) {
            queryParameters['nameTeam.notIn'] = requestParameters.nameTeamNotIn;
        }

        if (requestParameters.q1BestLapGreaterThan !== undefined) {
            queryParameters['q1BestLap.greaterThan'] = (requestParameters.q1BestLapGreaterThan as any).toISOString();
        }

        if (requestParameters.q1BestLapLessThan !== undefined) {
            queryParameters['q1BestLap.lessThan'] = (requestParameters.q1BestLapLessThan as any).toISOString();
        }

        if (requestParameters.q1BestLapGreaterThanOrEqual !== undefined) {
            queryParameters['q1BestLap.greaterThanOrEqual'] = (requestParameters.q1BestLapGreaterThanOrEqual as any).toISOString();
        }

        if (requestParameters.q1BestLapLessThanOrEqual !== undefined) {
            queryParameters['q1BestLap.lessThanOrEqual'] = (requestParameters.q1BestLapLessThanOrEqual as any).toISOString();
        }

        if (requestParameters.q1BestLapEquals !== undefined) {
            queryParameters['q1BestLap.equals'] = (requestParameters.q1BestLapEquals as any).toISOString();
        }

        if (requestParameters.q1BestLapNotEquals !== undefined) {
            queryParameters['q1BestLap.notEquals'] = (requestParameters.q1BestLapNotEquals as any).toISOString();
        }

        if (requestParameters.q1BestLapSpecified !== undefined) {
            queryParameters['q1BestLap.specified'] = requestParameters.q1BestLapSpecified;
        }

        if (requestParameters.q1BestLapIn) {
            queryParameters['q1BestLap.in'] = requestParameters.q1BestLapIn;
        }

        if (requestParameters.q1BestLapNotIn) {
            queryParameters['q1BestLap.notIn'] = requestParameters.q1BestLapNotIn;
        }

        if (requestParameters.q2BestLapGreaterThan !== undefined) {
            queryParameters['q2BestLap.greaterThan'] = (requestParameters.q2BestLapGreaterThan as any).toISOString();
        }

        if (requestParameters.q2BestLapLessThan !== undefined) {
            queryParameters['q2BestLap.lessThan'] = (requestParameters.q2BestLapLessThan as any).toISOString();
        }

        if (requestParameters.q2BestLapGreaterThanOrEqual !== undefined) {
            queryParameters['q2BestLap.greaterThanOrEqual'] = (requestParameters.q2BestLapGreaterThanOrEqual as any).toISOString();
        }

        if (requestParameters.q2BestLapLessThanOrEqual !== undefined) {
            queryParameters['q2BestLap.lessThanOrEqual'] = (requestParameters.q2BestLapLessThanOrEqual as any).toISOString();
        }

        if (requestParameters.q2BestLapEquals !== undefined) {
            queryParameters['q2BestLap.equals'] = (requestParameters.q2BestLapEquals as any).toISOString();
        }

        if (requestParameters.q2BestLapNotEquals !== undefined) {
            queryParameters['q2BestLap.notEquals'] = (requestParameters.q2BestLapNotEquals as any).toISOString();
        }

        if (requestParameters.q2BestLapSpecified !== undefined) {
            queryParameters['q2BestLap.specified'] = requestParameters.q2BestLapSpecified;
        }

        if (requestParameters.q2BestLapIn) {
            queryParameters['q2BestLap.in'] = requestParameters.q2BestLapIn;
        }

        if (requestParameters.q2BestLapNotIn) {
            queryParameters['q2BestLap.notIn'] = requestParameters.q2BestLapNotIn;
        }

        if (requestParameters.q3BestLapGreaterThan !== undefined) {
            queryParameters['q3BestLap.greaterThan'] = (requestParameters.q3BestLapGreaterThan as any).toISOString();
        }

        if (requestParameters.q3BestLapLessThan !== undefined) {
            queryParameters['q3BestLap.lessThan'] = (requestParameters.q3BestLapLessThan as any).toISOString();
        }

        if (requestParameters.q3BestLapGreaterThanOrEqual !== undefined) {
            queryParameters['q3BestLap.greaterThanOrEqual'] = (requestParameters.q3BestLapGreaterThanOrEqual as any).toISOString();
        }

        if (requestParameters.q3BestLapLessThanOrEqual !== undefined) {
            queryParameters['q3BestLap.lessThanOrEqual'] = (requestParameters.q3BestLapLessThanOrEqual as any).toISOString();
        }

        if (requestParameters.q3BestLapEquals !== undefined) {
            queryParameters['q3BestLap.equals'] = (requestParameters.q3BestLapEquals as any).toISOString();
        }

        if (requestParameters.q3BestLapNotEquals !== undefined) {
            queryParameters['q3BestLap.notEquals'] = (requestParameters.q3BestLapNotEquals as any).toISOString();
        }

        if (requestParameters.q3BestLapSpecified !== undefined) {
            queryParameters['q3BestLap.specified'] = requestParameters.q3BestLapSpecified;
        }

        if (requestParameters.q3BestLapIn) {
            queryParameters['q3BestLap.in'] = requestParameters.q3BestLapIn;
        }

        if (requestParameters.q3BestLapNotIn) {
            queryParameters['q3BestLap.notIn'] = requestParameters.q3BestLapNotIn;
        }

        if (requestParameters.numberLapsGreaterThan !== undefined) {
            queryParameters['numberLaps.greaterThan'] = requestParameters.numberLapsGreaterThan;
        }

        if (requestParameters.numberLapsLessThan !== undefined) {
            queryParameters['numberLaps.lessThan'] = requestParameters.numberLapsLessThan;
        }

        if (requestParameters.numberLapsGreaterThanOrEqual !== undefined) {
            queryParameters['numberLaps.greaterThanOrEqual'] = requestParameters.numberLapsGreaterThanOrEqual;
        }

        if (requestParameters.numberLapsLessThanOrEqual !== undefined) {
            queryParameters['numberLaps.lessThanOrEqual'] = requestParameters.numberLapsLessThanOrEqual;
        }

        if (requestParameters.numberLapsEquals !== undefined) {
            queryParameters['numberLaps.equals'] = requestParameters.numberLapsEquals;
        }

        if (requestParameters.numberLapsNotEquals !== undefined) {
            queryParameters['numberLaps.notEquals'] = requestParameters.numberLapsNotEquals;
        }

        if (requestParameters.numberLapsSpecified !== undefined) {
            queryParameters['numberLaps.specified'] = requestParameters.numberLapsSpecified;
        }

        if (requestParameters.numberLapsIn) {
            queryParameters['numberLaps.in'] = requestParameters.numberLapsIn;
        }

        if (requestParameters.numberLapsNotIn) {
            queryParameters['numberLaps.notIn'] = requestParameters.numberLapsNotIn;
        }

        if (requestParameters.qualifyTypeEquals !== undefined) {
            queryParameters['qualifyType.equals'] = requestParameters.qualifyTypeEquals;
        }

        if (requestParameters.qualifyTypeNotEquals !== undefined) {
            queryParameters['qualifyType.notEquals'] = requestParameters.qualifyTypeNotEquals;
        }

        if (requestParameters.qualifyTypeSpecified !== undefined) {
            queryParameters['qualifyType.specified'] = requestParameters.qualifyTypeSpecified;
        }

        if (requestParameters.qualifyTypeIn) {
            queryParameters['qualifyType.in'] = requestParameters.qualifyTypeIn;
        }

        if (requestParameters.qualifyTypeNotIn) {
            queryParameters['qualifyType.notIn'] = requestParameters.qualifyTypeNotIn;
        }

        if (requestParameters.granPrixIdGreaterThan !== undefined) {
            queryParameters['granPrixId.greaterThan'] = requestParameters.granPrixIdGreaterThan;
        }

        if (requestParameters.granPrixIdLessThan !== undefined) {
            queryParameters['granPrixId.lessThan'] = requestParameters.granPrixIdLessThan;
        }

        if (requestParameters.granPrixIdGreaterThanOrEqual !== undefined) {
            queryParameters['granPrixId.greaterThanOrEqual'] = requestParameters.granPrixIdGreaterThanOrEqual;
        }

        if (requestParameters.granPrixIdLessThanOrEqual !== undefined) {
            queryParameters['granPrixId.lessThanOrEqual'] = requestParameters.granPrixIdLessThanOrEqual;
        }

        if (requestParameters.granPrixIdEquals !== undefined) {
            queryParameters['granPrixId.equals'] = requestParameters.granPrixIdEquals;
        }

        if (requestParameters.granPrixIdNotEquals !== undefined) {
            queryParameters['granPrixId.notEquals'] = requestParameters.granPrixIdNotEquals;
        }

        if (requestParameters.granPrixIdSpecified !== undefined) {
            queryParameters['granPrixId.specified'] = requestParameters.granPrixIdSpecified;
        }

        if (requestParameters.granPrixIdIn) {
            queryParameters['granPrixId.in'] = requestParameters.granPrixIdIn;
        }

        if (requestParameters.granPrixIdNotIn) {
            queryParameters['granPrixId.notIn'] = requestParameters.granPrixIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/qualifyings/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async countQualifyings(requestParameters: CountQualifyingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.countQualifyingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createQualifyingRaw(requestParameters: CreateQualifyingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Qualifying>> {
        if (requestParameters.qualifying === null || requestParameters.qualifying === undefined) {
            throw new runtime.RequiredError('qualifying','Required parameter requestParameters.qualifying was null or undefined when calling createQualifying.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/qualifyings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QualifyingToJSON(requestParameters.qualifying),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QualifyingFromJSON(jsonValue));
    }

    /**
     */
    async createQualifying(requestParameters: CreateQualifyingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Qualifying> {
        const response = await this.createQualifyingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteQualifyingRaw(requestParameters: DeleteQualifyingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteQualifying.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/qualifyings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteQualifying(requestParameters: DeleteQualifyingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteQualifyingRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllQualifyingsRaw(requestParameters: GetAllQualifyingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Qualifying>>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.posContains !== undefined) {
            queryParameters['pos.contains'] = requestParameters.posContains;
        }

        if (requestParameters.posDoesNotContain !== undefined) {
            queryParameters['pos.doesNotContain'] = requestParameters.posDoesNotContain;
        }

        if (requestParameters.posEquals !== undefined) {
            queryParameters['pos.equals'] = requestParameters.posEquals;
        }

        if (requestParameters.posNotEquals !== undefined) {
            queryParameters['pos.notEquals'] = requestParameters.posNotEquals;
        }

        if (requestParameters.posSpecified !== undefined) {
            queryParameters['pos.specified'] = requestParameters.posSpecified;
        }

        if (requestParameters.posIn) {
            queryParameters['pos.in'] = requestParameters.posIn;
        }

        if (requestParameters.posNotIn) {
            queryParameters['pos.notIn'] = requestParameters.posNotIn;
        }

        if (requestParameters.numberDriverContains !== undefined) {
            queryParameters['numberDriver.contains'] = requestParameters.numberDriverContains;
        }

        if (requestParameters.numberDriverDoesNotContain !== undefined) {
            queryParameters['numberDriver.doesNotContain'] = requestParameters.numberDriverDoesNotContain;
        }

        if (requestParameters.numberDriverEquals !== undefined) {
            queryParameters['numberDriver.equals'] = requestParameters.numberDriverEquals;
        }

        if (requestParameters.numberDriverNotEquals !== undefined) {
            queryParameters['numberDriver.notEquals'] = requestParameters.numberDriverNotEquals;
        }

        if (requestParameters.numberDriverSpecified !== undefined) {
            queryParameters['numberDriver.specified'] = requestParameters.numberDriverSpecified;
        }

        if (requestParameters.numberDriverIn) {
            queryParameters['numberDriver.in'] = requestParameters.numberDriverIn;
        }

        if (requestParameters.numberDriverNotIn) {
            queryParameters['numberDriver.notIn'] = requestParameters.numberDriverNotIn;
        }

        if (requestParameters.nameDriverContains !== undefined) {
            queryParameters['nameDriver.contains'] = requestParameters.nameDriverContains;
        }

        if (requestParameters.nameDriverDoesNotContain !== undefined) {
            queryParameters['nameDriver.doesNotContain'] = requestParameters.nameDriverDoesNotContain;
        }

        if (requestParameters.nameDriverEquals !== undefined) {
            queryParameters['nameDriver.equals'] = requestParameters.nameDriverEquals;
        }

        if (requestParameters.nameDriverNotEquals !== undefined) {
            queryParameters['nameDriver.notEquals'] = requestParameters.nameDriverNotEquals;
        }

        if (requestParameters.nameDriverSpecified !== undefined) {
            queryParameters['nameDriver.specified'] = requestParameters.nameDriverSpecified;
        }

        if (requestParameters.nameDriverIn) {
            queryParameters['nameDriver.in'] = requestParameters.nameDriverIn;
        }

        if (requestParameters.nameDriverNotIn) {
            queryParameters['nameDriver.notIn'] = requestParameters.nameDriverNotIn;
        }

        if (requestParameters.nameTeamContains !== undefined) {
            queryParameters['nameTeam.contains'] = requestParameters.nameTeamContains;
        }

        if (requestParameters.nameTeamDoesNotContain !== undefined) {
            queryParameters['nameTeam.doesNotContain'] = requestParameters.nameTeamDoesNotContain;
        }

        if (requestParameters.nameTeamEquals !== undefined) {
            queryParameters['nameTeam.equals'] = requestParameters.nameTeamEquals;
        }

        if (requestParameters.nameTeamNotEquals !== undefined) {
            queryParameters['nameTeam.notEquals'] = requestParameters.nameTeamNotEquals;
        }

        if (requestParameters.nameTeamSpecified !== undefined) {
            queryParameters['nameTeam.specified'] = requestParameters.nameTeamSpecified;
        }

        if (requestParameters.nameTeamIn) {
            queryParameters['nameTeam.in'] = requestParameters.nameTeamIn;
        }

        if (requestParameters.nameTeamNotIn) {
            queryParameters['nameTeam.notIn'] = requestParameters.nameTeamNotIn;
        }

        if (requestParameters.q1BestLapGreaterThan !== undefined) {
            queryParameters['q1BestLap.greaterThan'] = (requestParameters.q1BestLapGreaterThan as any).toISOString();
        }

        if (requestParameters.q1BestLapLessThan !== undefined) {
            queryParameters['q1BestLap.lessThan'] = (requestParameters.q1BestLapLessThan as any).toISOString();
        }

        if (requestParameters.q1BestLapGreaterThanOrEqual !== undefined) {
            queryParameters['q1BestLap.greaterThanOrEqual'] = (requestParameters.q1BestLapGreaterThanOrEqual as any).toISOString();
        }

        if (requestParameters.q1BestLapLessThanOrEqual !== undefined) {
            queryParameters['q1BestLap.lessThanOrEqual'] = (requestParameters.q1BestLapLessThanOrEqual as any).toISOString();
        }

        if (requestParameters.q1BestLapEquals !== undefined) {
            queryParameters['q1BestLap.equals'] = (requestParameters.q1BestLapEquals as any).toISOString();
        }

        if (requestParameters.q1BestLapNotEquals !== undefined) {
            queryParameters['q1BestLap.notEquals'] = (requestParameters.q1BestLapNotEquals as any).toISOString();
        }

        if (requestParameters.q1BestLapSpecified !== undefined) {
            queryParameters['q1BestLap.specified'] = requestParameters.q1BestLapSpecified;
        }

        if (requestParameters.q1BestLapIn) {
            queryParameters['q1BestLap.in'] = requestParameters.q1BestLapIn;
        }

        if (requestParameters.q1BestLapNotIn) {
            queryParameters['q1BestLap.notIn'] = requestParameters.q1BestLapNotIn;
        }

        if (requestParameters.q2BestLapGreaterThan !== undefined) {
            queryParameters['q2BestLap.greaterThan'] = (requestParameters.q2BestLapGreaterThan as any).toISOString();
        }

        if (requestParameters.q2BestLapLessThan !== undefined) {
            queryParameters['q2BestLap.lessThan'] = (requestParameters.q2BestLapLessThan as any).toISOString();
        }

        if (requestParameters.q2BestLapGreaterThanOrEqual !== undefined) {
            queryParameters['q2BestLap.greaterThanOrEqual'] = (requestParameters.q2BestLapGreaterThanOrEqual as any).toISOString();
        }

        if (requestParameters.q2BestLapLessThanOrEqual !== undefined) {
            queryParameters['q2BestLap.lessThanOrEqual'] = (requestParameters.q2BestLapLessThanOrEqual as any).toISOString();
        }

        if (requestParameters.q2BestLapEquals !== undefined) {
            queryParameters['q2BestLap.equals'] = (requestParameters.q2BestLapEquals as any).toISOString();
        }

        if (requestParameters.q2BestLapNotEquals !== undefined) {
            queryParameters['q2BestLap.notEquals'] = (requestParameters.q2BestLapNotEquals as any).toISOString();
        }

        if (requestParameters.q2BestLapSpecified !== undefined) {
            queryParameters['q2BestLap.specified'] = requestParameters.q2BestLapSpecified;
        }

        if (requestParameters.q2BestLapIn) {
            queryParameters['q2BestLap.in'] = requestParameters.q2BestLapIn;
        }

        if (requestParameters.q2BestLapNotIn) {
            queryParameters['q2BestLap.notIn'] = requestParameters.q2BestLapNotIn;
        }

        if (requestParameters.q3BestLapGreaterThan !== undefined) {
            queryParameters['q3BestLap.greaterThan'] = (requestParameters.q3BestLapGreaterThan as any).toISOString();
        }

        if (requestParameters.q3BestLapLessThan !== undefined) {
            queryParameters['q3BestLap.lessThan'] = (requestParameters.q3BestLapLessThan as any).toISOString();
        }

        if (requestParameters.q3BestLapGreaterThanOrEqual !== undefined) {
            queryParameters['q3BestLap.greaterThanOrEqual'] = (requestParameters.q3BestLapGreaterThanOrEqual as any).toISOString();
        }

        if (requestParameters.q3BestLapLessThanOrEqual !== undefined) {
            queryParameters['q3BestLap.lessThanOrEqual'] = (requestParameters.q3BestLapLessThanOrEqual as any).toISOString();
        }

        if (requestParameters.q3BestLapEquals !== undefined) {
            queryParameters['q3BestLap.equals'] = (requestParameters.q3BestLapEquals as any).toISOString();
        }

        if (requestParameters.q3BestLapNotEquals !== undefined) {
            queryParameters['q3BestLap.notEquals'] = (requestParameters.q3BestLapNotEquals as any).toISOString();
        }

        if (requestParameters.q3BestLapSpecified !== undefined) {
            queryParameters['q3BestLap.specified'] = requestParameters.q3BestLapSpecified;
        }

        if (requestParameters.q3BestLapIn) {
            queryParameters['q3BestLap.in'] = requestParameters.q3BestLapIn;
        }

        if (requestParameters.q3BestLapNotIn) {
            queryParameters['q3BestLap.notIn'] = requestParameters.q3BestLapNotIn;
        }

        if (requestParameters.numberLapsGreaterThan !== undefined) {
            queryParameters['numberLaps.greaterThan'] = requestParameters.numberLapsGreaterThan;
        }

        if (requestParameters.numberLapsLessThan !== undefined) {
            queryParameters['numberLaps.lessThan'] = requestParameters.numberLapsLessThan;
        }

        if (requestParameters.numberLapsGreaterThanOrEqual !== undefined) {
            queryParameters['numberLaps.greaterThanOrEqual'] = requestParameters.numberLapsGreaterThanOrEqual;
        }

        if (requestParameters.numberLapsLessThanOrEqual !== undefined) {
            queryParameters['numberLaps.lessThanOrEqual'] = requestParameters.numberLapsLessThanOrEqual;
        }

        if (requestParameters.numberLapsEquals !== undefined) {
            queryParameters['numberLaps.equals'] = requestParameters.numberLapsEquals;
        }

        if (requestParameters.numberLapsNotEquals !== undefined) {
            queryParameters['numberLaps.notEquals'] = requestParameters.numberLapsNotEquals;
        }

        if (requestParameters.numberLapsSpecified !== undefined) {
            queryParameters['numberLaps.specified'] = requestParameters.numberLapsSpecified;
        }

        if (requestParameters.numberLapsIn) {
            queryParameters['numberLaps.in'] = requestParameters.numberLapsIn;
        }

        if (requestParameters.numberLapsNotIn) {
            queryParameters['numberLaps.notIn'] = requestParameters.numberLapsNotIn;
        }

        if (requestParameters.qualifyTypeEquals !== undefined) {
            queryParameters['qualifyType.equals'] = requestParameters.qualifyTypeEquals;
        }

        if (requestParameters.qualifyTypeNotEquals !== undefined) {
            queryParameters['qualifyType.notEquals'] = requestParameters.qualifyTypeNotEquals;
        }

        if (requestParameters.qualifyTypeSpecified !== undefined) {
            queryParameters['qualifyType.specified'] = requestParameters.qualifyTypeSpecified;
        }

        if (requestParameters.qualifyTypeIn) {
            queryParameters['qualifyType.in'] = requestParameters.qualifyTypeIn;
        }

        if (requestParameters.qualifyTypeNotIn) {
            queryParameters['qualifyType.notIn'] = requestParameters.qualifyTypeNotIn;
        }

        if (requestParameters.granPrixIdGreaterThan !== undefined) {
            queryParameters['granPrixId.greaterThan'] = requestParameters.granPrixIdGreaterThan;
        }

        if (requestParameters.granPrixIdLessThan !== undefined) {
            queryParameters['granPrixId.lessThan'] = requestParameters.granPrixIdLessThan;
        }

        if (requestParameters.granPrixIdGreaterThanOrEqual !== undefined) {
            queryParameters['granPrixId.greaterThanOrEqual'] = requestParameters.granPrixIdGreaterThanOrEqual;
        }

        if (requestParameters.granPrixIdLessThanOrEqual !== undefined) {
            queryParameters['granPrixId.lessThanOrEqual'] = requestParameters.granPrixIdLessThanOrEqual;
        }

        if (requestParameters.granPrixIdEquals !== undefined) {
            queryParameters['granPrixId.equals'] = requestParameters.granPrixIdEquals;
        }

        if (requestParameters.granPrixIdNotEquals !== undefined) {
            queryParameters['granPrixId.notEquals'] = requestParameters.granPrixIdNotEquals;
        }

        if (requestParameters.granPrixIdSpecified !== undefined) {
            queryParameters['granPrixId.specified'] = requestParameters.granPrixIdSpecified;
        }

        if (requestParameters.granPrixIdIn) {
            queryParameters['granPrixId.in'] = requestParameters.granPrixIdIn;
        }

        if (requestParameters.granPrixIdNotIn) {
            queryParameters['granPrixId.notIn'] = requestParameters.granPrixIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/qualifyings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QualifyingFromJSON));
    }

    /**
     */
    async getAllQualifyings(requestParameters: GetAllQualifyingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Qualifying>> {
        const response = await this.getAllQualifyingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getQualifyingRaw(requestParameters: GetQualifyingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Qualifying>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getQualifying.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/qualifyings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QualifyingFromJSON(jsonValue));
    }

    /**
     */
    async getQualifying(requestParameters: GetQualifyingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Qualifying> {
        const response = await this.getQualifyingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async partialUpdateQualifyingRaw(requestParameters: PartialUpdateQualifyingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Qualifying>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateQualifying.');
        }

        if (requestParameters.qualifying === null || requestParameters.qualifying === undefined) {
            throw new runtime.RequiredError('qualifying','Required parameter requestParameters.qualifying was null or undefined when calling partialUpdateQualifying.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/qualifyings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: QualifyingToJSON(requestParameters.qualifying),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QualifyingFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateQualifying(requestParameters: PartialUpdateQualifyingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Qualifying> {
        const response = await this.partialUpdateQualifyingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateQualifyingRaw(requestParameters: UpdateQualifyingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Qualifying>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateQualifying.');
        }

        if (requestParameters.qualifying === null || requestParameters.qualifying === undefined) {
            throw new runtime.RequiredError('qualifying','Required parameter requestParameters.qualifying was null or undefined when calling updateQualifying.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/qualifyings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: QualifyingToJSON(requestParameters.qualifying),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QualifyingFromJSON(jsonValue));
    }

    /**
     */
    async updateQualifying(requestParameters: UpdateQualifyingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Qualifying> {
        const response = await this.updateQualifyingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CountQualifyingsQualifyTypeEqualsEnum = {
    Q1: 'Q1',
    Q2: 'Q2',
    Overallqualify: 'OVERALLQUALIFY'
} as const;
export type CountQualifyingsQualifyTypeEqualsEnum = typeof CountQualifyingsQualifyTypeEqualsEnum[keyof typeof CountQualifyingsQualifyTypeEqualsEnum];
/**
 * @export
 */
export const CountQualifyingsQualifyTypeNotEqualsEnum = {
    Q1: 'Q1',
    Q2: 'Q2',
    Overallqualify: 'OVERALLQUALIFY'
} as const;
export type CountQualifyingsQualifyTypeNotEqualsEnum = typeof CountQualifyingsQualifyTypeNotEqualsEnum[keyof typeof CountQualifyingsQualifyTypeNotEqualsEnum];
/**
 * @export
 */
export const CountQualifyingsQualifyTypeInEnum = {
    Q1: 'Q1',
    Q2: 'Q2',
    Overallqualify: 'OVERALLQUALIFY'
} as const;
export type CountQualifyingsQualifyTypeInEnum = typeof CountQualifyingsQualifyTypeInEnum[keyof typeof CountQualifyingsQualifyTypeInEnum];
/**
 * @export
 */
export const CountQualifyingsQualifyTypeNotInEnum = {
    Q1: 'Q1',
    Q2: 'Q2',
    Overallqualify: 'OVERALLQUALIFY'
} as const;
export type CountQualifyingsQualifyTypeNotInEnum = typeof CountQualifyingsQualifyTypeNotInEnum[keyof typeof CountQualifyingsQualifyTypeNotInEnum];
/**
 * @export
 */
export const GetAllQualifyingsQualifyTypeEqualsEnum = {
    Q1: 'Q1',
    Q2: 'Q2',
    Overallqualify: 'OVERALLQUALIFY'
} as const;
export type GetAllQualifyingsQualifyTypeEqualsEnum = typeof GetAllQualifyingsQualifyTypeEqualsEnum[keyof typeof GetAllQualifyingsQualifyTypeEqualsEnum];
/**
 * @export
 */
export const GetAllQualifyingsQualifyTypeNotEqualsEnum = {
    Q1: 'Q1',
    Q2: 'Q2',
    Overallqualify: 'OVERALLQUALIFY'
} as const;
export type GetAllQualifyingsQualifyTypeNotEqualsEnum = typeof GetAllQualifyingsQualifyTypeNotEqualsEnum[keyof typeof GetAllQualifyingsQualifyTypeNotEqualsEnum];
/**
 * @export
 */
export const GetAllQualifyingsQualifyTypeInEnum = {
    Q1: 'Q1',
    Q2: 'Q2',
    Overallqualify: 'OVERALLQUALIFY'
} as const;
export type GetAllQualifyingsQualifyTypeInEnum = typeof GetAllQualifyingsQualifyTypeInEnum[keyof typeof GetAllQualifyingsQualifyTypeInEnum];
/**
 * @export
 */
export const GetAllQualifyingsQualifyTypeNotInEnum = {
    Q1: 'Q1',
    Q2: 'Q2',
    Overallqualify: 'OVERALLQUALIFY'
} as const;
export type GetAllQualifyingsQualifyTypeNotInEnum = typeof GetAllQualifyingsQualifyTypeNotInEnum[keyof typeof GetAllQualifyingsQualifyTypeNotInEnum];
