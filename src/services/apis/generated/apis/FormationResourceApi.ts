/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Formation,
} from '../models';
import {
    FormationFromJSON,
    FormationToJSON,
} from '../models';

export interface CountFormationsRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    drsEquals?: CountFormationsDrsEqualsEnum;
    drsNotEquals?: CountFormationsDrsNotEqualsEnum;
    drsSpecified?: boolean;
    drsIn?: Array<CountFormationsDrsInEnum>;
    drsNotIn?: Array<CountFormationsDrsNotInEnum>;
    formationTypeEquals?: CountFormationsFormationTypeEqualsEnum;
    formationTypeNotEquals?: CountFormationsFormationTypeNotEqualsEnum;
    formationTypeSpecified?: boolean;
    formationTypeIn?: Array<CountFormationsFormationTypeInEnum>;
    formationTypeNotIn?: Array<CountFormationsFormationTypeNotInEnum>;
    finalScoreGreaterThan?: number;
    finalScoreLessThan?: number;
    finalScoreGreaterThanOrEqual?: number;
    finalScoreLessThanOrEqual?: number;
    finalScoreEquals?: number;
    finalScoreNotEquals?: number;
    finalScoreSpecified?: boolean;
    finalScoreIn?: Array<number>;
    finalScoreNotIn?: Array<number>;
    driverIdGreaterThan?: number;
    driverIdLessThan?: number;
    driverIdGreaterThanOrEqual?: number;
    driverIdLessThanOrEqual?: number;
    driverIdEquals?: number;
    driverIdNotEquals?: number;
    driverIdSpecified?: boolean;
    driverIdIn?: Array<number>;
    driverIdNotIn?: Array<number>;
    teamIdGreaterThan?: number;
    teamIdLessThan?: number;
    teamIdGreaterThanOrEqual?: number;
    teamIdLessThanOrEqual?: number;
    teamIdEquals?: number;
    teamIdNotEquals?: number;
    teamIdSpecified?: boolean;
    teamIdIn?: Array<number>;
    teamIdNotIn?: Array<number>;
    userIdGreaterThan?: number;
    userIdLessThan?: number;
    userIdGreaterThanOrEqual?: number;
    userIdLessThanOrEqual?: number;
    userIdEquals?: number;
    userIdNotEquals?: number;
    userIdSpecified?: boolean;
    userIdIn?: Array<number>;
    userIdNotIn?: Array<number>;
    granPrixIdGreaterThan?: number;
    granPrixIdLessThan?: number;
    granPrixIdGreaterThanOrEqual?: number;
    granPrixIdLessThanOrEqual?: number;
    granPrixIdEquals?: number;
    granPrixIdNotEquals?: number;
    granPrixIdSpecified?: boolean;
    granPrixIdIn?: Array<number>;
    granPrixIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface CreateFormationRequest {
    formation: Formation;
}

export interface DeleteFormationRequest {
    id: number;
}

export interface GetAllFormationsRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    drsEquals?: GetAllFormationsDrsEqualsEnum;
    drsNotEquals?: GetAllFormationsDrsNotEqualsEnum;
    drsSpecified?: boolean;
    drsIn?: Array<GetAllFormationsDrsInEnum>;
    drsNotIn?: Array<GetAllFormationsDrsNotInEnum>;
    formationTypeEquals?: GetAllFormationsFormationTypeEqualsEnum;
    formationTypeNotEquals?: GetAllFormationsFormationTypeNotEqualsEnum;
    formationTypeSpecified?: boolean;
    formationTypeIn?: Array<GetAllFormationsFormationTypeInEnum>;
    formationTypeNotIn?: Array<GetAllFormationsFormationTypeNotInEnum>;
    finalScoreGreaterThan?: number;
    finalScoreLessThan?: number;
    finalScoreGreaterThanOrEqual?: number;
    finalScoreLessThanOrEqual?: number;
    finalScoreEquals?: number;
    finalScoreNotEquals?: number;
    finalScoreSpecified?: boolean;
    finalScoreIn?: Array<number>;
    finalScoreNotIn?: Array<number>;
    driverIdGreaterThan?: number;
    driverIdLessThan?: number;
    driverIdGreaterThanOrEqual?: number;
    driverIdLessThanOrEqual?: number;
    driverIdEquals?: number;
    driverIdNotEquals?: number;
    driverIdSpecified?: boolean;
    driverIdIn?: Array<number>;
    driverIdNotIn?: Array<number>;
    teamIdGreaterThan?: number;
    teamIdLessThan?: number;
    teamIdGreaterThanOrEqual?: number;
    teamIdLessThanOrEqual?: number;
    teamIdEquals?: number;
    teamIdNotEquals?: number;
    teamIdSpecified?: boolean;
    teamIdIn?: Array<number>;
    teamIdNotIn?: Array<number>;
    userIdGreaterThan?: number;
    userIdLessThan?: number;
    userIdGreaterThanOrEqual?: number;
    userIdLessThanOrEqual?: number;
    userIdEquals?: number;
    userIdNotEquals?: number;
    userIdSpecified?: boolean;
    userIdIn?: Array<number>;
    userIdNotIn?: Array<number>;
    granPrixIdGreaterThan?: number;
    granPrixIdLessThan?: number;
    granPrixIdGreaterThanOrEqual?: number;
    granPrixIdLessThanOrEqual?: number;
    granPrixIdEquals?: number;
    granPrixIdNotEquals?: number;
    granPrixIdSpecified?: boolean;
    granPrixIdIn?: Array<number>;
    granPrixIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface GetFormationRequest {
    id: number;
}

export interface PartialUpdateFormationRequest {
    id: number;
    formation: Formation;
}

export interface UpdateFormationRequest {
    id: number;
    formation: Formation;
}

/**
 * 
 */
export class FormationResourceApi extends runtime.BaseAPI {

    /**
     */
    async countFormationsRaw(requestParameters: CountFormationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.drsEquals !== undefined) {
            queryParameters['drs.equals'] = requestParameters.drsEquals;
        }

        if (requestParameters.drsNotEquals !== undefined) {
            queryParameters['drs.notEquals'] = requestParameters.drsNotEquals;
        }

        if (requestParameters.drsSpecified !== undefined) {
            queryParameters['drs.specified'] = requestParameters.drsSpecified;
        }

        if (requestParameters.drsIn) {
            queryParameters['drs.in'] = requestParameters.drsIn;
        }

        if (requestParameters.drsNotIn) {
            queryParameters['drs.notIn'] = requestParameters.drsNotIn;
        }

        if (requestParameters.formationTypeEquals !== undefined) {
            queryParameters['formationType.equals'] = requestParameters.formationTypeEquals;
        }

        if (requestParameters.formationTypeNotEquals !== undefined) {
            queryParameters['formationType.notEquals'] = requestParameters.formationTypeNotEquals;
        }

        if (requestParameters.formationTypeSpecified !== undefined) {
            queryParameters['formationType.specified'] = requestParameters.formationTypeSpecified;
        }

        if (requestParameters.formationTypeIn) {
            queryParameters['formationType.in'] = requestParameters.formationTypeIn;
        }

        if (requestParameters.formationTypeNotIn) {
            queryParameters['formationType.notIn'] = requestParameters.formationTypeNotIn;
        }

        if (requestParameters.finalScoreGreaterThan !== undefined) {
            queryParameters['finalScore.greaterThan'] = requestParameters.finalScoreGreaterThan;
        }

        if (requestParameters.finalScoreLessThan !== undefined) {
            queryParameters['finalScore.lessThan'] = requestParameters.finalScoreLessThan;
        }

        if (requestParameters.finalScoreGreaterThanOrEqual !== undefined) {
            queryParameters['finalScore.greaterThanOrEqual'] = requestParameters.finalScoreGreaterThanOrEqual;
        }

        if (requestParameters.finalScoreLessThanOrEqual !== undefined) {
            queryParameters['finalScore.lessThanOrEqual'] = requestParameters.finalScoreLessThanOrEqual;
        }

        if (requestParameters.finalScoreEquals !== undefined) {
            queryParameters['finalScore.equals'] = requestParameters.finalScoreEquals;
        }

        if (requestParameters.finalScoreNotEquals !== undefined) {
            queryParameters['finalScore.notEquals'] = requestParameters.finalScoreNotEquals;
        }

        if (requestParameters.finalScoreSpecified !== undefined) {
            queryParameters['finalScore.specified'] = requestParameters.finalScoreSpecified;
        }

        if (requestParameters.finalScoreIn) {
            queryParameters['finalScore.in'] = requestParameters.finalScoreIn;
        }

        if (requestParameters.finalScoreNotIn) {
            queryParameters['finalScore.notIn'] = requestParameters.finalScoreNotIn;
        }

        if (requestParameters.driverIdGreaterThan !== undefined) {
            queryParameters['driverId.greaterThan'] = requestParameters.driverIdGreaterThan;
        }

        if (requestParameters.driverIdLessThan !== undefined) {
            queryParameters['driverId.lessThan'] = requestParameters.driverIdLessThan;
        }

        if (requestParameters.driverIdGreaterThanOrEqual !== undefined) {
            queryParameters['driverId.greaterThanOrEqual'] = requestParameters.driverIdGreaterThanOrEqual;
        }

        if (requestParameters.driverIdLessThanOrEqual !== undefined) {
            queryParameters['driverId.lessThanOrEqual'] = requestParameters.driverIdLessThanOrEqual;
        }

        if (requestParameters.driverIdEquals !== undefined) {
            queryParameters['driverId.equals'] = requestParameters.driverIdEquals;
        }

        if (requestParameters.driverIdNotEquals !== undefined) {
            queryParameters['driverId.notEquals'] = requestParameters.driverIdNotEquals;
        }

        if (requestParameters.driverIdSpecified !== undefined) {
            queryParameters['driverId.specified'] = requestParameters.driverIdSpecified;
        }

        if (requestParameters.driverIdIn) {
            queryParameters['driverId.in'] = requestParameters.driverIdIn;
        }

        if (requestParameters.driverIdNotIn) {
            queryParameters['driverId.notIn'] = requestParameters.driverIdNotIn;
        }

        if (requestParameters.teamIdGreaterThan !== undefined) {
            queryParameters['teamId.greaterThan'] = requestParameters.teamIdGreaterThan;
        }

        if (requestParameters.teamIdLessThan !== undefined) {
            queryParameters['teamId.lessThan'] = requestParameters.teamIdLessThan;
        }

        if (requestParameters.teamIdGreaterThanOrEqual !== undefined) {
            queryParameters['teamId.greaterThanOrEqual'] = requestParameters.teamIdGreaterThanOrEqual;
        }

        if (requestParameters.teamIdLessThanOrEqual !== undefined) {
            queryParameters['teamId.lessThanOrEqual'] = requestParameters.teamIdLessThanOrEqual;
        }

        if (requestParameters.teamIdEquals !== undefined) {
            queryParameters['teamId.equals'] = requestParameters.teamIdEquals;
        }

        if (requestParameters.teamIdNotEquals !== undefined) {
            queryParameters['teamId.notEquals'] = requestParameters.teamIdNotEquals;
        }

        if (requestParameters.teamIdSpecified !== undefined) {
            queryParameters['teamId.specified'] = requestParameters.teamIdSpecified;
        }

        if (requestParameters.teamIdIn) {
            queryParameters['teamId.in'] = requestParameters.teamIdIn;
        }

        if (requestParameters.teamIdNotIn) {
            queryParameters['teamId.notIn'] = requestParameters.teamIdNotIn;
        }

        if (requestParameters.userIdGreaterThan !== undefined) {
            queryParameters['userId.greaterThan'] = requestParameters.userIdGreaterThan;
        }

        if (requestParameters.userIdLessThan !== undefined) {
            queryParameters['userId.lessThan'] = requestParameters.userIdLessThan;
        }

        if (requestParameters.userIdGreaterThanOrEqual !== undefined) {
            queryParameters['userId.greaterThanOrEqual'] = requestParameters.userIdGreaterThanOrEqual;
        }

        if (requestParameters.userIdLessThanOrEqual !== undefined) {
            queryParameters['userId.lessThanOrEqual'] = requestParameters.userIdLessThanOrEqual;
        }

        if (requestParameters.userIdEquals !== undefined) {
            queryParameters['userId.equals'] = requestParameters.userIdEquals;
        }

        if (requestParameters.userIdNotEquals !== undefined) {
            queryParameters['userId.notEquals'] = requestParameters.userIdNotEquals;
        }

        if (requestParameters.userIdSpecified !== undefined) {
            queryParameters['userId.specified'] = requestParameters.userIdSpecified;
        }

        if (requestParameters.userIdIn) {
            queryParameters['userId.in'] = requestParameters.userIdIn;
        }

        if (requestParameters.userIdNotIn) {
            queryParameters['userId.notIn'] = requestParameters.userIdNotIn;
        }

        if (requestParameters.granPrixIdGreaterThan !== undefined) {
            queryParameters['granPrixId.greaterThan'] = requestParameters.granPrixIdGreaterThan;
        }

        if (requestParameters.granPrixIdLessThan !== undefined) {
            queryParameters['granPrixId.lessThan'] = requestParameters.granPrixIdLessThan;
        }

        if (requestParameters.granPrixIdGreaterThanOrEqual !== undefined) {
            queryParameters['granPrixId.greaterThanOrEqual'] = requestParameters.granPrixIdGreaterThanOrEqual;
        }

        if (requestParameters.granPrixIdLessThanOrEqual !== undefined) {
            queryParameters['granPrixId.lessThanOrEqual'] = requestParameters.granPrixIdLessThanOrEqual;
        }

        if (requestParameters.granPrixIdEquals !== undefined) {
            queryParameters['granPrixId.equals'] = requestParameters.granPrixIdEquals;
        }

        if (requestParameters.granPrixIdNotEquals !== undefined) {
            queryParameters['granPrixId.notEquals'] = requestParameters.granPrixIdNotEquals;
        }

        if (requestParameters.granPrixIdSpecified !== undefined) {
            queryParameters['granPrixId.specified'] = requestParameters.granPrixIdSpecified;
        }

        if (requestParameters.granPrixIdIn) {
            queryParameters['granPrixId.in'] = requestParameters.granPrixIdIn;
        }

        if (requestParameters.granPrixIdNotIn) {
            queryParameters['granPrixId.notIn'] = requestParameters.granPrixIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/formations/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async countFormations(requestParameters: CountFormationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.countFormationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createFormationRaw(requestParameters: CreateFormationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Formation>> {
        if (requestParameters.formation === null || requestParameters.formation === undefined) {
            throw new runtime.RequiredError('formation','Required parameter requestParameters.formation was null or undefined when calling createFormation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/formations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FormationToJSON(requestParameters.formation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormationFromJSON(jsonValue));
    }

    /**
     */
    async createFormation(requestParameters: CreateFormationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Formation> {
        const response = await this.createFormationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteFormationRaw(requestParameters: DeleteFormationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFormation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/formations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteFormation(requestParameters: DeleteFormationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFormationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllFormationsRaw(requestParameters: GetAllFormationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Formation>>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.drsEquals !== undefined) {
            queryParameters['drs.equals'] = requestParameters.drsEquals;
        }

        if (requestParameters.drsNotEquals !== undefined) {
            queryParameters['drs.notEquals'] = requestParameters.drsNotEquals;
        }

        if (requestParameters.drsSpecified !== undefined) {
            queryParameters['drs.specified'] = requestParameters.drsSpecified;
        }

        if (requestParameters.drsIn) {
            queryParameters['drs.in'] = requestParameters.drsIn;
        }

        if (requestParameters.drsNotIn) {
            queryParameters['drs.notIn'] = requestParameters.drsNotIn;
        }

        if (requestParameters.formationTypeEquals !== undefined) {
            queryParameters['formationType.equals'] = requestParameters.formationTypeEquals;
        }

        if (requestParameters.formationTypeNotEquals !== undefined) {
            queryParameters['formationType.notEquals'] = requestParameters.formationTypeNotEquals;
        }

        if (requestParameters.formationTypeSpecified !== undefined) {
            queryParameters['formationType.specified'] = requestParameters.formationTypeSpecified;
        }

        if (requestParameters.formationTypeIn) {
            queryParameters['formationType.in'] = requestParameters.formationTypeIn;
        }

        if (requestParameters.formationTypeNotIn) {
            queryParameters['formationType.notIn'] = requestParameters.formationTypeNotIn;
        }

        if (requestParameters.finalScoreGreaterThan !== undefined) {
            queryParameters['finalScore.greaterThan'] = requestParameters.finalScoreGreaterThan;
        }

        if (requestParameters.finalScoreLessThan !== undefined) {
            queryParameters['finalScore.lessThan'] = requestParameters.finalScoreLessThan;
        }

        if (requestParameters.finalScoreGreaterThanOrEqual !== undefined) {
            queryParameters['finalScore.greaterThanOrEqual'] = requestParameters.finalScoreGreaterThanOrEqual;
        }

        if (requestParameters.finalScoreLessThanOrEqual !== undefined) {
            queryParameters['finalScore.lessThanOrEqual'] = requestParameters.finalScoreLessThanOrEqual;
        }

        if (requestParameters.finalScoreEquals !== undefined) {
            queryParameters['finalScore.equals'] = requestParameters.finalScoreEquals;
        }

        if (requestParameters.finalScoreNotEquals !== undefined) {
            queryParameters['finalScore.notEquals'] = requestParameters.finalScoreNotEquals;
        }

        if (requestParameters.finalScoreSpecified !== undefined) {
            queryParameters['finalScore.specified'] = requestParameters.finalScoreSpecified;
        }

        if (requestParameters.finalScoreIn) {
            queryParameters['finalScore.in'] = requestParameters.finalScoreIn;
        }

        if (requestParameters.finalScoreNotIn) {
            queryParameters['finalScore.notIn'] = requestParameters.finalScoreNotIn;
        }

        if (requestParameters.driverIdGreaterThan !== undefined) {
            queryParameters['driverId.greaterThan'] = requestParameters.driverIdGreaterThan;
        }

        if (requestParameters.driverIdLessThan !== undefined) {
            queryParameters['driverId.lessThan'] = requestParameters.driverIdLessThan;
        }

        if (requestParameters.driverIdGreaterThanOrEqual !== undefined) {
            queryParameters['driverId.greaterThanOrEqual'] = requestParameters.driverIdGreaterThanOrEqual;
        }

        if (requestParameters.driverIdLessThanOrEqual !== undefined) {
            queryParameters['driverId.lessThanOrEqual'] = requestParameters.driverIdLessThanOrEqual;
        }

        if (requestParameters.driverIdEquals !== undefined) {
            queryParameters['driverId.equals'] = requestParameters.driverIdEquals;
        }

        if (requestParameters.driverIdNotEquals !== undefined) {
            queryParameters['driverId.notEquals'] = requestParameters.driverIdNotEquals;
        }

        if (requestParameters.driverIdSpecified !== undefined) {
            queryParameters['driverId.specified'] = requestParameters.driverIdSpecified;
        }

        if (requestParameters.driverIdIn) {
            queryParameters['driverId.in'] = requestParameters.driverIdIn;
        }

        if (requestParameters.driverIdNotIn) {
            queryParameters['driverId.notIn'] = requestParameters.driverIdNotIn;
        }

        if (requestParameters.teamIdGreaterThan !== undefined) {
            queryParameters['teamId.greaterThan'] = requestParameters.teamIdGreaterThan;
        }

        if (requestParameters.teamIdLessThan !== undefined) {
            queryParameters['teamId.lessThan'] = requestParameters.teamIdLessThan;
        }

        if (requestParameters.teamIdGreaterThanOrEqual !== undefined) {
            queryParameters['teamId.greaterThanOrEqual'] = requestParameters.teamIdGreaterThanOrEqual;
        }

        if (requestParameters.teamIdLessThanOrEqual !== undefined) {
            queryParameters['teamId.lessThanOrEqual'] = requestParameters.teamIdLessThanOrEqual;
        }

        if (requestParameters.teamIdEquals !== undefined) {
            queryParameters['teamId.equals'] = requestParameters.teamIdEquals;
        }

        if (requestParameters.teamIdNotEquals !== undefined) {
            queryParameters['teamId.notEquals'] = requestParameters.teamIdNotEquals;
        }

        if (requestParameters.teamIdSpecified !== undefined) {
            queryParameters['teamId.specified'] = requestParameters.teamIdSpecified;
        }

        if (requestParameters.teamIdIn) {
            queryParameters['teamId.in'] = requestParameters.teamIdIn;
        }

        if (requestParameters.teamIdNotIn) {
            queryParameters['teamId.notIn'] = requestParameters.teamIdNotIn;
        }

        if (requestParameters.userIdGreaterThan !== undefined) {
            queryParameters['userId.greaterThan'] = requestParameters.userIdGreaterThan;
        }

        if (requestParameters.userIdLessThan !== undefined) {
            queryParameters['userId.lessThan'] = requestParameters.userIdLessThan;
        }

        if (requestParameters.userIdGreaterThanOrEqual !== undefined) {
            queryParameters['userId.greaterThanOrEqual'] = requestParameters.userIdGreaterThanOrEqual;
        }

        if (requestParameters.userIdLessThanOrEqual !== undefined) {
            queryParameters['userId.lessThanOrEqual'] = requestParameters.userIdLessThanOrEqual;
        }

        if (requestParameters.userIdEquals !== undefined) {
            queryParameters['userId.equals'] = requestParameters.userIdEquals;
        }

        if (requestParameters.userIdNotEquals !== undefined) {
            queryParameters['userId.notEquals'] = requestParameters.userIdNotEquals;
        }

        if (requestParameters.userIdSpecified !== undefined) {
            queryParameters['userId.specified'] = requestParameters.userIdSpecified;
        }

        if (requestParameters.userIdIn) {
            queryParameters['userId.in'] = requestParameters.userIdIn;
        }

        if (requestParameters.userIdNotIn) {
            queryParameters['userId.notIn'] = requestParameters.userIdNotIn;
        }

        if (requestParameters.granPrixIdGreaterThan !== undefined) {
            queryParameters['granPrixId.greaterThan'] = requestParameters.granPrixIdGreaterThan;
        }

        if (requestParameters.granPrixIdLessThan !== undefined) {
            queryParameters['granPrixId.lessThan'] = requestParameters.granPrixIdLessThan;
        }

        if (requestParameters.granPrixIdGreaterThanOrEqual !== undefined) {
            queryParameters['granPrixId.greaterThanOrEqual'] = requestParameters.granPrixIdGreaterThanOrEqual;
        }

        if (requestParameters.granPrixIdLessThanOrEqual !== undefined) {
            queryParameters['granPrixId.lessThanOrEqual'] = requestParameters.granPrixIdLessThanOrEqual;
        }

        if (requestParameters.granPrixIdEquals !== undefined) {
            queryParameters['granPrixId.equals'] = requestParameters.granPrixIdEquals;
        }

        if (requestParameters.granPrixIdNotEquals !== undefined) {
            queryParameters['granPrixId.notEquals'] = requestParameters.granPrixIdNotEquals;
        }

        if (requestParameters.granPrixIdSpecified !== undefined) {
            queryParameters['granPrixId.specified'] = requestParameters.granPrixIdSpecified;
        }

        if (requestParameters.granPrixIdIn) {
            queryParameters['granPrixId.in'] = requestParameters.granPrixIdIn;
        }

        if (requestParameters.granPrixIdNotIn) {
            queryParameters['granPrixId.notIn'] = requestParameters.granPrixIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/formations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FormationFromJSON));
    }

    /**
     */
    async getAllFormations(requestParameters: GetAllFormationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Formation>> {
        const response = await this.getAllFormationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFormationRaw(requestParameters: GetFormationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Formation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFormation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/formations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormationFromJSON(jsonValue));
    }

    /**
     */
    async getFormation(requestParameters: GetFormationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Formation> {
        const response = await this.getFormationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async partialUpdateFormationRaw(requestParameters: PartialUpdateFormationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Formation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateFormation.');
        }

        if (requestParameters.formation === null || requestParameters.formation === undefined) {
            throw new runtime.RequiredError('formation','Required parameter requestParameters.formation was null or undefined when calling partialUpdateFormation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/formations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: FormationToJSON(requestParameters.formation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormationFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateFormation(requestParameters: PartialUpdateFormationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Formation> {
        const response = await this.partialUpdateFormationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateFormationRaw(requestParameters: UpdateFormationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Formation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFormation.');
        }

        if (requestParameters.formation === null || requestParameters.formation === undefined) {
            throw new runtime.RequiredError('formation','Required parameter requestParameters.formation was null or undefined when calling updateFormation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/formations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FormationToJSON(requestParameters.formation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormationFromJSON(jsonValue));
    }

    /**
     */
    async updateFormation(requestParameters: UpdateFormationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Formation> {
        const response = await this.updateFormationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CountFormationsDrsEqualsEnum = {
    Active: 'ACTIVE',
    Disactive: 'DISACTIVE'
} as const;
export type CountFormationsDrsEqualsEnum = typeof CountFormationsDrsEqualsEnum[keyof typeof CountFormationsDrsEqualsEnum];
/**
 * @export
 */
export const CountFormationsDrsNotEqualsEnum = {
    Active: 'ACTIVE',
    Disactive: 'DISACTIVE'
} as const;
export type CountFormationsDrsNotEqualsEnum = typeof CountFormationsDrsNotEqualsEnum[keyof typeof CountFormationsDrsNotEqualsEnum];
/**
 * @export
 */
export const CountFormationsDrsInEnum = {
    Active: 'ACTIVE',
    Disactive: 'DISACTIVE'
} as const;
export type CountFormationsDrsInEnum = typeof CountFormationsDrsInEnum[keyof typeof CountFormationsDrsInEnum];
/**
 * @export
 */
export const CountFormationsDrsNotInEnum = {
    Active: 'ACTIVE',
    Disactive: 'DISACTIVE'
} as const;
export type CountFormationsDrsNotInEnum = typeof CountFormationsDrsNotInEnum[keyof typeof CountFormationsDrsNotInEnum];
/**
 * @export
 */
export const CountFormationsFormationTypeEqualsEnum = {
    Qualify: 'QUALIFY',
    Race: 'RACE'
} as const;
export type CountFormationsFormationTypeEqualsEnum = typeof CountFormationsFormationTypeEqualsEnum[keyof typeof CountFormationsFormationTypeEqualsEnum];
/**
 * @export
 */
export const CountFormationsFormationTypeNotEqualsEnum = {
    Qualify: 'QUALIFY',
    Race: 'RACE'
} as const;
export type CountFormationsFormationTypeNotEqualsEnum = typeof CountFormationsFormationTypeNotEqualsEnum[keyof typeof CountFormationsFormationTypeNotEqualsEnum];
/**
 * @export
 */
export const CountFormationsFormationTypeInEnum = {
    Qualify: 'QUALIFY',
    Race: 'RACE'
} as const;
export type CountFormationsFormationTypeInEnum = typeof CountFormationsFormationTypeInEnum[keyof typeof CountFormationsFormationTypeInEnum];
/**
 * @export
 */
export const CountFormationsFormationTypeNotInEnum = {
    Qualify: 'QUALIFY',
    Race: 'RACE'
} as const;
export type CountFormationsFormationTypeNotInEnum = typeof CountFormationsFormationTypeNotInEnum[keyof typeof CountFormationsFormationTypeNotInEnum];
/**
 * @export
 */
export const GetAllFormationsDrsEqualsEnum = {
    Active: 'ACTIVE',
    Disactive: 'DISACTIVE'
} as const;
export type GetAllFormationsDrsEqualsEnum = typeof GetAllFormationsDrsEqualsEnum[keyof typeof GetAllFormationsDrsEqualsEnum];
/**
 * @export
 */
export const GetAllFormationsDrsNotEqualsEnum = {
    Active: 'ACTIVE',
    Disactive: 'DISACTIVE'
} as const;
export type GetAllFormationsDrsNotEqualsEnum = typeof GetAllFormationsDrsNotEqualsEnum[keyof typeof GetAllFormationsDrsNotEqualsEnum];
/**
 * @export
 */
export const GetAllFormationsDrsInEnum = {
    Active: 'ACTIVE',
    Disactive: 'DISACTIVE'
} as const;
export type GetAllFormationsDrsInEnum = typeof GetAllFormationsDrsInEnum[keyof typeof GetAllFormationsDrsInEnum];
/**
 * @export
 */
export const GetAllFormationsDrsNotInEnum = {
    Active: 'ACTIVE',
    Disactive: 'DISACTIVE'
} as const;
export type GetAllFormationsDrsNotInEnum = typeof GetAllFormationsDrsNotInEnum[keyof typeof GetAllFormationsDrsNotInEnum];
/**
 * @export
 */
export const GetAllFormationsFormationTypeEqualsEnum = {
    Qualify: 'QUALIFY',
    Race: 'RACE'
} as const;
export type GetAllFormationsFormationTypeEqualsEnum = typeof GetAllFormationsFormationTypeEqualsEnum[keyof typeof GetAllFormationsFormationTypeEqualsEnum];
/**
 * @export
 */
export const GetAllFormationsFormationTypeNotEqualsEnum = {
    Qualify: 'QUALIFY',
    Race: 'RACE'
} as const;
export type GetAllFormationsFormationTypeNotEqualsEnum = typeof GetAllFormationsFormationTypeNotEqualsEnum[keyof typeof GetAllFormationsFormationTypeNotEqualsEnum];
/**
 * @export
 */
export const GetAllFormationsFormationTypeInEnum = {
    Qualify: 'QUALIFY',
    Race: 'RACE'
} as const;
export type GetAllFormationsFormationTypeInEnum = typeof GetAllFormationsFormationTypeInEnum[keyof typeof GetAllFormationsFormationTypeInEnum];
/**
 * @export
 */
export const GetAllFormationsFormationTypeNotInEnum = {
    Qualify: 'QUALIFY',
    Race: 'RACE'
} as const;
export type GetAllFormationsFormationTypeNotInEnum = typeof GetAllFormationsFormationTypeNotInEnum[keyof typeof GetAllFormationsFormationTypeNotInEnum];
