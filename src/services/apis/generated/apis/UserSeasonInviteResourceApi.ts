/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UserSeasonInvite,
} from '../models';
import {
    UserSeasonInviteFromJSON,
    UserSeasonInviteToJSON,
} from '../models';

export interface CountUserSeasonInvitesRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    dateGreaterThan?: Date;
    dateLessThan?: Date;
    dateGreaterThanOrEqual?: Date;
    dateLessThanOrEqual?: Date;
    dateEquals?: Date;
    dateNotEquals?: Date;
    dateSpecified?: boolean;
    dateIn?: Array<Date>;
    dateNotIn?: Array<Date>;
    currentStateEquals?: CountUserSeasonInvitesCurrentStateEqualsEnum;
    currentStateNotEquals?: CountUserSeasonInvitesCurrentStateNotEqualsEnum;
    currentStateSpecified?: boolean;
    currentStateIn?: Array<CountUserSeasonInvitesCurrentStateInEnum>;
    currentStateNotIn?: Array<CountUserSeasonInvitesCurrentStateNotInEnum>;
    roleEquals?: CountUserSeasonInvitesRoleEqualsEnum;
    roleNotEquals?: CountUserSeasonInvitesRoleNotEqualsEnum;
    roleSpecified?: boolean;
    roleIn?: Array<CountUserSeasonInvitesRoleInEnum>;
    roleNotIn?: Array<CountUserSeasonInvitesRoleNotInEnum>;
    userSeasonInviteStateIdGreaterThan?: number;
    userSeasonInviteStateIdLessThan?: number;
    userSeasonInviteStateIdGreaterThanOrEqual?: number;
    userSeasonInviteStateIdLessThanOrEqual?: number;
    userSeasonInviteStateIdEquals?: number;
    userSeasonInviteStateIdNotEquals?: number;
    userSeasonInviteStateIdSpecified?: boolean;
    userSeasonInviteStateIdIn?: Array<number>;
    userSeasonInviteStateIdNotIn?: Array<number>;
    userIdGreaterThan?: number;
    userIdLessThan?: number;
    userIdGreaterThanOrEqual?: number;
    userIdLessThanOrEqual?: number;
    userIdEquals?: number;
    userIdNotEquals?: number;
    userIdSpecified?: boolean;
    userIdIn?: Array<number>;
    userIdNotIn?: Array<number>;
    leagueIdGreaterThan?: number;
    leagueIdLessThan?: number;
    leagueIdGreaterThanOrEqual?: number;
    leagueIdLessThanOrEqual?: number;
    leagueIdEquals?: number;
    leagueIdNotEquals?: number;
    leagueIdSpecified?: boolean;
    leagueIdIn?: Array<number>;
    leagueIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface CreateUserSeasonInviteRequest {
    userSeasonInvite: UserSeasonInvite;
}

export interface DeleteUserSeasonInviteRequest {
    id: number;
}

export interface GetAllUserSeasonInvitesRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    dateGreaterThan?: Date;
    dateLessThan?: Date;
    dateGreaterThanOrEqual?: Date;
    dateLessThanOrEqual?: Date;
    dateEquals?: Date;
    dateNotEquals?: Date;
    dateSpecified?: boolean;
    dateIn?: Array<Date>;
    dateNotIn?: Array<Date>;
    currentStateEquals?: GetAllUserSeasonInvitesCurrentStateEqualsEnum;
    currentStateNotEquals?: GetAllUserSeasonInvitesCurrentStateNotEqualsEnum;
    currentStateSpecified?: boolean;
    currentStateIn?: Array<GetAllUserSeasonInvitesCurrentStateInEnum>;
    currentStateNotIn?: Array<GetAllUserSeasonInvitesCurrentStateNotInEnum>;
    roleEquals?: GetAllUserSeasonInvitesRoleEqualsEnum;
    roleNotEquals?: GetAllUserSeasonInvitesRoleNotEqualsEnum;
    roleSpecified?: boolean;
    roleIn?: Array<GetAllUserSeasonInvitesRoleInEnum>;
    roleNotIn?: Array<GetAllUserSeasonInvitesRoleNotInEnum>;
    userSeasonInviteStateIdGreaterThan?: number;
    userSeasonInviteStateIdLessThan?: number;
    userSeasonInviteStateIdGreaterThanOrEqual?: number;
    userSeasonInviteStateIdLessThanOrEqual?: number;
    userSeasonInviteStateIdEquals?: number;
    userSeasonInviteStateIdNotEquals?: number;
    userSeasonInviteStateIdSpecified?: boolean;
    userSeasonInviteStateIdIn?: Array<number>;
    userSeasonInviteStateIdNotIn?: Array<number>;
    userIdGreaterThan?: number;
    userIdLessThan?: number;
    userIdGreaterThanOrEqual?: number;
    userIdLessThanOrEqual?: number;
    userIdEquals?: number;
    userIdNotEquals?: number;
    userIdSpecified?: boolean;
    userIdIn?: Array<number>;
    userIdNotIn?: Array<number>;
    leagueIdGreaterThan?: number;
    leagueIdLessThan?: number;
    leagueIdGreaterThanOrEqual?: number;
    leagueIdLessThanOrEqual?: number;
    leagueIdEquals?: number;
    leagueIdNotEquals?: number;
    leagueIdSpecified?: boolean;
    leagueIdIn?: Array<number>;
    leagueIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface GetUserSeasonInviteRequest {
    id: number;
}

export interface PartialUpdateUserSeasonInviteRequest {
    id: number;
    userSeasonInvite: UserSeasonInvite;
}

export interface UpdateUserSeasonInviteRequest {
    id: number;
    userSeasonInvite: UserSeasonInvite;
}

/**
 * 
 */
export class UserSeasonInviteResourceApi extends runtime.BaseAPI {

    /**
     */
    async countUserSeasonInvitesRaw(requestParameters: CountUserSeasonInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.dateGreaterThan !== undefined) {
            queryParameters['date.greaterThan'] = (requestParameters.dateGreaterThan as any).toISOString();
        }

        if (requestParameters.dateLessThan !== undefined) {
            queryParameters['date.lessThan'] = (requestParameters.dateLessThan as any).toISOString();
        }

        if (requestParameters.dateGreaterThanOrEqual !== undefined) {
            queryParameters['date.greaterThanOrEqual'] = (requestParameters.dateGreaterThanOrEqual as any).toISOString();
        }

        if (requestParameters.dateLessThanOrEqual !== undefined) {
            queryParameters['date.lessThanOrEqual'] = (requestParameters.dateLessThanOrEqual as any).toISOString();
        }

        if (requestParameters.dateEquals !== undefined) {
            queryParameters['date.equals'] = (requestParameters.dateEquals as any).toISOString();
        }

        if (requestParameters.dateNotEquals !== undefined) {
            queryParameters['date.notEquals'] = (requestParameters.dateNotEquals as any).toISOString();
        }

        if (requestParameters.dateSpecified !== undefined) {
            queryParameters['date.specified'] = requestParameters.dateSpecified;
        }

        if (requestParameters.dateIn) {
            queryParameters['date.in'] = requestParameters.dateIn;
        }

        if (requestParameters.dateNotIn) {
            queryParameters['date.notIn'] = requestParameters.dateNotIn;
        }

        if (requestParameters.currentStateEquals !== undefined) {
            queryParameters['currentState.equals'] = requestParameters.currentStateEquals;
        }

        if (requestParameters.currentStateNotEquals !== undefined) {
            queryParameters['currentState.notEquals'] = requestParameters.currentStateNotEquals;
        }

        if (requestParameters.currentStateSpecified !== undefined) {
            queryParameters['currentState.specified'] = requestParameters.currentStateSpecified;
        }

        if (requestParameters.currentStateIn) {
            queryParameters['currentState.in'] = requestParameters.currentStateIn;
        }

        if (requestParameters.currentStateNotIn) {
            queryParameters['currentState.notIn'] = requestParameters.currentStateNotIn;
        }

        if (requestParameters.roleEquals !== undefined) {
            queryParameters['role.equals'] = requestParameters.roleEquals;
        }

        if (requestParameters.roleNotEquals !== undefined) {
            queryParameters['role.notEquals'] = requestParameters.roleNotEquals;
        }

        if (requestParameters.roleSpecified !== undefined) {
            queryParameters['role.specified'] = requestParameters.roleSpecified;
        }

        if (requestParameters.roleIn) {
            queryParameters['role.in'] = requestParameters.roleIn;
        }

        if (requestParameters.roleNotIn) {
            queryParameters['role.notIn'] = requestParameters.roleNotIn;
        }

        if (requestParameters.userSeasonInviteStateIdGreaterThan !== undefined) {
            queryParameters['userSeasonInviteStateId.greaterThan'] = requestParameters.userSeasonInviteStateIdGreaterThan;
        }

        if (requestParameters.userSeasonInviteStateIdLessThan !== undefined) {
            queryParameters['userSeasonInviteStateId.lessThan'] = requestParameters.userSeasonInviteStateIdLessThan;
        }

        if (requestParameters.userSeasonInviteStateIdGreaterThanOrEqual !== undefined) {
            queryParameters['userSeasonInviteStateId.greaterThanOrEqual'] = requestParameters.userSeasonInviteStateIdGreaterThanOrEqual;
        }

        if (requestParameters.userSeasonInviteStateIdLessThanOrEqual !== undefined) {
            queryParameters['userSeasonInviteStateId.lessThanOrEqual'] = requestParameters.userSeasonInviteStateIdLessThanOrEqual;
        }

        if (requestParameters.userSeasonInviteStateIdEquals !== undefined) {
            queryParameters['userSeasonInviteStateId.equals'] = requestParameters.userSeasonInviteStateIdEquals;
        }

        if (requestParameters.userSeasonInviteStateIdNotEquals !== undefined) {
            queryParameters['userSeasonInviteStateId.notEquals'] = requestParameters.userSeasonInviteStateIdNotEquals;
        }

        if (requestParameters.userSeasonInviteStateIdSpecified !== undefined) {
            queryParameters['userSeasonInviteStateId.specified'] = requestParameters.userSeasonInviteStateIdSpecified;
        }

        if (requestParameters.userSeasonInviteStateIdIn) {
            queryParameters['userSeasonInviteStateId.in'] = requestParameters.userSeasonInviteStateIdIn;
        }

        if (requestParameters.userSeasonInviteStateIdNotIn) {
            queryParameters['userSeasonInviteStateId.notIn'] = requestParameters.userSeasonInviteStateIdNotIn;
        }

        if (requestParameters.userIdGreaterThan !== undefined) {
            queryParameters['userId.greaterThan'] = requestParameters.userIdGreaterThan;
        }

        if (requestParameters.userIdLessThan !== undefined) {
            queryParameters['userId.lessThan'] = requestParameters.userIdLessThan;
        }

        if (requestParameters.userIdGreaterThanOrEqual !== undefined) {
            queryParameters['userId.greaterThanOrEqual'] = requestParameters.userIdGreaterThanOrEqual;
        }

        if (requestParameters.userIdLessThanOrEqual !== undefined) {
            queryParameters['userId.lessThanOrEqual'] = requestParameters.userIdLessThanOrEqual;
        }

        if (requestParameters.userIdEquals !== undefined) {
            queryParameters['userId.equals'] = requestParameters.userIdEquals;
        }

        if (requestParameters.userIdNotEquals !== undefined) {
            queryParameters['userId.notEquals'] = requestParameters.userIdNotEquals;
        }

        if (requestParameters.userIdSpecified !== undefined) {
            queryParameters['userId.specified'] = requestParameters.userIdSpecified;
        }

        if (requestParameters.userIdIn) {
            queryParameters['userId.in'] = requestParameters.userIdIn;
        }

        if (requestParameters.userIdNotIn) {
            queryParameters['userId.notIn'] = requestParameters.userIdNotIn;
        }

        if (requestParameters.leagueIdGreaterThan !== undefined) {
            queryParameters['leagueId.greaterThan'] = requestParameters.leagueIdGreaterThan;
        }

        if (requestParameters.leagueIdLessThan !== undefined) {
            queryParameters['leagueId.lessThan'] = requestParameters.leagueIdLessThan;
        }

        if (requestParameters.leagueIdGreaterThanOrEqual !== undefined) {
            queryParameters['leagueId.greaterThanOrEqual'] = requestParameters.leagueIdGreaterThanOrEqual;
        }

        if (requestParameters.leagueIdLessThanOrEqual !== undefined) {
            queryParameters['leagueId.lessThanOrEqual'] = requestParameters.leagueIdLessThanOrEqual;
        }

        if (requestParameters.leagueIdEquals !== undefined) {
            queryParameters['leagueId.equals'] = requestParameters.leagueIdEquals;
        }

        if (requestParameters.leagueIdNotEquals !== undefined) {
            queryParameters['leagueId.notEquals'] = requestParameters.leagueIdNotEquals;
        }

        if (requestParameters.leagueIdSpecified !== undefined) {
            queryParameters['leagueId.specified'] = requestParameters.leagueIdSpecified;
        }

        if (requestParameters.leagueIdIn) {
            queryParameters['leagueId.in'] = requestParameters.leagueIdIn;
        }

        if (requestParameters.leagueIdNotIn) {
            queryParameters['leagueId.notIn'] = requestParameters.leagueIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user-season-invites/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async countUserSeasonInvites(requestParameters: CountUserSeasonInvitesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.countUserSeasonInvitesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createUserSeasonInviteRaw(requestParameters: CreateUserSeasonInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSeasonInvite>> {
        if (requestParameters.userSeasonInvite === null || requestParameters.userSeasonInvite === undefined) {
            throw new runtime.RequiredError('userSeasonInvite','Required parameter requestParameters.userSeasonInvite was null or undefined when calling createUserSeasonInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user-season-invites`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSeasonInviteToJSON(requestParameters.userSeasonInvite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSeasonInviteFromJSON(jsonValue));
    }

    /**
     */
    async createUserSeasonInvite(requestParameters: CreateUserSeasonInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSeasonInvite> {
        const response = await this.createUserSeasonInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteUserSeasonInviteRaw(requestParameters: DeleteUserSeasonInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUserSeasonInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user-season-invites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUserSeasonInvite(requestParameters: DeleteUserSeasonInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserSeasonInviteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllUserSeasonInvitesRaw(requestParameters: GetAllUserSeasonInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserSeasonInvite>>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.dateGreaterThan !== undefined) {
            queryParameters['date.greaterThan'] = (requestParameters.dateGreaterThan as any).toISOString();
        }

        if (requestParameters.dateLessThan !== undefined) {
            queryParameters['date.lessThan'] = (requestParameters.dateLessThan as any).toISOString();
        }

        if (requestParameters.dateGreaterThanOrEqual !== undefined) {
            queryParameters['date.greaterThanOrEqual'] = (requestParameters.dateGreaterThanOrEqual as any).toISOString();
        }

        if (requestParameters.dateLessThanOrEqual !== undefined) {
            queryParameters['date.lessThanOrEqual'] = (requestParameters.dateLessThanOrEqual as any).toISOString();
        }

        if (requestParameters.dateEquals !== undefined) {
            queryParameters['date.equals'] = (requestParameters.dateEquals as any).toISOString();
        }

        if (requestParameters.dateNotEquals !== undefined) {
            queryParameters['date.notEquals'] = (requestParameters.dateNotEquals as any).toISOString();
        }

        if (requestParameters.dateSpecified !== undefined) {
            queryParameters['date.specified'] = requestParameters.dateSpecified;
        }

        if (requestParameters.dateIn) {
            queryParameters['date.in'] = requestParameters.dateIn;
        }

        if (requestParameters.dateNotIn) {
            queryParameters['date.notIn'] = requestParameters.dateNotIn;
        }

        if (requestParameters.currentStateEquals !== undefined) {
            queryParameters['currentState.equals'] = requestParameters.currentStateEquals;
        }

        if (requestParameters.currentStateNotEquals !== undefined) {
            queryParameters['currentState.notEquals'] = requestParameters.currentStateNotEquals;
        }

        if (requestParameters.currentStateSpecified !== undefined) {
            queryParameters['currentState.specified'] = requestParameters.currentStateSpecified;
        }

        if (requestParameters.currentStateIn) {
            queryParameters['currentState.in'] = requestParameters.currentStateIn;
        }

        if (requestParameters.currentStateNotIn) {
            queryParameters['currentState.notIn'] = requestParameters.currentStateNotIn;
        }

        if (requestParameters.roleEquals !== undefined) {
            queryParameters['role.equals'] = requestParameters.roleEquals;
        }

        if (requestParameters.roleNotEquals !== undefined) {
            queryParameters['role.notEquals'] = requestParameters.roleNotEquals;
        }

        if (requestParameters.roleSpecified !== undefined) {
            queryParameters['role.specified'] = requestParameters.roleSpecified;
        }

        if (requestParameters.roleIn) {
            queryParameters['role.in'] = requestParameters.roleIn;
        }

        if (requestParameters.roleNotIn) {
            queryParameters['role.notIn'] = requestParameters.roleNotIn;
        }

        if (requestParameters.userSeasonInviteStateIdGreaterThan !== undefined) {
            queryParameters['userSeasonInviteStateId.greaterThan'] = requestParameters.userSeasonInviteStateIdGreaterThan;
        }

        if (requestParameters.userSeasonInviteStateIdLessThan !== undefined) {
            queryParameters['userSeasonInviteStateId.lessThan'] = requestParameters.userSeasonInviteStateIdLessThan;
        }

        if (requestParameters.userSeasonInviteStateIdGreaterThanOrEqual !== undefined) {
            queryParameters['userSeasonInviteStateId.greaterThanOrEqual'] = requestParameters.userSeasonInviteStateIdGreaterThanOrEqual;
        }

        if (requestParameters.userSeasonInviteStateIdLessThanOrEqual !== undefined) {
            queryParameters['userSeasonInviteStateId.lessThanOrEqual'] = requestParameters.userSeasonInviteStateIdLessThanOrEqual;
        }

        if (requestParameters.userSeasonInviteStateIdEquals !== undefined) {
            queryParameters['userSeasonInviteStateId.equals'] = requestParameters.userSeasonInviteStateIdEquals;
        }

        if (requestParameters.userSeasonInviteStateIdNotEquals !== undefined) {
            queryParameters['userSeasonInviteStateId.notEquals'] = requestParameters.userSeasonInviteStateIdNotEquals;
        }

        if (requestParameters.userSeasonInviteStateIdSpecified !== undefined) {
            queryParameters['userSeasonInviteStateId.specified'] = requestParameters.userSeasonInviteStateIdSpecified;
        }

        if (requestParameters.userSeasonInviteStateIdIn) {
            queryParameters['userSeasonInviteStateId.in'] = requestParameters.userSeasonInviteStateIdIn;
        }

        if (requestParameters.userSeasonInviteStateIdNotIn) {
            queryParameters['userSeasonInviteStateId.notIn'] = requestParameters.userSeasonInviteStateIdNotIn;
        }

        if (requestParameters.userIdGreaterThan !== undefined) {
            queryParameters['userId.greaterThan'] = requestParameters.userIdGreaterThan;
        }

        if (requestParameters.userIdLessThan !== undefined) {
            queryParameters['userId.lessThan'] = requestParameters.userIdLessThan;
        }

        if (requestParameters.userIdGreaterThanOrEqual !== undefined) {
            queryParameters['userId.greaterThanOrEqual'] = requestParameters.userIdGreaterThanOrEqual;
        }

        if (requestParameters.userIdLessThanOrEqual !== undefined) {
            queryParameters['userId.lessThanOrEqual'] = requestParameters.userIdLessThanOrEqual;
        }

        if (requestParameters.userIdEquals !== undefined) {
            queryParameters['userId.equals'] = requestParameters.userIdEquals;
        }

        if (requestParameters.userIdNotEquals !== undefined) {
            queryParameters['userId.notEquals'] = requestParameters.userIdNotEquals;
        }

        if (requestParameters.userIdSpecified !== undefined) {
            queryParameters['userId.specified'] = requestParameters.userIdSpecified;
        }

        if (requestParameters.userIdIn) {
            queryParameters['userId.in'] = requestParameters.userIdIn;
        }

        if (requestParameters.userIdNotIn) {
            queryParameters['userId.notIn'] = requestParameters.userIdNotIn;
        }

        if (requestParameters.leagueIdGreaterThan !== undefined) {
            queryParameters['leagueId.greaterThan'] = requestParameters.leagueIdGreaterThan;
        }

        if (requestParameters.leagueIdLessThan !== undefined) {
            queryParameters['leagueId.lessThan'] = requestParameters.leagueIdLessThan;
        }

        if (requestParameters.leagueIdGreaterThanOrEqual !== undefined) {
            queryParameters['leagueId.greaterThanOrEqual'] = requestParameters.leagueIdGreaterThanOrEqual;
        }

        if (requestParameters.leagueIdLessThanOrEqual !== undefined) {
            queryParameters['leagueId.lessThanOrEqual'] = requestParameters.leagueIdLessThanOrEqual;
        }

        if (requestParameters.leagueIdEquals !== undefined) {
            queryParameters['leagueId.equals'] = requestParameters.leagueIdEquals;
        }

        if (requestParameters.leagueIdNotEquals !== undefined) {
            queryParameters['leagueId.notEquals'] = requestParameters.leagueIdNotEquals;
        }

        if (requestParameters.leagueIdSpecified !== undefined) {
            queryParameters['leagueId.specified'] = requestParameters.leagueIdSpecified;
        }

        if (requestParameters.leagueIdIn) {
            queryParameters['leagueId.in'] = requestParameters.leagueIdIn;
        }

        if (requestParameters.leagueIdNotIn) {
            queryParameters['leagueId.notIn'] = requestParameters.leagueIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user-season-invites`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserSeasonInviteFromJSON));
    }

    /**
     */
    async getAllUserSeasonInvites(requestParameters: GetAllUserSeasonInvitesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserSeasonInvite>> {
        const response = await this.getAllUserSeasonInvitesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserSeasonInviteRaw(requestParameters: GetUserSeasonInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSeasonInvite>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserSeasonInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user-season-invites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSeasonInviteFromJSON(jsonValue));
    }

    /**
     */
    async getUserSeasonInvite(requestParameters: GetUserSeasonInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSeasonInvite> {
        const response = await this.getUserSeasonInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async partialUpdateUserSeasonInviteRaw(requestParameters: PartialUpdateUserSeasonInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSeasonInvite>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateUserSeasonInvite.');
        }

        if (requestParameters.userSeasonInvite === null || requestParameters.userSeasonInvite === undefined) {
            throw new runtime.RequiredError('userSeasonInvite','Required parameter requestParameters.userSeasonInvite was null or undefined when calling partialUpdateUserSeasonInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user-season-invites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserSeasonInviteToJSON(requestParameters.userSeasonInvite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSeasonInviteFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateUserSeasonInvite(requestParameters: PartialUpdateUserSeasonInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSeasonInvite> {
        const response = await this.partialUpdateUserSeasonInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateUserSeasonInviteRaw(requestParameters: UpdateUserSeasonInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSeasonInvite>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUserSeasonInvite.');
        }

        if (requestParameters.userSeasonInvite === null || requestParameters.userSeasonInvite === undefined) {
            throw new runtime.RequiredError('userSeasonInvite','Required parameter requestParameters.userSeasonInvite was null or undefined when calling updateUserSeasonInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user-season-invites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserSeasonInviteToJSON(requestParameters.userSeasonInvite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSeasonInviteFromJSON(jsonValue));
    }

    /**
     */
    async updateUserSeasonInvite(requestParameters: UpdateUserSeasonInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSeasonInvite> {
        const response = await this.updateUserSeasonInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CountUserSeasonInvitesCurrentStateEqualsEnum = {
    Pending: 'PENDING',
    Accepted: 'ACCEPTED',
    Rejected: 'REJECTED'
} as const;
export type CountUserSeasonInvitesCurrentStateEqualsEnum = typeof CountUserSeasonInvitesCurrentStateEqualsEnum[keyof typeof CountUserSeasonInvitesCurrentStateEqualsEnum];
/**
 * @export
 */
export const CountUserSeasonInvitesCurrentStateNotEqualsEnum = {
    Pending: 'PENDING',
    Accepted: 'ACCEPTED',
    Rejected: 'REJECTED'
} as const;
export type CountUserSeasonInvitesCurrentStateNotEqualsEnum = typeof CountUserSeasonInvitesCurrentStateNotEqualsEnum[keyof typeof CountUserSeasonInvitesCurrentStateNotEqualsEnum];
/**
 * @export
 */
export const CountUserSeasonInvitesCurrentStateInEnum = {
    Pending: 'PENDING',
    Accepted: 'ACCEPTED',
    Rejected: 'REJECTED'
} as const;
export type CountUserSeasonInvitesCurrentStateInEnum = typeof CountUserSeasonInvitesCurrentStateInEnum[keyof typeof CountUserSeasonInvitesCurrentStateInEnum];
/**
 * @export
 */
export const CountUserSeasonInvitesCurrentStateNotInEnum = {
    Pending: 'PENDING',
    Accepted: 'ACCEPTED',
    Rejected: 'REJECTED'
} as const;
export type CountUserSeasonInvitesCurrentStateNotInEnum = typeof CountUserSeasonInvitesCurrentStateNotInEnum[keyof typeof CountUserSeasonInvitesCurrentStateNotInEnum];
/**
 * @export
 */
export const CountUserSeasonInvitesRoleEqualsEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type CountUserSeasonInvitesRoleEqualsEnum = typeof CountUserSeasonInvitesRoleEqualsEnum[keyof typeof CountUserSeasonInvitesRoleEqualsEnum];
/**
 * @export
 */
export const CountUserSeasonInvitesRoleNotEqualsEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type CountUserSeasonInvitesRoleNotEqualsEnum = typeof CountUserSeasonInvitesRoleNotEqualsEnum[keyof typeof CountUserSeasonInvitesRoleNotEqualsEnum];
/**
 * @export
 */
export const CountUserSeasonInvitesRoleInEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type CountUserSeasonInvitesRoleInEnum = typeof CountUserSeasonInvitesRoleInEnum[keyof typeof CountUserSeasonInvitesRoleInEnum];
/**
 * @export
 */
export const CountUserSeasonInvitesRoleNotInEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type CountUserSeasonInvitesRoleNotInEnum = typeof CountUserSeasonInvitesRoleNotInEnum[keyof typeof CountUserSeasonInvitesRoleNotInEnum];
/**
 * @export
 */
export const GetAllUserSeasonInvitesCurrentStateEqualsEnum = {
    Pending: 'PENDING',
    Accepted: 'ACCEPTED',
    Rejected: 'REJECTED'
} as const;
export type GetAllUserSeasonInvitesCurrentStateEqualsEnum = typeof GetAllUserSeasonInvitesCurrentStateEqualsEnum[keyof typeof GetAllUserSeasonInvitesCurrentStateEqualsEnum];
/**
 * @export
 */
export const GetAllUserSeasonInvitesCurrentStateNotEqualsEnum = {
    Pending: 'PENDING',
    Accepted: 'ACCEPTED',
    Rejected: 'REJECTED'
} as const;
export type GetAllUserSeasonInvitesCurrentStateNotEqualsEnum = typeof GetAllUserSeasonInvitesCurrentStateNotEqualsEnum[keyof typeof GetAllUserSeasonInvitesCurrentStateNotEqualsEnum];
/**
 * @export
 */
export const GetAllUserSeasonInvitesCurrentStateInEnum = {
    Pending: 'PENDING',
    Accepted: 'ACCEPTED',
    Rejected: 'REJECTED'
} as const;
export type GetAllUserSeasonInvitesCurrentStateInEnum = typeof GetAllUserSeasonInvitesCurrentStateInEnum[keyof typeof GetAllUserSeasonInvitesCurrentStateInEnum];
/**
 * @export
 */
export const GetAllUserSeasonInvitesCurrentStateNotInEnum = {
    Pending: 'PENDING',
    Accepted: 'ACCEPTED',
    Rejected: 'REJECTED'
} as const;
export type GetAllUserSeasonInvitesCurrentStateNotInEnum = typeof GetAllUserSeasonInvitesCurrentStateNotInEnum[keyof typeof GetAllUserSeasonInvitesCurrentStateNotInEnum];
/**
 * @export
 */
export const GetAllUserSeasonInvitesRoleEqualsEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type GetAllUserSeasonInvitesRoleEqualsEnum = typeof GetAllUserSeasonInvitesRoleEqualsEnum[keyof typeof GetAllUserSeasonInvitesRoleEqualsEnum];
/**
 * @export
 */
export const GetAllUserSeasonInvitesRoleNotEqualsEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type GetAllUserSeasonInvitesRoleNotEqualsEnum = typeof GetAllUserSeasonInvitesRoleNotEqualsEnum[keyof typeof GetAllUserSeasonInvitesRoleNotEqualsEnum];
/**
 * @export
 */
export const GetAllUserSeasonInvitesRoleInEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type GetAllUserSeasonInvitesRoleInEnum = typeof GetAllUserSeasonInvitesRoleInEnum[keyof typeof GetAllUserSeasonInvitesRoleInEnum];
/**
 * @export
 */
export const GetAllUserSeasonInvitesRoleNotInEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type GetAllUserSeasonInvitesRoleNotInEnum = typeof GetAllUserSeasonInvitesRoleNotInEnum[keyof typeof GetAllUserSeasonInvitesRoleNotInEnum];
