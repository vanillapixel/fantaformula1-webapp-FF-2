/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FastestLaps,
} from '../models';
import {
    FastestLapsFromJSON,
    FastestLapsToJSON,
} from '../models';

export interface CountFastestLapsRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    posContains?: string;
    posDoesNotContain?: string;
    posEquals?: string;
    posNotEquals?: string;
    posSpecified?: boolean;
    posIn?: Array<string>;
    posNotIn?: Array<string>;
    numberDriverContains?: string;
    numberDriverDoesNotContain?: string;
    numberDriverEquals?: string;
    numberDriverNotEquals?: string;
    numberDriverSpecified?: boolean;
    numberDriverIn?: Array<string>;
    numberDriverNotIn?: Array<string>;
    nameDriverContains?: string;
    nameDriverDoesNotContain?: string;
    nameDriverEquals?: string;
    nameDriverNotEquals?: string;
    nameDriverSpecified?: boolean;
    nameDriverIn?: Array<string>;
    nameDriverNotIn?: Array<string>;
    nameTeamContains?: string;
    nameTeamDoesNotContain?: string;
    nameTeamEquals?: string;
    nameTeamNotEquals?: string;
    nameTeamSpecified?: boolean;
    nameTeamIn?: Array<string>;
    nameTeamNotIn?: Array<string>;
    numberLapsContains?: string;
    numberLapsDoesNotContain?: string;
    numberLapsEquals?: string;
    numberLapsNotEquals?: string;
    numberLapsSpecified?: boolean;
    numberLapsIn?: Array<string>;
    numberLapsNotIn?: Array<string>;
    timeDayOfBestLapGreaterThan?: Date;
    timeDayOfBestLapLessThan?: Date;
    timeDayOfBestLapGreaterThanOrEqual?: Date;
    timeDayOfBestLapLessThanOrEqual?: Date;
    timeDayOfBestLapEquals?: Date;
    timeDayOfBestLapNotEquals?: Date;
    timeDayOfBestLapSpecified?: boolean;
    timeDayOfBestLapIn?: Array<Date>;
    timeDayOfBestLapNotIn?: Array<Date>;
    bestLapGreaterThan?: Date;
    bestLapLessThan?: Date;
    bestLapGreaterThanOrEqual?: Date;
    bestLapLessThanOrEqual?: Date;
    bestLapEquals?: Date;
    bestLapNotEquals?: Date;
    bestLapSpecified?: boolean;
    bestLapIn?: Array<Date>;
    bestLapNotIn?: Array<Date>;
    avgSpeedGreaterThan?: number;
    avgSpeedLessThan?: number;
    avgSpeedGreaterThanOrEqual?: number;
    avgSpeedLessThanOrEqual?: number;
    avgSpeedEquals?: number;
    avgSpeedNotEquals?: number;
    avgSpeedSpecified?: boolean;
    avgSpeedIn?: Array<number>;
    avgSpeedNotIn?: Array<number>;
    granPrixIdGreaterThan?: number;
    granPrixIdLessThan?: number;
    granPrixIdGreaterThanOrEqual?: number;
    granPrixIdLessThanOrEqual?: number;
    granPrixIdEquals?: number;
    granPrixIdNotEquals?: number;
    granPrixIdSpecified?: boolean;
    granPrixIdIn?: Array<number>;
    granPrixIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface CreateFastestLapsRequest {
    fastestLaps: FastestLaps;
}

export interface DeleteFastestLapsRequest {
    id: number;
}

export interface GetAllFastestLapsRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    posContains?: string;
    posDoesNotContain?: string;
    posEquals?: string;
    posNotEquals?: string;
    posSpecified?: boolean;
    posIn?: Array<string>;
    posNotIn?: Array<string>;
    numberDriverContains?: string;
    numberDriverDoesNotContain?: string;
    numberDriverEquals?: string;
    numberDriverNotEquals?: string;
    numberDriverSpecified?: boolean;
    numberDriverIn?: Array<string>;
    numberDriverNotIn?: Array<string>;
    nameDriverContains?: string;
    nameDriverDoesNotContain?: string;
    nameDriverEquals?: string;
    nameDriverNotEquals?: string;
    nameDriverSpecified?: boolean;
    nameDriverIn?: Array<string>;
    nameDriverNotIn?: Array<string>;
    nameTeamContains?: string;
    nameTeamDoesNotContain?: string;
    nameTeamEquals?: string;
    nameTeamNotEquals?: string;
    nameTeamSpecified?: boolean;
    nameTeamIn?: Array<string>;
    nameTeamNotIn?: Array<string>;
    numberLapsContains?: string;
    numberLapsDoesNotContain?: string;
    numberLapsEquals?: string;
    numberLapsNotEquals?: string;
    numberLapsSpecified?: boolean;
    numberLapsIn?: Array<string>;
    numberLapsNotIn?: Array<string>;
    timeDayOfBestLapGreaterThan?: Date;
    timeDayOfBestLapLessThan?: Date;
    timeDayOfBestLapGreaterThanOrEqual?: Date;
    timeDayOfBestLapLessThanOrEqual?: Date;
    timeDayOfBestLapEquals?: Date;
    timeDayOfBestLapNotEquals?: Date;
    timeDayOfBestLapSpecified?: boolean;
    timeDayOfBestLapIn?: Array<Date>;
    timeDayOfBestLapNotIn?: Array<Date>;
    bestLapGreaterThan?: Date;
    bestLapLessThan?: Date;
    bestLapGreaterThanOrEqual?: Date;
    bestLapLessThanOrEqual?: Date;
    bestLapEquals?: Date;
    bestLapNotEquals?: Date;
    bestLapSpecified?: boolean;
    bestLapIn?: Array<Date>;
    bestLapNotIn?: Array<Date>;
    avgSpeedGreaterThan?: number;
    avgSpeedLessThan?: number;
    avgSpeedGreaterThanOrEqual?: number;
    avgSpeedLessThanOrEqual?: number;
    avgSpeedEquals?: number;
    avgSpeedNotEquals?: number;
    avgSpeedSpecified?: boolean;
    avgSpeedIn?: Array<number>;
    avgSpeedNotIn?: Array<number>;
    granPrixIdGreaterThan?: number;
    granPrixIdLessThan?: number;
    granPrixIdGreaterThanOrEqual?: number;
    granPrixIdLessThanOrEqual?: number;
    granPrixIdEquals?: number;
    granPrixIdNotEquals?: number;
    granPrixIdSpecified?: boolean;
    granPrixIdIn?: Array<number>;
    granPrixIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface GetFastestLapsRequest {
    id: number;
}

export interface PartialUpdateFastestLapsRequest {
    id: number;
    fastestLaps: FastestLaps;
}

export interface UpdateFastestLapsRequest {
    id: number;
    fastestLaps: FastestLaps;
}

/**
 * 
 */
export class FastestLapsResourceApi extends runtime.BaseAPI {

    /**
     */
    async countFastestLapsRaw(requestParameters: CountFastestLapsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.posContains !== undefined) {
            queryParameters['pos.contains'] = requestParameters.posContains;
        }

        if (requestParameters.posDoesNotContain !== undefined) {
            queryParameters['pos.doesNotContain'] = requestParameters.posDoesNotContain;
        }

        if (requestParameters.posEquals !== undefined) {
            queryParameters['pos.equals'] = requestParameters.posEquals;
        }

        if (requestParameters.posNotEquals !== undefined) {
            queryParameters['pos.notEquals'] = requestParameters.posNotEquals;
        }

        if (requestParameters.posSpecified !== undefined) {
            queryParameters['pos.specified'] = requestParameters.posSpecified;
        }

        if (requestParameters.posIn) {
            queryParameters['pos.in'] = requestParameters.posIn;
        }

        if (requestParameters.posNotIn) {
            queryParameters['pos.notIn'] = requestParameters.posNotIn;
        }

        if (requestParameters.numberDriverContains !== undefined) {
            queryParameters['numberDriver.contains'] = requestParameters.numberDriverContains;
        }

        if (requestParameters.numberDriverDoesNotContain !== undefined) {
            queryParameters['numberDriver.doesNotContain'] = requestParameters.numberDriverDoesNotContain;
        }

        if (requestParameters.numberDriverEquals !== undefined) {
            queryParameters['numberDriver.equals'] = requestParameters.numberDriverEquals;
        }

        if (requestParameters.numberDriverNotEquals !== undefined) {
            queryParameters['numberDriver.notEquals'] = requestParameters.numberDriverNotEquals;
        }

        if (requestParameters.numberDriverSpecified !== undefined) {
            queryParameters['numberDriver.specified'] = requestParameters.numberDriverSpecified;
        }

        if (requestParameters.numberDriverIn) {
            queryParameters['numberDriver.in'] = requestParameters.numberDriverIn;
        }

        if (requestParameters.numberDriverNotIn) {
            queryParameters['numberDriver.notIn'] = requestParameters.numberDriverNotIn;
        }

        if (requestParameters.nameDriverContains !== undefined) {
            queryParameters['nameDriver.contains'] = requestParameters.nameDriverContains;
        }

        if (requestParameters.nameDriverDoesNotContain !== undefined) {
            queryParameters['nameDriver.doesNotContain'] = requestParameters.nameDriverDoesNotContain;
        }

        if (requestParameters.nameDriverEquals !== undefined) {
            queryParameters['nameDriver.equals'] = requestParameters.nameDriverEquals;
        }

        if (requestParameters.nameDriverNotEquals !== undefined) {
            queryParameters['nameDriver.notEquals'] = requestParameters.nameDriverNotEquals;
        }

        if (requestParameters.nameDriverSpecified !== undefined) {
            queryParameters['nameDriver.specified'] = requestParameters.nameDriverSpecified;
        }

        if (requestParameters.nameDriverIn) {
            queryParameters['nameDriver.in'] = requestParameters.nameDriverIn;
        }

        if (requestParameters.nameDriverNotIn) {
            queryParameters['nameDriver.notIn'] = requestParameters.nameDriverNotIn;
        }

        if (requestParameters.nameTeamContains !== undefined) {
            queryParameters['nameTeam.contains'] = requestParameters.nameTeamContains;
        }

        if (requestParameters.nameTeamDoesNotContain !== undefined) {
            queryParameters['nameTeam.doesNotContain'] = requestParameters.nameTeamDoesNotContain;
        }

        if (requestParameters.nameTeamEquals !== undefined) {
            queryParameters['nameTeam.equals'] = requestParameters.nameTeamEquals;
        }

        if (requestParameters.nameTeamNotEquals !== undefined) {
            queryParameters['nameTeam.notEquals'] = requestParameters.nameTeamNotEquals;
        }

        if (requestParameters.nameTeamSpecified !== undefined) {
            queryParameters['nameTeam.specified'] = requestParameters.nameTeamSpecified;
        }

        if (requestParameters.nameTeamIn) {
            queryParameters['nameTeam.in'] = requestParameters.nameTeamIn;
        }

        if (requestParameters.nameTeamNotIn) {
            queryParameters['nameTeam.notIn'] = requestParameters.nameTeamNotIn;
        }

        if (requestParameters.numberLapsContains !== undefined) {
            queryParameters['numberLaps.contains'] = requestParameters.numberLapsContains;
        }

        if (requestParameters.numberLapsDoesNotContain !== undefined) {
            queryParameters['numberLaps.doesNotContain'] = requestParameters.numberLapsDoesNotContain;
        }

        if (requestParameters.numberLapsEquals !== undefined) {
            queryParameters['numberLaps.equals'] = requestParameters.numberLapsEquals;
        }

        if (requestParameters.numberLapsNotEquals !== undefined) {
            queryParameters['numberLaps.notEquals'] = requestParameters.numberLapsNotEquals;
        }

        if (requestParameters.numberLapsSpecified !== undefined) {
            queryParameters['numberLaps.specified'] = requestParameters.numberLapsSpecified;
        }

        if (requestParameters.numberLapsIn) {
            queryParameters['numberLaps.in'] = requestParameters.numberLapsIn;
        }

        if (requestParameters.numberLapsNotIn) {
            queryParameters['numberLaps.notIn'] = requestParameters.numberLapsNotIn;
        }

        if (requestParameters.timeDayOfBestLapGreaterThan !== undefined) {
            queryParameters['timeDayOfBestLap.greaterThan'] = (requestParameters.timeDayOfBestLapGreaterThan as any).toISOString();
        }

        if (requestParameters.timeDayOfBestLapLessThan !== undefined) {
            queryParameters['timeDayOfBestLap.lessThan'] = (requestParameters.timeDayOfBestLapLessThan as any).toISOString();
        }

        if (requestParameters.timeDayOfBestLapGreaterThanOrEqual !== undefined) {
            queryParameters['timeDayOfBestLap.greaterThanOrEqual'] = (requestParameters.timeDayOfBestLapGreaterThanOrEqual as any).toISOString();
        }

        if (requestParameters.timeDayOfBestLapLessThanOrEqual !== undefined) {
            queryParameters['timeDayOfBestLap.lessThanOrEqual'] = (requestParameters.timeDayOfBestLapLessThanOrEqual as any).toISOString();
        }

        if (requestParameters.timeDayOfBestLapEquals !== undefined) {
            queryParameters['timeDayOfBestLap.equals'] = (requestParameters.timeDayOfBestLapEquals as any).toISOString();
        }

        if (requestParameters.timeDayOfBestLapNotEquals !== undefined) {
            queryParameters['timeDayOfBestLap.notEquals'] = (requestParameters.timeDayOfBestLapNotEquals as any).toISOString();
        }

        if (requestParameters.timeDayOfBestLapSpecified !== undefined) {
            queryParameters['timeDayOfBestLap.specified'] = requestParameters.timeDayOfBestLapSpecified;
        }

        if (requestParameters.timeDayOfBestLapIn) {
            queryParameters['timeDayOfBestLap.in'] = requestParameters.timeDayOfBestLapIn;
        }

        if (requestParameters.timeDayOfBestLapNotIn) {
            queryParameters['timeDayOfBestLap.notIn'] = requestParameters.timeDayOfBestLapNotIn;
        }

        if (requestParameters.bestLapGreaterThan !== undefined) {
            queryParameters['bestLap.greaterThan'] = (requestParameters.bestLapGreaterThan as any).toISOString();
        }

        if (requestParameters.bestLapLessThan !== undefined) {
            queryParameters['bestLap.lessThan'] = (requestParameters.bestLapLessThan as any).toISOString();
        }

        if (requestParameters.bestLapGreaterThanOrEqual !== undefined) {
            queryParameters['bestLap.greaterThanOrEqual'] = (requestParameters.bestLapGreaterThanOrEqual as any).toISOString();
        }

        if (requestParameters.bestLapLessThanOrEqual !== undefined) {
            queryParameters['bestLap.lessThanOrEqual'] = (requestParameters.bestLapLessThanOrEqual as any).toISOString();
        }

        if (requestParameters.bestLapEquals !== undefined) {
            queryParameters['bestLap.equals'] = (requestParameters.bestLapEquals as any).toISOString();
        }

        if (requestParameters.bestLapNotEquals !== undefined) {
            queryParameters['bestLap.notEquals'] = (requestParameters.bestLapNotEquals as any).toISOString();
        }

        if (requestParameters.bestLapSpecified !== undefined) {
            queryParameters['bestLap.specified'] = requestParameters.bestLapSpecified;
        }

        if (requestParameters.bestLapIn) {
            queryParameters['bestLap.in'] = requestParameters.bestLapIn;
        }

        if (requestParameters.bestLapNotIn) {
            queryParameters['bestLap.notIn'] = requestParameters.bestLapNotIn;
        }

        if (requestParameters.avgSpeedGreaterThan !== undefined) {
            queryParameters['avgSpeed.greaterThan'] = requestParameters.avgSpeedGreaterThan;
        }

        if (requestParameters.avgSpeedLessThan !== undefined) {
            queryParameters['avgSpeed.lessThan'] = requestParameters.avgSpeedLessThan;
        }

        if (requestParameters.avgSpeedGreaterThanOrEqual !== undefined) {
            queryParameters['avgSpeed.greaterThanOrEqual'] = requestParameters.avgSpeedGreaterThanOrEqual;
        }

        if (requestParameters.avgSpeedLessThanOrEqual !== undefined) {
            queryParameters['avgSpeed.lessThanOrEqual'] = requestParameters.avgSpeedLessThanOrEqual;
        }

        if (requestParameters.avgSpeedEquals !== undefined) {
            queryParameters['avgSpeed.equals'] = requestParameters.avgSpeedEquals;
        }

        if (requestParameters.avgSpeedNotEquals !== undefined) {
            queryParameters['avgSpeed.notEquals'] = requestParameters.avgSpeedNotEquals;
        }

        if (requestParameters.avgSpeedSpecified !== undefined) {
            queryParameters['avgSpeed.specified'] = requestParameters.avgSpeedSpecified;
        }

        if (requestParameters.avgSpeedIn) {
            queryParameters['avgSpeed.in'] = requestParameters.avgSpeedIn;
        }

        if (requestParameters.avgSpeedNotIn) {
            queryParameters['avgSpeed.notIn'] = requestParameters.avgSpeedNotIn;
        }

        if (requestParameters.granPrixIdGreaterThan !== undefined) {
            queryParameters['granPrixId.greaterThan'] = requestParameters.granPrixIdGreaterThan;
        }

        if (requestParameters.granPrixIdLessThan !== undefined) {
            queryParameters['granPrixId.lessThan'] = requestParameters.granPrixIdLessThan;
        }

        if (requestParameters.granPrixIdGreaterThanOrEqual !== undefined) {
            queryParameters['granPrixId.greaterThanOrEqual'] = requestParameters.granPrixIdGreaterThanOrEqual;
        }

        if (requestParameters.granPrixIdLessThanOrEqual !== undefined) {
            queryParameters['granPrixId.lessThanOrEqual'] = requestParameters.granPrixIdLessThanOrEqual;
        }

        if (requestParameters.granPrixIdEquals !== undefined) {
            queryParameters['granPrixId.equals'] = requestParameters.granPrixIdEquals;
        }

        if (requestParameters.granPrixIdNotEquals !== undefined) {
            queryParameters['granPrixId.notEquals'] = requestParameters.granPrixIdNotEquals;
        }

        if (requestParameters.granPrixIdSpecified !== undefined) {
            queryParameters['granPrixId.specified'] = requestParameters.granPrixIdSpecified;
        }

        if (requestParameters.granPrixIdIn) {
            queryParameters['granPrixId.in'] = requestParameters.granPrixIdIn;
        }

        if (requestParameters.granPrixIdNotIn) {
            queryParameters['granPrixId.notIn'] = requestParameters.granPrixIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/fastest-laps/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async countFastestLaps(requestParameters: CountFastestLapsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.countFastestLapsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createFastestLapsRaw(requestParameters: CreateFastestLapsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FastestLaps>> {
        if (requestParameters.fastestLaps === null || requestParameters.fastestLaps === undefined) {
            throw new runtime.RequiredError('fastestLaps','Required parameter requestParameters.fastestLaps was null or undefined when calling createFastestLaps.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/fastest-laps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FastestLapsToJSON(requestParameters.fastestLaps),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FastestLapsFromJSON(jsonValue));
    }

    /**
     */
    async createFastestLaps(requestParameters: CreateFastestLapsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FastestLaps> {
        const response = await this.createFastestLapsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteFastestLapsRaw(requestParameters: DeleteFastestLapsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFastestLaps.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/fastest-laps/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteFastestLaps(requestParameters: DeleteFastestLapsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFastestLapsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllFastestLapsRaw(requestParameters: GetAllFastestLapsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FastestLaps>>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.posContains !== undefined) {
            queryParameters['pos.contains'] = requestParameters.posContains;
        }

        if (requestParameters.posDoesNotContain !== undefined) {
            queryParameters['pos.doesNotContain'] = requestParameters.posDoesNotContain;
        }

        if (requestParameters.posEquals !== undefined) {
            queryParameters['pos.equals'] = requestParameters.posEquals;
        }

        if (requestParameters.posNotEquals !== undefined) {
            queryParameters['pos.notEquals'] = requestParameters.posNotEquals;
        }

        if (requestParameters.posSpecified !== undefined) {
            queryParameters['pos.specified'] = requestParameters.posSpecified;
        }

        if (requestParameters.posIn) {
            queryParameters['pos.in'] = requestParameters.posIn;
        }

        if (requestParameters.posNotIn) {
            queryParameters['pos.notIn'] = requestParameters.posNotIn;
        }

        if (requestParameters.numberDriverContains !== undefined) {
            queryParameters['numberDriver.contains'] = requestParameters.numberDriverContains;
        }

        if (requestParameters.numberDriverDoesNotContain !== undefined) {
            queryParameters['numberDriver.doesNotContain'] = requestParameters.numberDriverDoesNotContain;
        }

        if (requestParameters.numberDriverEquals !== undefined) {
            queryParameters['numberDriver.equals'] = requestParameters.numberDriverEquals;
        }

        if (requestParameters.numberDriverNotEquals !== undefined) {
            queryParameters['numberDriver.notEquals'] = requestParameters.numberDriverNotEquals;
        }

        if (requestParameters.numberDriverSpecified !== undefined) {
            queryParameters['numberDriver.specified'] = requestParameters.numberDriverSpecified;
        }

        if (requestParameters.numberDriverIn) {
            queryParameters['numberDriver.in'] = requestParameters.numberDriverIn;
        }

        if (requestParameters.numberDriverNotIn) {
            queryParameters['numberDriver.notIn'] = requestParameters.numberDriverNotIn;
        }

        if (requestParameters.nameDriverContains !== undefined) {
            queryParameters['nameDriver.contains'] = requestParameters.nameDriverContains;
        }

        if (requestParameters.nameDriverDoesNotContain !== undefined) {
            queryParameters['nameDriver.doesNotContain'] = requestParameters.nameDriverDoesNotContain;
        }

        if (requestParameters.nameDriverEquals !== undefined) {
            queryParameters['nameDriver.equals'] = requestParameters.nameDriverEquals;
        }

        if (requestParameters.nameDriverNotEquals !== undefined) {
            queryParameters['nameDriver.notEquals'] = requestParameters.nameDriverNotEquals;
        }

        if (requestParameters.nameDriverSpecified !== undefined) {
            queryParameters['nameDriver.specified'] = requestParameters.nameDriverSpecified;
        }

        if (requestParameters.nameDriverIn) {
            queryParameters['nameDriver.in'] = requestParameters.nameDriverIn;
        }

        if (requestParameters.nameDriverNotIn) {
            queryParameters['nameDriver.notIn'] = requestParameters.nameDriverNotIn;
        }

        if (requestParameters.nameTeamContains !== undefined) {
            queryParameters['nameTeam.contains'] = requestParameters.nameTeamContains;
        }

        if (requestParameters.nameTeamDoesNotContain !== undefined) {
            queryParameters['nameTeam.doesNotContain'] = requestParameters.nameTeamDoesNotContain;
        }

        if (requestParameters.nameTeamEquals !== undefined) {
            queryParameters['nameTeam.equals'] = requestParameters.nameTeamEquals;
        }

        if (requestParameters.nameTeamNotEquals !== undefined) {
            queryParameters['nameTeam.notEquals'] = requestParameters.nameTeamNotEquals;
        }

        if (requestParameters.nameTeamSpecified !== undefined) {
            queryParameters['nameTeam.specified'] = requestParameters.nameTeamSpecified;
        }

        if (requestParameters.nameTeamIn) {
            queryParameters['nameTeam.in'] = requestParameters.nameTeamIn;
        }

        if (requestParameters.nameTeamNotIn) {
            queryParameters['nameTeam.notIn'] = requestParameters.nameTeamNotIn;
        }

        if (requestParameters.numberLapsContains !== undefined) {
            queryParameters['numberLaps.contains'] = requestParameters.numberLapsContains;
        }

        if (requestParameters.numberLapsDoesNotContain !== undefined) {
            queryParameters['numberLaps.doesNotContain'] = requestParameters.numberLapsDoesNotContain;
        }

        if (requestParameters.numberLapsEquals !== undefined) {
            queryParameters['numberLaps.equals'] = requestParameters.numberLapsEquals;
        }

        if (requestParameters.numberLapsNotEquals !== undefined) {
            queryParameters['numberLaps.notEquals'] = requestParameters.numberLapsNotEquals;
        }

        if (requestParameters.numberLapsSpecified !== undefined) {
            queryParameters['numberLaps.specified'] = requestParameters.numberLapsSpecified;
        }

        if (requestParameters.numberLapsIn) {
            queryParameters['numberLaps.in'] = requestParameters.numberLapsIn;
        }

        if (requestParameters.numberLapsNotIn) {
            queryParameters['numberLaps.notIn'] = requestParameters.numberLapsNotIn;
        }

        if (requestParameters.timeDayOfBestLapGreaterThan !== undefined) {
            queryParameters['timeDayOfBestLap.greaterThan'] = (requestParameters.timeDayOfBestLapGreaterThan as any).toISOString();
        }

        if (requestParameters.timeDayOfBestLapLessThan !== undefined) {
            queryParameters['timeDayOfBestLap.lessThan'] = (requestParameters.timeDayOfBestLapLessThan as any).toISOString();
        }

        if (requestParameters.timeDayOfBestLapGreaterThanOrEqual !== undefined) {
            queryParameters['timeDayOfBestLap.greaterThanOrEqual'] = (requestParameters.timeDayOfBestLapGreaterThanOrEqual as any).toISOString();
        }

        if (requestParameters.timeDayOfBestLapLessThanOrEqual !== undefined) {
            queryParameters['timeDayOfBestLap.lessThanOrEqual'] = (requestParameters.timeDayOfBestLapLessThanOrEqual as any).toISOString();
        }

        if (requestParameters.timeDayOfBestLapEquals !== undefined) {
            queryParameters['timeDayOfBestLap.equals'] = (requestParameters.timeDayOfBestLapEquals as any).toISOString();
        }

        if (requestParameters.timeDayOfBestLapNotEquals !== undefined) {
            queryParameters['timeDayOfBestLap.notEquals'] = (requestParameters.timeDayOfBestLapNotEquals as any).toISOString();
        }

        if (requestParameters.timeDayOfBestLapSpecified !== undefined) {
            queryParameters['timeDayOfBestLap.specified'] = requestParameters.timeDayOfBestLapSpecified;
        }

        if (requestParameters.timeDayOfBestLapIn) {
            queryParameters['timeDayOfBestLap.in'] = requestParameters.timeDayOfBestLapIn;
        }

        if (requestParameters.timeDayOfBestLapNotIn) {
            queryParameters['timeDayOfBestLap.notIn'] = requestParameters.timeDayOfBestLapNotIn;
        }

        if (requestParameters.bestLapGreaterThan !== undefined) {
            queryParameters['bestLap.greaterThan'] = (requestParameters.bestLapGreaterThan as any).toISOString();
        }

        if (requestParameters.bestLapLessThan !== undefined) {
            queryParameters['bestLap.lessThan'] = (requestParameters.bestLapLessThan as any).toISOString();
        }

        if (requestParameters.bestLapGreaterThanOrEqual !== undefined) {
            queryParameters['bestLap.greaterThanOrEqual'] = (requestParameters.bestLapGreaterThanOrEqual as any).toISOString();
        }

        if (requestParameters.bestLapLessThanOrEqual !== undefined) {
            queryParameters['bestLap.lessThanOrEqual'] = (requestParameters.bestLapLessThanOrEqual as any).toISOString();
        }

        if (requestParameters.bestLapEquals !== undefined) {
            queryParameters['bestLap.equals'] = (requestParameters.bestLapEquals as any).toISOString();
        }

        if (requestParameters.bestLapNotEquals !== undefined) {
            queryParameters['bestLap.notEquals'] = (requestParameters.bestLapNotEquals as any).toISOString();
        }

        if (requestParameters.bestLapSpecified !== undefined) {
            queryParameters['bestLap.specified'] = requestParameters.bestLapSpecified;
        }

        if (requestParameters.bestLapIn) {
            queryParameters['bestLap.in'] = requestParameters.bestLapIn;
        }

        if (requestParameters.bestLapNotIn) {
            queryParameters['bestLap.notIn'] = requestParameters.bestLapNotIn;
        }

        if (requestParameters.avgSpeedGreaterThan !== undefined) {
            queryParameters['avgSpeed.greaterThan'] = requestParameters.avgSpeedGreaterThan;
        }

        if (requestParameters.avgSpeedLessThan !== undefined) {
            queryParameters['avgSpeed.lessThan'] = requestParameters.avgSpeedLessThan;
        }

        if (requestParameters.avgSpeedGreaterThanOrEqual !== undefined) {
            queryParameters['avgSpeed.greaterThanOrEqual'] = requestParameters.avgSpeedGreaterThanOrEqual;
        }

        if (requestParameters.avgSpeedLessThanOrEqual !== undefined) {
            queryParameters['avgSpeed.lessThanOrEqual'] = requestParameters.avgSpeedLessThanOrEqual;
        }

        if (requestParameters.avgSpeedEquals !== undefined) {
            queryParameters['avgSpeed.equals'] = requestParameters.avgSpeedEquals;
        }

        if (requestParameters.avgSpeedNotEquals !== undefined) {
            queryParameters['avgSpeed.notEquals'] = requestParameters.avgSpeedNotEquals;
        }

        if (requestParameters.avgSpeedSpecified !== undefined) {
            queryParameters['avgSpeed.specified'] = requestParameters.avgSpeedSpecified;
        }

        if (requestParameters.avgSpeedIn) {
            queryParameters['avgSpeed.in'] = requestParameters.avgSpeedIn;
        }

        if (requestParameters.avgSpeedNotIn) {
            queryParameters['avgSpeed.notIn'] = requestParameters.avgSpeedNotIn;
        }

        if (requestParameters.granPrixIdGreaterThan !== undefined) {
            queryParameters['granPrixId.greaterThan'] = requestParameters.granPrixIdGreaterThan;
        }

        if (requestParameters.granPrixIdLessThan !== undefined) {
            queryParameters['granPrixId.lessThan'] = requestParameters.granPrixIdLessThan;
        }

        if (requestParameters.granPrixIdGreaterThanOrEqual !== undefined) {
            queryParameters['granPrixId.greaterThanOrEqual'] = requestParameters.granPrixIdGreaterThanOrEqual;
        }

        if (requestParameters.granPrixIdLessThanOrEqual !== undefined) {
            queryParameters['granPrixId.lessThanOrEqual'] = requestParameters.granPrixIdLessThanOrEqual;
        }

        if (requestParameters.granPrixIdEquals !== undefined) {
            queryParameters['granPrixId.equals'] = requestParameters.granPrixIdEquals;
        }

        if (requestParameters.granPrixIdNotEquals !== undefined) {
            queryParameters['granPrixId.notEquals'] = requestParameters.granPrixIdNotEquals;
        }

        if (requestParameters.granPrixIdSpecified !== undefined) {
            queryParameters['granPrixId.specified'] = requestParameters.granPrixIdSpecified;
        }

        if (requestParameters.granPrixIdIn) {
            queryParameters['granPrixId.in'] = requestParameters.granPrixIdIn;
        }

        if (requestParameters.granPrixIdNotIn) {
            queryParameters['granPrixId.notIn'] = requestParameters.granPrixIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/fastest-laps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FastestLapsFromJSON));
    }

    /**
     */
    async getAllFastestLaps(requestParameters: GetAllFastestLapsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FastestLaps>> {
        const response = await this.getAllFastestLapsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFastestLapsRaw(requestParameters: GetFastestLapsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FastestLaps>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFastestLaps.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/fastest-laps/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FastestLapsFromJSON(jsonValue));
    }

    /**
     */
    async getFastestLaps(requestParameters: GetFastestLapsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FastestLaps> {
        const response = await this.getFastestLapsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async partialUpdateFastestLapsRaw(requestParameters: PartialUpdateFastestLapsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FastestLaps>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateFastestLaps.');
        }

        if (requestParameters.fastestLaps === null || requestParameters.fastestLaps === undefined) {
            throw new runtime.RequiredError('fastestLaps','Required parameter requestParameters.fastestLaps was null or undefined when calling partialUpdateFastestLaps.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/fastest-laps/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: FastestLapsToJSON(requestParameters.fastestLaps),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FastestLapsFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateFastestLaps(requestParameters: PartialUpdateFastestLapsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FastestLaps> {
        const response = await this.partialUpdateFastestLapsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateFastestLapsRaw(requestParameters: UpdateFastestLapsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FastestLaps>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFastestLaps.');
        }

        if (requestParameters.fastestLaps === null || requestParameters.fastestLaps === undefined) {
            throw new runtime.RequiredError('fastestLaps','Required parameter requestParameters.fastestLaps was null or undefined when calling updateFastestLaps.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/fastest-laps/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FastestLapsToJSON(requestParameters.fastestLaps),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FastestLapsFromJSON(jsonValue));
    }

    /**
     */
    async updateFastestLaps(requestParameters: UpdateFastestLapsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FastestLaps> {
        const response = await this.updateFastestLapsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
