/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Practice,
} from '../models';
import {
    PracticeFromJSON,
    PracticeToJSON,
} from '../models';

export interface CountPracticesRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    posContains?: string;
    posDoesNotContain?: string;
    posEquals?: string;
    posNotEquals?: string;
    posSpecified?: boolean;
    posIn?: Array<string>;
    posNotIn?: Array<string>;
    numberDriverContains?: string;
    numberDriverDoesNotContain?: string;
    numberDriverEquals?: string;
    numberDriverNotEquals?: string;
    numberDriverSpecified?: boolean;
    numberDriverIn?: Array<string>;
    numberDriverNotIn?: Array<string>;
    nameDriverContains?: string;
    nameDriverDoesNotContain?: string;
    nameDriverEquals?: string;
    nameDriverNotEquals?: string;
    nameDriverSpecified?: boolean;
    nameDriverIn?: Array<string>;
    nameDriverNotIn?: Array<string>;
    nameTeamContains?: string;
    nameTeamDoesNotContain?: string;
    nameTeamEquals?: string;
    nameTeamNotEquals?: string;
    nameTeamSpecified?: boolean;
    nameTeamIn?: Array<string>;
    nameTeamNotIn?: Array<string>;
    practiceTimeTotalGreaterThan?: Date;
    practiceTimeTotalLessThan?: Date;
    practiceTimeTotalGreaterThanOrEqual?: Date;
    practiceTimeTotalLessThanOrEqual?: Date;
    practiceTimeTotalEquals?: Date;
    practiceTimeTotalNotEquals?: Date;
    practiceTimeTotalSpecified?: boolean;
    practiceTimeTotalIn?: Array<Date>;
    practiceTimeTotalNotIn?: Array<Date>;
    gapContains?: string;
    gapDoesNotContain?: string;
    gapEquals?: string;
    gapNotEquals?: string;
    gapSpecified?: boolean;
    gapIn?: Array<string>;
    gapNotIn?: Array<string>;
    numberLapsGreaterThan?: number;
    numberLapsLessThan?: number;
    numberLapsGreaterThanOrEqual?: number;
    numberLapsLessThanOrEqual?: number;
    numberLapsEquals?: number;
    numberLapsNotEquals?: number;
    numberLapsSpecified?: boolean;
    numberLapsIn?: Array<number>;
    numberLapsNotIn?: Array<number>;
    practiceTypeEquals?: CountPracticesPracticeTypeEqualsEnum;
    practiceTypeNotEquals?: CountPracticesPracticeTypeNotEqualsEnum;
    practiceTypeSpecified?: boolean;
    practiceTypeIn?: Array<CountPracticesPracticeTypeInEnum>;
    practiceTypeNotIn?: Array<CountPracticesPracticeTypeNotInEnum>;
    granPrixIdGreaterThan?: number;
    granPrixIdLessThan?: number;
    granPrixIdGreaterThanOrEqual?: number;
    granPrixIdLessThanOrEqual?: number;
    granPrixIdEquals?: number;
    granPrixIdNotEquals?: number;
    granPrixIdSpecified?: boolean;
    granPrixIdIn?: Array<number>;
    granPrixIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface CreatePracticeRequest {
    practice: Practice;
}

export interface DeletePracticeRequest {
    id: number;
}

export interface GetAllPracticesRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    posContains?: string;
    posDoesNotContain?: string;
    posEquals?: string;
    posNotEquals?: string;
    posSpecified?: boolean;
    posIn?: Array<string>;
    posNotIn?: Array<string>;
    numberDriverContains?: string;
    numberDriverDoesNotContain?: string;
    numberDriverEquals?: string;
    numberDriverNotEquals?: string;
    numberDriverSpecified?: boolean;
    numberDriverIn?: Array<string>;
    numberDriverNotIn?: Array<string>;
    nameDriverContains?: string;
    nameDriverDoesNotContain?: string;
    nameDriverEquals?: string;
    nameDriverNotEquals?: string;
    nameDriverSpecified?: boolean;
    nameDriverIn?: Array<string>;
    nameDriverNotIn?: Array<string>;
    nameTeamContains?: string;
    nameTeamDoesNotContain?: string;
    nameTeamEquals?: string;
    nameTeamNotEquals?: string;
    nameTeamSpecified?: boolean;
    nameTeamIn?: Array<string>;
    nameTeamNotIn?: Array<string>;
    practiceTimeTotalGreaterThan?: Date;
    practiceTimeTotalLessThan?: Date;
    practiceTimeTotalGreaterThanOrEqual?: Date;
    practiceTimeTotalLessThanOrEqual?: Date;
    practiceTimeTotalEquals?: Date;
    practiceTimeTotalNotEquals?: Date;
    practiceTimeTotalSpecified?: boolean;
    practiceTimeTotalIn?: Array<Date>;
    practiceTimeTotalNotIn?: Array<Date>;
    gapContains?: string;
    gapDoesNotContain?: string;
    gapEquals?: string;
    gapNotEquals?: string;
    gapSpecified?: boolean;
    gapIn?: Array<string>;
    gapNotIn?: Array<string>;
    numberLapsGreaterThan?: number;
    numberLapsLessThan?: number;
    numberLapsGreaterThanOrEqual?: number;
    numberLapsLessThanOrEqual?: number;
    numberLapsEquals?: number;
    numberLapsNotEquals?: number;
    numberLapsSpecified?: boolean;
    numberLapsIn?: Array<number>;
    numberLapsNotIn?: Array<number>;
    practiceTypeEquals?: GetAllPracticesPracticeTypeEqualsEnum;
    practiceTypeNotEquals?: GetAllPracticesPracticeTypeNotEqualsEnum;
    practiceTypeSpecified?: boolean;
    practiceTypeIn?: Array<GetAllPracticesPracticeTypeInEnum>;
    practiceTypeNotIn?: Array<GetAllPracticesPracticeTypeNotInEnum>;
    granPrixIdGreaterThan?: number;
    granPrixIdLessThan?: number;
    granPrixIdGreaterThanOrEqual?: number;
    granPrixIdLessThanOrEqual?: number;
    granPrixIdEquals?: number;
    granPrixIdNotEquals?: number;
    granPrixIdSpecified?: boolean;
    granPrixIdIn?: Array<number>;
    granPrixIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface GetPracticeRequest {
    id: number;
}

export interface PartialUpdatePracticeRequest {
    id: number;
    practice: Practice;
}

export interface UpdatePracticeRequest {
    id: number;
    practice: Practice;
}

/**
 * 
 */
export class PracticeResourceApi extends runtime.BaseAPI {

    /**
     */
    async countPracticesRaw(requestParameters: CountPracticesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.posContains !== undefined) {
            queryParameters['pos.contains'] = requestParameters.posContains;
        }

        if (requestParameters.posDoesNotContain !== undefined) {
            queryParameters['pos.doesNotContain'] = requestParameters.posDoesNotContain;
        }

        if (requestParameters.posEquals !== undefined) {
            queryParameters['pos.equals'] = requestParameters.posEquals;
        }

        if (requestParameters.posNotEquals !== undefined) {
            queryParameters['pos.notEquals'] = requestParameters.posNotEquals;
        }

        if (requestParameters.posSpecified !== undefined) {
            queryParameters['pos.specified'] = requestParameters.posSpecified;
        }

        if (requestParameters.posIn) {
            queryParameters['pos.in'] = requestParameters.posIn;
        }

        if (requestParameters.posNotIn) {
            queryParameters['pos.notIn'] = requestParameters.posNotIn;
        }

        if (requestParameters.numberDriverContains !== undefined) {
            queryParameters['numberDriver.contains'] = requestParameters.numberDriverContains;
        }

        if (requestParameters.numberDriverDoesNotContain !== undefined) {
            queryParameters['numberDriver.doesNotContain'] = requestParameters.numberDriverDoesNotContain;
        }

        if (requestParameters.numberDriverEquals !== undefined) {
            queryParameters['numberDriver.equals'] = requestParameters.numberDriverEquals;
        }

        if (requestParameters.numberDriverNotEquals !== undefined) {
            queryParameters['numberDriver.notEquals'] = requestParameters.numberDriverNotEquals;
        }

        if (requestParameters.numberDriverSpecified !== undefined) {
            queryParameters['numberDriver.specified'] = requestParameters.numberDriverSpecified;
        }

        if (requestParameters.numberDriverIn) {
            queryParameters['numberDriver.in'] = requestParameters.numberDriverIn;
        }

        if (requestParameters.numberDriverNotIn) {
            queryParameters['numberDriver.notIn'] = requestParameters.numberDriverNotIn;
        }

        if (requestParameters.nameDriverContains !== undefined) {
            queryParameters['nameDriver.contains'] = requestParameters.nameDriverContains;
        }

        if (requestParameters.nameDriverDoesNotContain !== undefined) {
            queryParameters['nameDriver.doesNotContain'] = requestParameters.nameDriverDoesNotContain;
        }

        if (requestParameters.nameDriverEquals !== undefined) {
            queryParameters['nameDriver.equals'] = requestParameters.nameDriverEquals;
        }

        if (requestParameters.nameDriverNotEquals !== undefined) {
            queryParameters['nameDriver.notEquals'] = requestParameters.nameDriverNotEquals;
        }

        if (requestParameters.nameDriverSpecified !== undefined) {
            queryParameters['nameDriver.specified'] = requestParameters.nameDriverSpecified;
        }

        if (requestParameters.nameDriverIn) {
            queryParameters['nameDriver.in'] = requestParameters.nameDriverIn;
        }

        if (requestParameters.nameDriverNotIn) {
            queryParameters['nameDriver.notIn'] = requestParameters.nameDriverNotIn;
        }

        if (requestParameters.nameTeamContains !== undefined) {
            queryParameters['nameTeam.contains'] = requestParameters.nameTeamContains;
        }

        if (requestParameters.nameTeamDoesNotContain !== undefined) {
            queryParameters['nameTeam.doesNotContain'] = requestParameters.nameTeamDoesNotContain;
        }

        if (requestParameters.nameTeamEquals !== undefined) {
            queryParameters['nameTeam.equals'] = requestParameters.nameTeamEquals;
        }

        if (requestParameters.nameTeamNotEquals !== undefined) {
            queryParameters['nameTeam.notEquals'] = requestParameters.nameTeamNotEquals;
        }

        if (requestParameters.nameTeamSpecified !== undefined) {
            queryParameters['nameTeam.specified'] = requestParameters.nameTeamSpecified;
        }

        if (requestParameters.nameTeamIn) {
            queryParameters['nameTeam.in'] = requestParameters.nameTeamIn;
        }

        if (requestParameters.nameTeamNotIn) {
            queryParameters['nameTeam.notIn'] = requestParameters.nameTeamNotIn;
        }

        if (requestParameters.practiceTimeTotalGreaterThan !== undefined) {
            queryParameters['practiceTimeTotal.greaterThan'] = (requestParameters.practiceTimeTotalGreaterThan as any).toISOString();
        }

        if (requestParameters.practiceTimeTotalLessThan !== undefined) {
            queryParameters['practiceTimeTotal.lessThan'] = (requestParameters.practiceTimeTotalLessThan as any).toISOString();
        }

        if (requestParameters.practiceTimeTotalGreaterThanOrEqual !== undefined) {
            queryParameters['practiceTimeTotal.greaterThanOrEqual'] = (requestParameters.practiceTimeTotalGreaterThanOrEqual as any).toISOString();
        }

        if (requestParameters.practiceTimeTotalLessThanOrEqual !== undefined) {
            queryParameters['practiceTimeTotal.lessThanOrEqual'] = (requestParameters.practiceTimeTotalLessThanOrEqual as any).toISOString();
        }

        if (requestParameters.practiceTimeTotalEquals !== undefined) {
            queryParameters['practiceTimeTotal.equals'] = (requestParameters.practiceTimeTotalEquals as any).toISOString();
        }

        if (requestParameters.practiceTimeTotalNotEquals !== undefined) {
            queryParameters['practiceTimeTotal.notEquals'] = (requestParameters.practiceTimeTotalNotEquals as any).toISOString();
        }

        if (requestParameters.practiceTimeTotalSpecified !== undefined) {
            queryParameters['practiceTimeTotal.specified'] = requestParameters.practiceTimeTotalSpecified;
        }

        if (requestParameters.practiceTimeTotalIn) {
            queryParameters['practiceTimeTotal.in'] = requestParameters.practiceTimeTotalIn;
        }

        if (requestParameters.practiceTimeTotalNotIn) {
            queryParameters['practiceTimeTotal.notIn'] = requestParameters.practiceTimeTotalNotIn;
        }

        if (requestParameters.gapContains !== undefined) {
            queryParameters['gap.contains'] = requestParameters.gapContains;
        }

        if (requestParameters.gapDoesNotContain !== undefined) {
            queryParameters['gap.doesNotContain'] = requestParameters.gapDoesNotContain;
        }

        if (requestParameters.gapEquals !== undefined) {
            queryParameters['gap.equals'] = requestParameters.gapEquals;
        }

        if (requestParameters.gapNotEquals !== undefined) {
            queryParameters['gap.notEquals'] = requestParameters.gapNotEquals;
        }

        if (requestParameters.gapSpecified !== undefined) {
            queryParameters['gap.specified'] = requestParameters.gapSpecified;
        }

        if (requestParameters.gapIn) {
            queryParameters['gap.in'] = requestParameters.gapIn;
        }

        if (requestParameters.gapNotIn) {
            queryParameters['gap.notIn'] = requestParameters.gapNotIn;
        }

        if (requestParameters.numberLapsGreaterThan !== undefined) {
            queryParameters['numberLaps.greaterThan'] = requestParameters.numberLapsGreaterThan;
        }

        if (requestParameters.numberLapsLessThan !== undefined) {
            queryParameters['numberLaps.lessThan'] = requestParameters.numberLapsLessThan;
        }

        if (requestParameters.numberLapsGreaterThanOrEqual !== undefined) {
            queryParameters['numberLaps.greaterThanOrEqual'] = requestParameters.numberLapsGreaterThanOrEqual;
        }

        if (requestParameters.numberLapsLessThanOrEqual !== undefined) {
            queryParameters['numberLaps.lessThanOrEqual'] = requestParameters.numberLapsLessThanOrEqual;
        }

        if (requestParameters.numberLapsEquals !== undefined) {
            queryParameters['numberLaps.equals'] = requestParameters.numberLapsEquals;
        }

        if (requestParameters.numberLapsNotEquals !== undefined) {
            queryParameters['numberLaps.notEquals'] = requestParameters.numberLapsNotEquals;
        }

        if (requestParameters.numberLapsSpecified !== undefined) {
            queryParameters['numberLaps.specified'] = requestParameters.numberLapsSpecified;
        }

        if (requestParameters.numberLapsIn) {
            queryParameters['numberLaps.in'] = requestParameters.numberLapsIn;
        }

        if (requestParameters.numberLapsNotIn) {
            queryParameters['numberLaps.notIn'] = requestParameters.numberLapsNotIn;
        }

        if (requestParameters.practiceTypeEquals !== undefined) {
            queryParameters['practiceType.equals'] = requestParameters.practiceTypeEquals;
        }

        if (requestParameters.practiceTypeNotEquals !== undefined) {
            queryParameters['practiceType.notEquals'] = requestParameters.practiceTypeNotEquals;
        }

        if (requestParameters.practiceTypeSpecified !== undefined) {
            queryParameters['practiceType.specified'] = requestParameters.practiceTypeSpecified;
        }

        if (requestParameters.practiceTypeIn) {
            queryParameters['practiceType.in'] = requestParameters.practiceTypeIn;
        }

        if (requestParameters.practiceTypeNotIn) {
            queryParameters['practiceType.notIn'] = requestParameters.practiceTypeNotIn;
        }

        if (requestParameters.granPrixIdGreaterThan !== undefined) {
            queryParameters['granPrixId.greaterThan'] = requestParameters.granPrixIdGreaterThan;
        }

        if (requestParameters.granPrixIdLessThan !== undefined) {
            queryParameters['granPrixId.lessThan'] = requestParameters.granPrixIdLessThan;
        }

        if (requestParameters.granPrixIdGreaterThanOrEqual !== undefined) {
            queryParameters['granPrixId.greaterThanOrEqual'] = requestParameters.granPrixIdGreaterThanOrEqual;
        }

        if (requestParameters.granPrixIdLessThanOrEqual !== undefined) {
            queryParameters['granPrixId.lessThanOrEqual'] = requestParameters.granPrixIdLessThanOrEqual;
        }

        if (requestParameters.granPrixIdEquals !== undefined) {
            queryParameters['granPrixId.equals'] = requestParameters.granPrixIdEquals;
        }

        if (requestParameters.granPrixIdNotEquals !== undefined) {
            queryParameters['granPrixId.notEquals'] = requestParameters.granPrixIdNotEquals;
        }

        if (requestParameters.granPrixIdSpecified !== undefined) {
            queryParameters['granPrixId.specified'] = requestParameters.granPrixIdSpecified;
        }

        if (requestParameters.granPrixIdIn) {
            queryParameters['granPrixId.in'] = requestParameters.granPrixIdIn;
        }

        if (requestParameters.granPrixIdNotIn) {
            queryParameters['granPrixId.notIn'] = requestParameters.granPrixIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/practices/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async countPractices(requestParameters: CountPracticesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.countPracticesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createPracticeRaw(requestParameters: CreatePracticeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Practice>> {
        if (requestParameters.practice === null || requestParameters.practice === undefined) {
            throw new runtime.RequiredError('practice','Required parameter requestParameters.practice was null or undefined when calling createPractice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/practices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PracticeToJSON(requestParameters.practice),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PracticeFromJSON(jsonValue));
    }

    /**
     */
    async createPractice(requestParameters: CreatePracticeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Practice> {
        const response = await this.createPracticeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePracticeRaw(requestParameters: DeletePracticeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePractice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/practices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deletePractice(requestParameters: DeletePracticeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePracticeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllPracticesRaw(requestParameters: GetAllPracticesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Practice>>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.posContains !== undefined) {
            queryParameters['pos.contains'] = requestParameters.posContains;
        }

        if (requestParameters.posDoesNotContain !== undefined) {
            queryParameters['pos.doesNotContain'] = requestParameters.posDoesNotContain;
        }

        if (requestParameters.posEquals !== undefined) {
            queryParameters['pos.equals'] = requestParameters.posEquals;
        }

        if (requestParameters.posNotEquals !== undefined) {
            queryParameters['pos.notEquals'] = requestParameters.posNotEquals;
        }

        if (requestParameters.posSpecified !== undefined) {
            queryParameters['pos.specified'] = requestParameters.posSpecified;
        }

        if (requestParameters.posIn) {
            queryParameters['pos.in'] = requestParameters.posIn;
        }

        if (requestParameters.posNotIn) {
            queryParameters['pos.notIn'] = requestParameters.posNotIn;
        }

        if (requestParameters.numberDriverContains !== undefined) {
            queryParameters['numberDriver.contains'] = requestParameters.numberDriverContains;
        }

        if (requestParameters.numberDriverDoesNotContain !== undefined) {
            queryParameters['numberDriver.doesNotContain'] = requestParameters.numberDriverDoesNotContain;
        }

        if (requestParameters.numberDriverEquals !== undefined) {
            queryParameters['numberDriver.equals'] = requestParameters.numberDriverEquals;
        }

        if (requestParameters.numberDriverNotEquals !== undefined) {
            queryParameters['numberDriver.notEquals'] = requestParameters.numberDriverNotEquals;
        }

        if (requestParameters.numberDriverSpecified !== undefined) {
            queryParameters['numberDriver.specified'] = requestParameters.numberDriverSpecified;
        }

        if (requestParameters.numberDriverIn) {
            queryParameters['numberDriver.in'] = requestParameters.numberDriverIn;
        }

        if (requestParameters.numberDriverNotIn) {
            queryParameters['numberDriver.notIn'] = requestParameters.numberDriverNotIn;
        }

        if (requestParameters.nameDriverContains !== undefined) {
            queryParameters['nameDriver.contains'] = requestParameters.nameDriverContains;
        }

        if (requestParameters.nameDriverDoesNotContain !== undefined) {
            queryParameters['nameDriver.doesNotContain'] = requestParameters.nameDriverDoesNotContain;
        }

        if (requestParameters.nameDriverEquals !== undefined) {
            queryParameters['nameDriver.equals'] = requestParameters.nameDriverEquals;
        }

        if (requestParameters.nameDriverNotEquals !== undefined) {
            queryParameters['nameDriver.notEquals'] = requestParameters.nameDriverNotEquals;
        }

        if (requestParameters.nameDriverSpecified !== undefined) {
            queryParameters['nameDriver.specified'] = requestParameters.nameDriverSpecified;
        }

        if (requestParameters.nameDriverIn) {
            queryParameters['nameDriver.in'] = requestParameters.nameDriverIn;
        }

        if (requestParameters.nameDriverNotIn) {
            queryParameters['nameDriver.notIn'] = requestParameters.nameDriverNotIn;
        }

        if (requestParameters.nameTeamContains !== undefined) {
            queryParameters['nameTeam.contains'] = requestParameters.nameTeamContains;
        }

        if (requestParameters.nameTeamDoesNotContain !== undefined) {
            queryParameters['nameTeam.doesNotContain'] = requestParameters.nameTeamDoesNotContain;
        }

        if (requestParameters.nameTeamEquals !== undefined) {
            queryParameters['nameTeam.equals'] = requestParameters.nameTeamEquals;
        }

        if (requestParameters.nameTeamNotEquals !== undefined) {
            queryParameters['nameTeam.notEquals'] = requestParameters.nameTeamNotEquals;
        }

        if (requestParameters.nameTeamSpecified !== undefined) {
            queryParameters['nameTeam.specified'] = requestParameters.nameTeamSpecified;
        }

        if (requestParameters.nameTeamIn) {
            queryParameters['nameTeam.in'] = requestParameters.nameTeamIn;
        }

        if (requestParameters.nameTeamNotIn) {
            queryParameters['nameTeam.notIn'] = requestParameters.nameTeamNotIn;
        }

        if (requestParameters.practiceTimeTotalGreaterThan !== undefined) {
            queryParameters['practiceTimeTotal.greaterThan'] = (requestParameters.practiceTimeTotalGreaterThan as any).toISOString();
        }

        if (requestParameters.practiceTimeTotalLessThan !== undefined) {
            queryParameters['practiceTimeTotal.lessThan'] = (requestParameters.practiceTimeTotalLessThan as any).toISOString();
        }

        if (requestParameters.practiceTimeTotalGreaterThanOrEqual !== undefined) {
            queryParameters['practiceTimeTotal.greaterThanOrEqual'] = (requestParameters.practiceTimeTotalGreaterThanOrEqual as any).toISOString();
        }

        if (requestParameters.practiceTimeTotalLessThanOrEqual !== undefined) {
            queryParameters['practiceTimeTotal.lessThanOrEqual'] = (requestParameters.practiceTimeTotalLessThanOrEqual as any).toISOString();
        }

        if (requestParameters.practiceTimeTotalEquals !== undefined) {
            queryParameters['practiceTimeTotal.equals'] = (requestParameters.practiceTimeTotalEquals as any).toISOString();
        }

        if (requestParameters.practiceTimeTotalNotEquals !== undefined) {
            queryParameters['practiceTimeTotal.notEquals'] = (requestParameters.practiceTimeTotalNotEquals as any).toISOString();
        }

        if (requestParameters.practiceTimeTotalSpecified !== undefined) {
            queryParameters['practiceTimeTotal.specified'] = requestParameters.practiceTimeTotalSpecified;
        }

        if (requestParameters.practiceTimeTotalIn) {
            queryParameters['practiceTimeTotal.in'] = requestParameters.practiceTimeTotalIn;
        }

        if (requestParameters.practiceTimeTotalNotIn) {
            queryParameters['practiceTimeTotal.notIn'] = requestParameters.practiceTimeTotalNotIn;
        }

        if (requestParameters.gapContains !== undefined) {
            queryParameters['gap.contains'] = requestParameters.gapContains;
        }

        if (requestParameters.gapDoesNotContain !== undefined) {
            queryParameters['gap.doesNotContain'] = requestParameters.gapDoesNotContain;
        }

        if (requestParameters.gapEquals !== undefined) {
            queryParameters['gap.equals'] = requestParameters.gapEquals;
        }

        if (requestParameters.gapNotEquals !== undefined) {
            queryParameters['gap.notEquals'] = requestParameters.gapNotEquals;
        }

        if (requestParameters.gapSpecified !== undefined) {
            queryParameters['gap.specified'] = requestParameters.gapSpecified;
        }

        if (requestParameters.gapIn) {
            queryParameters['gap.in'] = requestParameters.gapIn;
        }

        if (requestParameters.gapNotIn) {
            queryParameters['gap.notIn'] = requestParameters.gapNotIn;
        }

        if (requestParameters.numberLapsGreaterThan !== undefined) {
            queryParameters['numberLaps.greaterThan'] = requestParameters.numberLapsGreaterThan;
        }

        if (requestParameters.numberLapsLessThan !== undefined) {
            queryParameters['numberLaps.lessThan'] = requestParameters.numberLapsLessThan;
        }

        if (requestParameters.numberLapsGreaterThanOrEqual !== undefined) {
            queryParameters['numberLaps.greaterThanOrEqual'] = requestParameters.numberLapsGreaterThanOrEqual;
        }

        if (requestParameters.numberLapsLessThanOrEqual !== undefined) {
            queryParameters['numberLaps.lessThanOrEqual'] = requestParameters.numberLapsLessThanOrEqual;
        }

        if (requestParameters.numberLapsEquals !== undefined) {
            queryParameters['numberLaps.equals'] = requestParameters.numberLapsEquals;
        }

        if (requestParameters.numberLapsNotEquals !== undefined) {
            queryParameters['numberLaps.notEquals'] = requestParameters.numberLapsNotEquals;
        }

        if (requestParameters.numberLapsSpecified !== undefined) {
            queryParameters['numberLaps.specified'] = requestParameters.numberLapsSpecified;
        }

        if (requestParameters.numberLapsIn) {
            queryParameters['numberLaps.in'] = requestParameters.numberLapsIn;
        }

        if (requestParameters.numberLapsNotIn) {
            queryParameters['numberLaps.notIn'] = requestParameters.numberLapsNotIn;
        }

        if (requestParameters.practiceTypeEquals !== undefined) {
            queryParameters['practiceType.equals'] = requestParameters.practiceTypeEquals;
        }

        if (requestParameters.practiceTypeNotEquals !== undefined) {
            queryParameters['practiceType.notEquals'] = requestParameters.practiceTypeNotEquals;
        }

        if (requestParameters.practiceTypeSpecified !== undefined) {
            queryParameters['practiceType.specified'] = requestParameters.practiceTypeSpecified;
        }

        if (requestParameters.practiceTypeIn) {
            queryParameters['practiceType.in'] = requestParameters.practiceTypeIn;
        }

        if (requestParameters.practiceTypeNotIn) {
            queryParameters['practiceType.notIn'] = requestParameters.practiceTypeNotIn;
        }

        if (requestParameters.granPrixIdGreaterThan !== undefined) {
            queryParameters['granPrixId.greaterThan'] = requestParameters.granPrixIdGreaterThan;
        }

        if (requestParameters.granPrixIdLessThan !== undefined) {
            queryParameters['granPrixId.lessThan'] = requestParameters.granPrixIdLessThan;
        }

        if (requestParameters.granPrixIdGreaterThanOrEqual !== undefined) {
            queryParameters['granPrixId.greaterThanOrEqual'] = requestParameters.granPrixIdGreaterThanOrEqual;
        }

        if (requestParameters.granPrixIdLessThanOrEqual !== undefined) {
            queryParameters['granPrixId.lessThanOrEqual'] = requestParameters.granPrixIdLessThanOrEqual;
        }

        if (requestParameters.granPrixIdEquals !== undefined) {
            queryParameters['granPrixId.equals'] = requestParameters.granPrixIdEquals;
        }

        if (requestParameters.granPrixIdNotEquals !== undefined) {
            queryParameters['granPrixId.notEquals'] = requestParameters.granPrixIdNotEquals;
        }

        if (requestParameters.granPrixIdSpecified !== undefined) {
            queryParameters['granPrixId.specified'] = requestParameters.granPrixIdSpecified;
        }

        if (requestParameters.granPrixIdIn) {
            queryParameters['granPrixId.in'] = requestParameters.granPrixIdIn;
        }

        if (requestParameters.granPrixIdNotIn) {
            queryParameters['granPrixId.notIn'] = requestParameters.granPrixIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/practices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PracticeFromJSON));
    }

    /**
     */
    async getAllPractices(requestParameters: GetAllPracticesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Practice>> {
        const response = await this.getAllPracticesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPracticeRaw(requestParameters: GetPracticeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Practice>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPractice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/practices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PracticeFromJSON(jsonValue));
    }

    /**
     */
    async getPractice(requestParameters: GetPracticeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Practice> {
        const response = await this.getPracticeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async partialUpdatePracticeRaw(requestParameters: PartialUpdatePracticeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Practice>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdatePractice.');
        }

        if (requestParameters.practice === null || requestParameters.practice === undefined) {
            throw new runtime.RequiredError('practice','Required parameter requestParameters.practice was null or undefined when calling partialUpdatePractice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/practices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PracticeToJSON(requestParameters.practice),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PracticeFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdatePractice(requestParameters: PartialUpdatePracticeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Practice> {
        const response = await this.partialUpdatePracticeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePracticeRaw(requestParameters: UpdatePracticeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Practice>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePractice.');
        }

        if (requestParameters.practice === null || requestParameters.practice === undefined) {
            throw new runtime.RequiredError('practice','Required parameter requestParameters.practice was null or undefined when calling updatePractice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/practices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PracticeToJSON(requestParameters.practice),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PracticeFromJSON(jsonValue));
    }

    /**
     */
    async updatePractice(requestParameters: UpdatePracticeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Practice> {
        const response = await this.updatePracticeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CountPracticesPracticeTypeEqualsEnum = {
    P1: 'P1',
    P2: 'P2',
    P3: 'P3',
    P4: 'P4'
} as const;
export type CountPracticesPracticeTypeEqualsEnum = typeof CountPracticesPracticeTypeEqualsEnum[keyof typeof CountPracticesPracticeTypeEqualsEnum];
/**
 * @export
 */
export const CountPracticesPracticeTypeNotEqualsEnum = {
    P1: 'P1',
    P2: 'P2',
    P3: 'P3',
    P4: 'P4'
} as const;
export type CountPracticesPracticeTypeNotEqualsEnum = typeof CountPracticesPracticeTypeNotEqualsEnum[keyof typeof CountPracticesPracticeTypeNotEqualsEnum];
/**
 * @export
 */
export const CountPracticesPracticeTypeInEnum = {
    P1: 'P1',
    P2: 'P2',
    P3: 'P3',
    P4: 'P4'
} as const;
export type CountPracticesPracticeTypeInEnum = typeof CountPracticesPracticeTypeInEnum[keyof typeof CountPracticesPracticeTypeInEnum];
/**
 * @export
 */
export const CountPracticesPracticeTypeNotInEnum = {
    P1: 'P1',
    P2: 'P2',
    P3: 'P3',
    P4: 'P4'
} as const;
export type CountPracticesPracticeTypeNotInEnum = typeof CountPracticesPracticeTypeNotInEnum[keyof typeof CountPracticesPracticeTypeNotInEnum];
/**
 * @export
 */
export const GetAllPracticesPracticeTypeEqualsEnum = {
    P1: 'P1',
    P2: 'P2',
    P3: 'P3',
    P4: 'P4'
} as const;
export type GetAllPracticesPracticeTypeEqualsEnum = typeof GetAllPracticesPracticeTypeEqualsEnum[keyof typeof GetAllPracticesPracticeTypeEqualsEnum];
/**
 * @export
 */
export const GetAllPracticesPracticeTypeNotEqualsEnum = {
    P1: 'P1',
    P2: 'P2',
    P3: 'P3',
    P4: 'P4'
} as const;
export type GetAllPracticesPracticeTypeNotEqualsEnum = typeof GetAllPracticesPracticeTypeNotEqualsEnum[keyof typeof GetAllPracticesPracticeTypeNotEqualsEnum];
/**
 * @export
 */
export const GetAllPracticesPracticeTypeInEnum = {
    P1: 'P1',
    P2: 'P2',
    P3: 'P3',
    P4: 'P4'
} as const;
export type GetAllPracticesPracticeTypeInEnum = typeof GetAllPracticesPracticeTypeInEnum[keyof typeof GetAllPracticesPracticeTypeInEnum];
/**
 * @export
 */
export const GetAllPracticesPracticeTypeNotInEnum = {
    P1: 'P1',
    P2: 'P2',
    P3: 'P3',
    P4: 'P4'
} as const;
export type GetAllPracticesPracticeTypeNotInEnum = typeof GetAllPracticesPracticeTypeNotInEnum[keyof typeof GetAllPracticesPracticeTypeNotInEnum];
