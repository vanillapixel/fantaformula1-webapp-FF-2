/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StartingGrid,
} from '../models';
import {
    StartingGridFromJSON,
    StartingGridToJSON,
} from '../models';

export interface CountStartingGridsRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    posContains?: string;
    posDoesNotContain?: string;
    posEquals?: string;
    posNotEquals?: string;
    posSpecified?: boolean;
    posIn?: Array<string>;
    posNotIn?: Array<string>;
    numberDriverContains?: string;
    numberDriverDoesNotContain?: string;
    numberDriverEquals?: string;
    numberDriverNotEquals?: string;
    numberDriverSpecified?: boolean;
    numberDriverIn?: Array<string>;
    numberDriverNotIn?: Array<string>;
    nameDriverContains?: string;
    nameDriverDoesNotContain?: string;
    nameDriverEquals?: string;
    nameDriverNotEquals?: string;
    nameDriverSpecified?: boolean;
    nameDriverIn?: Array<string>;
    nameDriverNotIn?: Array<string>;
    nameTeamContains?: string;
    nameTeamDoesNotContain?: string;
    nameTeamEquals?: string;
    nameTeamNotEquals?: string;
    nameTeamSpecified?: boolean;
    nameTeamIn?: Array<string>;
    nameTeamNotIn?: Array<string>;
    bestLapGreaterThan?: Date;
    bestLapLessThan?: Date;
    bestLapGreaterThanOrEqual?: Date;
    bestLapLessThanOrEqual?: Date;
    bestLapEquals?: Date;
    bestLapNotEquals?: Date;
    bestLapSpecified?: boolean;
    bestLapIn?: Array<Date>;
    bestLapNotIn?: Array<Date>;
    raceTypeEquals?: CountStartingGridsRaceTypeEqualsEnum;
    raceTypeNotEquals?: CountStartingGridsRaceTypeNotEqualsEnum;
    raceTypeSpecified?: boolean;
    raceTypeIn?: Array<CountStartingGridsRaceTypeInEnum>;
    raceTypeNotIn?: Array<CountStartingGridsRaceTypeNotInEnum>;
    granPrixIdGreaterThan?: number;
    granPrixIdLessThan?: number;
    granPrixIdGreaterThanOrEqual?: number;
    granPrixIdLessThanOrEqual?: number;
    granPrixIdEquals?: number;
    granPrixIdNotEquals?: number;
    granPrixIdSpecified?: boolean;
    granPrixIdIn?: Array<number>;
    granPrixIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface CreateStartingGridRequest {
    startingGrid: StartingGrid;
}

export interface DeleteStartingGridRequest {
    id: number;
}

export interface GetAllStartingGridsRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    posContains?: string;
    posDoesNotContain?: string;
    posEquals?: string;
    posNotEquals?: string;
    posSpecified?: boolean;
    posIn?: Array<string>;
    posNotIn?: Array<string>;
    numberDriverContains?: string;
    numberDriverDoesNotContain?: string;
    numberDriverEquals?: string;
    numberDriverNotEquals?: string;
    numberDriverSpecified?: boolean;
    numberDriverIn?: Array<string>;
    numberDriverNotIn?: Array<string>;
    nameDriverContains?: string;
    nameDriverDoesNotContain?: string;
    nameDriverEquals?: string;
    nameDriverNotEquals?: string;
    nameDriverSpecified?: boolean;
    nameDriverIn?: Array<string>;
    nameDriverNotIn?: Array<string>;
    nameTeamContains?: string;
    nameTeamDoesNotContain?: string;
    nameTeamEquals?: string;
    nameTeamNotEquals?: string;
    nameTeamSpecified?: boolean;
    nameTeamIn?: Array<string>;
    nameTeamNotIn?: Array<string>;
    bestLapGreaterThan?: Date;
    bestLapLessThan?: Date;
    bestLapGreaterThanOrEqual?: Date;
    bestLapLessThanOrEqual?: Date;
    bestLapEquals?: Date;
    bestLapNotEquals?: Date;
    bestLapSpecified?: boolean;
    bestLapIn?: Array<Date>;
    bestLapNotIn?: Array<Date>;
    raceTypeEquals?: GetAllStartingGridsRaceTypeEqualsEnum;
    raceTypeNotEquals?: GetAllStartingGridsRaceTypeNotEqualsEnum;
    raceTypeSpecified?: boolean;
    raceTypeIn?: Array<GetAllStartingGridsRaceTypeInEnum>;
    raceTypeNotIn?: Array<GetAllStartingGridsRaceTypeNotInEnum>;
    granPrixIdGreaterThan?: number;
    granPrixIdLessThan?: number;
    granPrixIdGreaterThanOrEqual?: number;
    granPrixIdLessThanOrEqual?: number;
    granPrixIdEquals?: number;
    granPrixIdNotEquals?: number;
    granPrixIdSpecified?: boolean;
    granPrixIdIn?: Array<number>;
    granPrixIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface GetStartingGridRequest {
    id: number;
}

export interface PartialUpdateStartingGridRequest {
    id: number;
    startingGrid: StartingGrid;
}

export interface UpdateStartingGridRequest {
    id: number;
    startingGrid: StartingGrid;
}

/**
 * 
 */
export class StartingGridResourceApi extends runtime.BaseAPI {

    /**
     */
    async countStartingGridsRaw(requestParameters: CountStartingGridsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.posContains !== undefined) {
            queryParameters['pos.contains'] = requestParameters.posContains;
        }

        if (requestParameters.posDoesNotContain !== undefined) {
            queryParameters['pos.doesNotContain'] = requestParameters.posDoesNotContain;
        }

        if (requestParameters.posEquals !== undefined) {
            queryParameters['pos.equals'] = requestParameters.posEquals;
        }

        if (requestParameters.posNotEquals !== undefined) {
            queryParameters['pos.notEquals'] = requestParameters.posNotEquals;
        }

        if (requestParameters.posSpecified !== undefined) {
            queryParameters['pos.specified'] = requestParameters.posSpecified;
        }

        if (requestParameters.posIn) {
            queryParameters['pos.in'] = requestParameters.posIn;
        }

        if (requestParameters.posNotIn) {
            queryParameters['pos.notIn'] = requestParameters.posNotIn;
        }

        if (requestParameters.numberDriverContains !== undefined) {
            queryParameters['numberDriver.contains'] = requestParameters.numberDriverContains;
        }

        if (requestParameters.numberDriverDoesNotContain !== undefined) {
            queryParameters['numberDriver.doesNotContain'] = requestParameters.numberDriverDoesNotContain;
        }

        if (requestParameters.numberDriverEquals !== undefined) {
            queryParameters['numberDriver.equals'] = requestParameters.numberDriverEquals;
        }

        if (requestParameters.numberDriverNotEquals !== undefined) {
            queryParameters['numberDriver.notEquals'] = requestParameters.numberDriverNotEquals;
        }

        if (requestParameters.numberDriverSpecified !== undefined) {
            queryParameters['numberDriver.specified'] = requestParameters.numberDriverSpecified;
        }

        if (requestParameters.numberDriverIn) {
            queryParameters['numberDriver.in'] = requestParameters.numberDriverIn;
        }

        if (requestParameters.numberDriverNotIn) {
            queryParameters['numberDriver.notIn'] = requestParameters.numberDriverNotIn;
        }

        if (requestParameters.nameDriverContains !== undefined) {
            queryParameters['nameDriver.contains'] = requestParameters.nameDriverContains;
        }

        if (requestParameters.nameDriverDoesNotContain !== undefined) {
            queryParameters['nameDriver.doesNotContain'] = requestParameters.nameDriverDoesNotContain;
        }

        if (requestParameters.nameDriverEquals !== undefined) {
            queryParameters['nameDriver.equals'] = requestParameters.nameDriverEquals;
        }

        if (requestParameters.nameDriverNotEquals !== undefined) {
            queryParameters['nameDriver.notEquals'] = requestParameters.nameDriverNotEquals;
        }

        if (requestParameters.nameDriverSpecified !== undefined) {
            queryParameters['nameDriver.specified'] = requestParameters.nameDriverSpecified;
        }

        if (requestParameters.nameDriverIn) {
            queryParameters['nameDriver.in'] = requestParameters.nameDriverIn;
        }

        if (requestParameters.nameDriverNotIn) {
            queryParameters['nameDriver.notIn'] = requestParameters.nameDriverNotIn;
        }

        if (requestParameters.nameTeamContains !== undefined) {
            queryParameters['nameTeam.contains'] = requestParameters.nameTeamContains;
        }

        if (requestParameters.nameTeamDoesNotContain !== undefined) {
            queryParameters['nameTeam.doesNotContain'] = requestParameters.nameTeamDoesNotContain;
        }

        if (requestParameters.nameTeamEquals !== undefined) {
            queryParameters['nameTeam.equals'] = requestParameters.nameTeamEquals;
        }

        if (requestParameters.nameTeamNotEquals !== undefined) {
            queryParameters['nameTeam.notEquals'] = requestParameters.nameTeamNotEquals;
        }

        if (requestParameters.nameTeamSpecified !== undefined) {
            queryParameters['nameTeam.specified'] = requestParameters.nameTeamSpecified;
        }

        if (requestParameters.nameTeamIn) {
            queryParameters['nameTeam.in'] = requestParameters.nameTeamIn;
        }

        if (requestParameters.nameTeamNotIn) {
            queryParameters['nameTeam.notIn'] = requestParameters.nameTeamNotIn;
        }

        if (requestParameters.bestLapGreaterThan !== undefined) {
            queryParameters['bestLap.greaterThan'] = (requestParameters.bestLapGreaterThan as any).toISOString();
        }

        if (requestParameters.bestLapLessThan !== undefined) {
            queryParameters['bestLap.lessThan'] = (requestParameters.bestLapLessThan as any).toISOString();
        }

        if (requestParameters.bestLapGreaterThanOrEqual !== undefined) {
            queryParameters['bestLap.greaterThanOrEqual'] = (requestParameters.bestLapGreaterThanOrEqual as any).toISOString();
        }

        if (requestParameters.bestLapLessThanOrEqual !== undefined) {
            queryParameters['bestLap.lessThanOrEqual'] = (requestParameters.bestLapLessThanOrEqual as any).toISOString();
        }

        if (requestParameters.bestLapEquals !== undefined) {
            queryParameters['bestLap.equals'] = (requestParameters.bestLapEquals as any).toISOString();
        }

        if (requestParameters.bestLapNotEquals !== undefined) {
            queryParameters['bestLap.notEquals'] = (requestParameters.bestLapNotEquals as any).toISOString();
        }

        if (requestParameters.bestLapSpecified !== undefined) {
            queryParameters['bestLap.specified'] = requestParameters.bestLapSpecified;
        }

        if (requestParameters.bestLapIn) {
            queryParameters['bestLap.in'] = requestParameters.bestLapIn;
        }

        if (requestParameters.bestLapNotIn) {
            queryParameters['bestLap.notIn'] = requestParameters.bestLapNotIn;
        }

        if (requestParameters.raceTypeEquals !== undefined) {
            queryParameters['raceType.equals'] = requestParameters.raceTypeEquals;
        }

        if (requestParameters.raceTypeNotEquals !== undefined) {
            queryParameters['raceType.notEquals'] = requestParameters.raceTypeNotEquals;
        }

        if (requestParameters.raceTypeSpecified !== undefined) {
            queryParameters['raceType.specified'] = requestParameters.raceTypeSpecified;
        }

        if (requestParameters.raceTypeIn) {
            queryParameters['raceType.in'] = requestParameters.raceTypeIn;
        }

        if (requestParameters.raceTypeNotIn) {
            queryParameters['raceType.notIn'] = requestParameters.raceTypeNotIn;
        }

        if (requestParameters.granPrixIdGreaterThan !== undefined) {
            queryParameters['granPrixId.greaterThan'] = requestParameters.granPrixIdGreaterThan;
        }

        if (requestParameters.granPrixIdLessThan !== undefined) {
            queryParameters['granPrixId.lessThan'] = requestParameters.granPrixIdLessThan;
        }

        if (requestParameters.granPrixIdGreaterThanOrEqual !== undefined) {
            queryParameters['granPrixId.greaterThanOrEqual'] = requestParameters.granPrixIdGreaterThanOrEqual;
        }

        if (requestParameters.granPrixIdLessThanOrEqual !== undefined) {
            queryParameters['granPrixId.lessThanOrEqual'] = requestParameters.granPrixIdLessThanOrEqual;
        }

        if (requestParameters.granPrixIdEquals !== undefined) {
            queryParameters['granPrixId.equals'] = requestParameters.granPrixIdEquals;
        }

        if (requestParameters.granPrixIdNotEquals !== undefined) {
            queryParameters['granPrixId.notEquals'] = requestParameters.granPrixIdNotEquals;
        }

        if (requestParameters.granPrixIdSpecified !== undefined) {
            queryParameters['granPrixId.specified'] = requestParameters.granPrixIdSpecified;
        }

        if (requestParameters.granPrixIdIn) {
            queryParameters['granPrixId.in'] = requestParameters.granPrixIdIn;
        }

        if (requestParameters.granPrixIdNotIn) {
            queryParameters['granPrixId.notIn'] = requestParameters.granPrixIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/starting-grids/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async countStartingGrids(requestParameters: CountStartingGridsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.countStartingGridsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createStartingGridRaw(requestParameters: CreateStartingGridRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StartingGrid>> {
        if (requestParameters.startingGrid === null || requestParameters.startingGrid === undefined) {
            throw new runtime.RequiredError('startingGrid','Required parameter requestParameters.startingGrid was null or undefined when calling createStartingGrid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/starting-grids`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartingGridToJSON(requestParameters.startingGrid),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StartingGridFromJSON(jsonValue));
    }

    /**
     */
    async createStartingGrid(requestParameters: CreateStartingGridRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StartingGrid> {
        const response = await this.createStartingGridRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteStartingGridRaw(requestParameters: DeleteStartingGridRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStartingGrid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/starting-grids/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteStartingGrid(requestParameters: DeleteStartingGridRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStartingGridRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllStartingGridsRaw(requestParameters: GetAllStartingGridsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StartingGrid>>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.posContains !== undefined) {
            queryParameters['pos.contains'] = requestParameters.posContains;
        }

        if (requestParameters.posDoesNotContain !== undefined) {
            queryParameters['pos.doesNotContain'] = requestParameters.posDoesNotContain;
        }

        if (requestParameters.posEquals !== undefined) {
            queryParameters['pos.equals'] = requestParameters.posEquals;
        }

        if (requestParameters.posNotEquals !== undefined) {
            queryParameters['pos.notEquals'] = requestParameters.posNotEquals;
        }

        if (requestParameters.posSpecified !== undefined) {
            queryParameters['pos.specified'] = requestParameters.posSpecified;
        }

        if (requestParameters.posIn) {
            queryParameters['pos.in'] = requestParameters.posIn;
        }

        if (requestParameters.posNotIn) {
            queryParameters['pos.notIn'] = requestParameters.posNotIn;
        }

        if (requestParameters.numberDriverContains !== undefined) {
            queryParameters['numberDriver.contains'] = requestParameters.numberDriverContains;
        }

        if (requestParameters.numberDriverDoesNotContain !== undefined) {
            queryParameters['numberDriver.doesNotContain'] = requestParameters.numberDriverDoesNotContain;
        }

        if (requestParameters.numberDriverEquals !== undefined) {
            queryParameters['numberDriver.equals'] = requestParameters.numberDriverEquals;
        }

        if (requestParameters.numberDriverNotEquals !== undefined) {
            queryParameters['numberDriver.notEquals'] = requestParameters.numberDriverNotEquals;
        }

        if (requestParameters.numberDriverSpecified !== undefined) {
            queryParameters['numberDriver.specified'] = requestParameters.numberDriverSpecified;
        }

        if (requestParameters.numberDriverIn) {
            queryParameters['numberDriver.in'] = requestParameters.numberDriverIn;
        }

        if (requestParameters.numberDriverNotIn) {
            queryParameters['numberDriver.notIn'] = requestParameters.numberDriverNotIn;
        }

        if (requestParameters.nameDriverContains !== undefined) {
            queryParameters['nameDriver.contains'] = requestParameters.nameDriverContains;
        }

        if (requestParameters.nameDriverDoesNotContain !== undefined) {
            queryParameters['nameDriver.doesNotContain'] = requestParameters.nameDriverDoesNotContain;
        }

        if (requestParameters.nameDriverEquals !== undefined) {
            queryParameters['nameDriver.equals'] = requestParameters.nameDriverEquals;
        }

        if (requestParameters.nameDriverNotEquals !== undefined) {
            queryParameters['nameDriver.notEquals'] = requestParameters.nameDriverNotEquals;
        }

        if (requestParameters.nameDriverSpecified !== undefined) {
            queryParameters['nameDriver.specified'] = requestParameters.nameDriverSpecified;
        }

        if (requestParameters.nameDriverIn) {
            queryParameters['nameDriver.in'] = requestParameters.nameDriverIn;
        }

        if (requestParameters.nameDriverNotIn) {
            queryParameters['nameDriver.notIn'] = requestParameters.nameDriverNotIn;
        }

        if (requestParameters.nameTeamContains !== undefined) {
            queryParameters['nameTeam.contains'] = requestParameters.nameTeamContains;
        }

        if (requestParameters.nameTeamDoesNotContain !== undefined) {
            queryParameters['nameTeam.doesNotContain'] = requestParameters.nameTeamDoesNotContain;
        }

        if (requestParameters.nameTeamEquals !== undefined) {
            queryParameters['nameTeam.equals'] = requestParameters.nameTeamEquals;
        }

        if (requestParameters.nameTeamNotEquals !== undefined) {
            queryParameters['nameTeam.notEquals'] = requestParameters.nameTeamNotEquals;
        }

        if (requestParameters.nameTeamSpecified !== undefined) {
            queryParameters['nameTeam.specified'] = requestParameters.nameTeamSpecified;
        }

        if (requestParameters.nameTeamIn) {
            queryParameters['nameTeam.in'] = requestParameters.nameTeamIn;
        }

        if (requestParameters.nameTeamNotIn) {
            queryParameters['nameTeam.notIn'] = requestParameters.nameTeamNotIn;
        }

        if (requestParameters.bestLapGreaterThan !== undefined) {
            queryParameters['bestLap.greaterThan'] = (requestParameters.bestLapGreaterThan as any).toISOString();
        }

        if (requestParameters.bestLapLessThan !== undefined) {
            queryParameters['bestLap.lessThan'] = (requestParameters.bestLapLessThan as any).toISOString();
        }

        if (requestParameters.bestLapGreaterThanOrEqual !== undefined) {
            queryParameters['bestLap.greaterThanOrEqual'] = (requestParameters.bestLapGreaterThanOrEqual as any).toISOString();
        }

        if (requestParameters.bestLapLessThanOrEqual !== undefined) {
            queryParameters['bestLap.lessThanOrEqual'] = (requestParameters.bestLapLessThanOrEqual as any).toISOString();
        }

        if (requestParameters.bestLapEquals !== undefined) {
            queryParameters['bestLap.equals'] = (requestParameters.bestLapEquals as any).toISOString();
        }

        if (requestParameters.bestLapNotEquals !== undefined) {
            queryParameters['bestLap.notEquals'] = (requestParameters.bestLapNotEquals as any).toISOString();
        }

        if (requestParameters.bestLapSpecified !== undefined) {
            queryParameters['bestLap.specified'] = requestParameters.bestLapSpecified;
        }

        if (requestParameters.bestLapIn) {
            queryParameters['bestLap.in'] = requestParameters.bestLapIn;
        }

        if (requestParameters.bestLapNotIn) {
            queryParameters['bestLap.notIn'] = requestParameters.bestLapNotIn;
        }

        if (requestParameters.raceTypeEquals !== undefined) {
            queryParameters['raceType.equals'] = requestParameters.raceTypeEquals;
        }

        if (requestParameters.raceTypeNotEquals !== undefined) {
            queryParameters['raceType.notEquals'] = requestParameters.raceTypeNotEquals;
        }

        if (requestParameters.raceTypeSpecified !== undefined) {
            queryParameters['raceType.specified'] = requestParameters.raceTypeSpecified;
        }

        if (requestParameters.raceTypeIn) {
            queryParameters['raceType.in'] = requestParameters.raceTypeIn;
        }

        if (requestParameters.raceTypeNotIn) {
            queryParameters['raceType.notIn'] = requestParameters.raceTypeNotIn;
        }

        if (requestParameters.granPrixIdGreaterThan !== undefined) {
            queryParameters['granPrixId.greaterThan'] = requestParameters.granPrixIdGreaterThan;
        }

        if (requestParameters.granPrixIdLessThan !== undefined) {
            queryParameters['granPrixId.lessThan'] = requestParameters.granPrixIdLessThan;
        }

        if (requestParameters.granPrixIdGreaterThanOrEqual !== undefined) {
            queryParameters['granPrixId.greaterThanOrEqual'] = requestParameters.granPrixIdGreaterThanOrEqual;
        }

        if (requestParameters.granPrixIdLessThanOrEqual !== undefined) {
            queryParameters['granPrixId.lessThanOrEqual'] = requestParameters.granPrixIdLessThanOrEqual;
        }

        if (requestParameters.granPrixIdEquals !== undefined) {
            queryParameters['granPrixId.equals'] = requestParameters.granPrixIdEquals;
        }

        if (requestParameters.granPrixIdNotEquals !== undefined) {
            queryParameters['granPrixId.notEquals'] = requestParameters.granPrixIdNotEquals;
        }

        if (requestParameters.granPrixIdSpecified !== undefined) {
            queryParameters['granPrixId.specified'] = requestParameters.granPrixIdSpecified;
        }

        if (requestParameters.granPrixIdIn) {
            queryParameters['granPrixId.in'] = requestParameters.granPrixIdIn;
        }

        if (requestParameters.granPrixIdNotIn) {
            queryParameters['granPrixId.notIn'] = requestParameters.granPrixIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/starting-grids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StartingGridFromJSON));
    }

    /**
     */
    async getAllStartingGrids(requestParameters: GetAllStartingGridsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StartingGrid>> {
        const response = await this.getAllStartingGridsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getStartingGridRaw(requestParameters: GetStartingGridRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StartingGrid>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStartingGrid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/starting-grids/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StartingGridFromJSON(jsonValue));
    }

    /**
     */
    async getStartingGrid(requestParameters: GetStartingGridRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StartingGrid> {
        const response = await this.getStartingGridRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async partialUpdateStartingGridRaw(requestParameters: PartialUpdateStartingGridRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StartingGrid>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateStartingGrid.');
        }

        if (requestParameters.startingGrid === null || requestParameters.startingGrid === undefined) {
            throw new runtime.RequiredError('startingGrid','Required parameter requestParameters.startingGrid was null or undefined when calling partialUpdateStartingGrid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/starting-grids/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StartingGridToJSON(requestParameters.startingGrid),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StartingGridFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateStartingGrid(requestParameters: PartialUpdateStartingGridRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StartingGrid> {
        const response = await this.partialUpdateStartingGridRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateStartingGridRaw(requestParameters: UpdateStartingGridRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StartingGrid>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStartingGrid.');
        }

        if (requestParameters.startingGrid === null || requestParameters.startingGrid === undefined) {
            throw new runtime.RequiredError('startingGrid','Required parameter requestParameters.startingGrid was null or undefined when calling updateStartingGrid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/starting-grids/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StartingGridToJSON(requestParameters.startingGrid),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StartingGridFromJSON(jsonValue));
    }

    /**
     */
    async updateStartingGrid(requestParameters: UpdateStartingGridRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StartingGrid> {
        const response = await this.updateStartingGridRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CountStartingGridsRaceTypeEqualsEnum = {
    Sprint: 'SPRINT',
    Race: 'RACE'
} as const;
export type CountStartingGridsRaceTypeEqualsEnum = typeof CountStartingGridsRaceTypeEqualsEnum[keyof typeof CountStartingGridsRaceTypeEqualsEnum];
/**
 * @export
 */
export const CountStartingGridsRaceTypeNotEqualsEnum = {
    Sprint: 'SPRINT',
    Race: 'RACE'
} as const;
export type CountStartingGridsRaceTypeNotEqualsEnum = typeof CountStartingGridsRaceTypeNotEqualsEnum[keyof typeof CountStartingGridsRaceTypeNotEqualsEnum];
/**
 * @export
 */
export const CountStartingGridsRaceTypeInEnum = {
    Sprint: 'SPRINT',
    Race: 'RACE'
} as const;
export type CountStartingGridsRaceTypeInEnum = typeof CountStartingGridsRaceTypeInEnum[keyof typeof CountStartingGridsRaceTypeInEnum];
/**
 * @export
 */
export const CountStartingGridsRaceTypeNotInEnum = {
    Sprint: 'SPRINT',
    Race: 'RACE'
} as const;
export type CountStartingGridsRaceTypeNotInEnum = typeof CountStartingGridsRaceTypeNotInEnum[keyof typeof CountStartingGridsRaceTypeNotInEnum];
/**
 * @export
 */
export const GetAllStartingGridsRaceTypeEqualsEnum = {
    Sprint: 'SPRINT',
    Race: 'RACE'
} as const;
export type GetAllStartingGridsRaceTypeEqualsEnum = typeof GetAllStartingGridsRaceTypeEqualsEnum[keyof typeof GetAllStartingGridsRaceTypeEqualsEnum];
/**
 * @export
 */
export const GetAllStartingGridsRaceTypeNotEqualsEnum = {
    Sprint: 'SPRINT',
    Race: 'RACE'
} as const;
export type GetAllStartingGridsRaceTypeNotEqualsEnum = typeof GetAllStartingGridsRaceTypeNotEqualsEnum[keyof typeof GetAllStartingGridsRaceTypeNotEqualsEnum];
/**
 * @export
 */
export const GetAllStartingGridsRaceTypeInEnum = {
    Sprint: 'SPRINT',
    Race: 'RACE'
} as const;
export type GetAllStartingGridsRaceTypeInEnum = typeof GetAllStartingGridsRaceTypeInEnum[keyof typeof GetAllStartingGridsRaceTypeInEnum];
/**
 * @export
 */
export const GetAllStartingGridsRaceTypeNotInEnum = {
    Sprint: 'SPRINT',
    Race: 'RACE'
} as const;
export type GetAllStartingGridsRaceTypeNotInEnum = typeof GetAllStartingGridsRaceTypeNotInEnum[keyof typeof GetAllStartingGridsRaceTypeNotInEnum];
