/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Team,
} from '../models';
import {
    TeamFromJSON,
    TeamToJSON,
} from '../models';

export interface CountTeamsRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    nameContains?: string;
    nameDoesNotContain?: string;
    nameEquals?: string;
    nameNotEquals?: string;
    nameSpecified?: boolean;
    nameIn?: Array<string>;
    nameNotIn?: Array<string>;
    priceContains?: string;
    priceDoesNotContain?: string;
    priceEquals?: string;
    priceNotEquals?: string;
    priceSpecified?: boolean;
    priceIn?: Array<string>;
    priceNotIn?: Array<string>;
    formationIdGreaterThan?: number;
    formationIdLessThan?: number;
    formationIdGreaterThanOrEqual?: number;
    formationIdLessThanOrEqual?: number;
    formationIdEquals?: number;
    formationIdNotEquals?: number;
    formationIdSpecified?: boolean;
    formationIdIn?: Array<number>;
    formationIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface CreateTeamRequest {
    team: Team;
}

export interface DeleteTeamRequest {
    id: number;
}

export interface GetAllTeamsRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    nameContains?: string;
    nameDoesNotContain?: string;
    nameEquals?: string;
    nameNotEquals?: string;
    nameSpecified?: boolean;
    nameIn?: Array<string>;
    nameNotIn?: Array<string>;
    priceContains?: string;
    priceDoesNotContain?: string;
    priceEquals?: string;
    priceNotEquals?: string;
    priceSpecified?: boolean;
    priceIn?: Array<string>;
    priceNotIn?: Array<string>;
    formationIdGreaterThan?: number;
    formationIdLessThan?: number;
    formationIdGreaterThanOrEqual?: number;
    formationIdLessThanOrEqual?: number;
    formationIdEquals?: number;
    formationIdNotEquals?: number;
    formationIdSpecified?: boolean;
    formationIdIn?: Array<number>;
    formationIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface GetTeamRequest {
    id: number;
}

export interface PartialUpdateTeamRequest {
    id: number;
    team: Team;
}

export interface UpdateTeamRequest {
    id: number;
    team: Team;
}

/**
 * 
 */
export class TeamResourceApi extends runtime.BaseAPI {

    /**
     */
    async countTeamsRaw(requestParameters: CountTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.nameContains !== undefined) {
            queryParameters['name.contains'] = requestParameters.nameContains;
        }

        if (requestParameters.nameDoesNotContain !== undefined) {
            queryParameters['name.doesNotContain'] = requestParameters.nameDoesNotContain;
        }

        if (requestParameters.nameEquals !== undefined) {
            queryParameters['name.equals'] = requestParameters.nameEquals;
        }

        if (requestParameters.nameNotEquals !== undefined) {
            queryParameters['name.notEquals'] = requestParameters.nameNotEquals;
        }

        if (requestParameters.nameSpecified !== undefined) {
            queryParameters['name.specified'] = requestParameters.nameSpecified;
        }

        if (requestParameters.nameIn) {
            queryParameters['name.in'] = requestParameters.nameIn;
        }

        if (requestParameters.nameNotIn) {
            queryParameters['name.notIn'] = requestParameters.nameNotIn;
        }

        if (requestParameters.priceContains !== undefined) {
            queryParameters['price.contains'] = requestParameters.priceContains;
        }

        if (requestParameters.priceDoesNotContain !== undefined) {
            queryParameters['price.doesNotContain'] = requestParameters.priceDoesNotContain;
        }

        if (requestParameters.priceEquals !== undefined) {
            queryParameters['price.equals'] = requestParameters.priceEquals;
        }

        if (requestParameters.priceNotEquals !== undefined) {
            queryParameters['price.notEquals'] = requestParameters.priceNotEquals;
        }

        if (requestParameters.priceSpecified !== undefined) {
            queryParameters['price.specified'] = requestParameters.priceSpecified;
        }

        if (requestParameters.priceIn) {
            queryParameters['price.in'] = requestParameters.priceIn;
        }

        if (requestParameters.priceNotIn) {
            queryParameters['price.notIn'] = requestParameters.priceNotIn;
        }

        if (requestParameters.formationIdGreaterThan !== undefined) {
            queryParameters['formationId.greaterThan'] = requestParameters.formationIdGreaterThan;
        }

        if (requestParameters.formationIdLessThan !== undefined) {
            queryParameters['formationId.lessThan'] = requestParameters.formationIdLessThan;
        }

        if (requestParameters.formationIdGreaterThanOrEqual !== undefined) {
            queryParameters['formationId.greaterThanOrEqual'] = requestParameters.formationIdGreaterThanOrEqual;
        }

        if (requestParameters.formationIdLessThanOrEqual !== undefined) {
            queryParameters['formationId.lessThanOrEqual'] = requestParameters.formationIdLessThanOrEqual;
        }

        if (requestParameters.formationIdEquals !== undefined) {
            queryParameters['formationId.equals'] = requestParameters.formationIdEquals;
        }

        if (requestParameters.formationIdNotEquals !== undefined) {
            queryParameters['formationId.notEquals'] = requestParameters.formationIdNotEquals;
        }

        if (requestParameters.formationIdSpecified !== undefined) {
            queryParameters['formationId.specified'] = requestParameters.formationIdSpecified;
        }

        if (requestParameters.formationIdIn) {
            queryParameters['formationId.in'] = requestParameters.formationIdIn;
        }

        if (requestParameters.formationIdNotIn) {
            queryParameters['formationId.notIn'] = requestParameters.formationIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async countTeams(requestParameters: CountTeamsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.countTeamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createTeamRaw(requestParameters: CreateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Team>> {
        if (requestParameters.team === null || requestParameters.team === undefined) {
            throw new runtime.RequiredError('team','Required parameter requestParameters.team was null or undefined when calling createTeam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/teams`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeamToJSON(requestParameters.team),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     */
    async createTeam(requestParameters: CreateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Team> {
        const response = await this.createTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTeamRaw(requestParameters: DeleteTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTeam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTeam(requestParameters: DeleteTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTeamRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllTeamsRaw(requestParameters: GetAllTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Team>>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.nameContains !== undefined) {
            queryParameters['name.contains'] = requestParameters.nameContains;
        }

        if (requestParameters.nameDoesNotContain !== undefined) {
            queryParameters['name.doesNotContain'] = requestParameters.nameDoesNotContain;
        }

        if (requestParameters.nameEquals !== undefined) {
            queryParameters['name.equals'] = requestParameters.nameEquals;
        }

        if (requestParameters.nameNotEquals !== undefined) {
            queryParameters['name.notEquals'] = requestParameters.nameNotEquals;
        }

        if (requestParameters.nameSpecified !== undefined) {
            queryParameters['name.specified'] = requestParameters.nameSpecified;
        }

        if (requestParameters.nameIn) {
            queryParameters['name.in'] = requestParameters.nameIn;
        }

        if (requestParameters.nameNotIn) {
            queryParameters['name.notIn'] = requestParameters.nameNotIn;
        }

        if (requestParameters.priceContains !== undefined) {
            queryParameters['price.contains'] = requestParameters.priceContains;
        }

        if (requestParameters.priceDoesNotContain !== undefined) {
            queryParameters['price.doesNotContain'] = requestParameters.priceDoesNotContain;
        }

        if (requestParameters.priceEquals !== undefined) {
            queryParameters['price.equals'] = requestParameters.priceEquals;
        }

        if (requestParameters.priceNotEquals !== undefined) {
            queryParameters['price.notEquals'] = requestParameters.priceNotEquals;
        }

        if (requestParameters.priceSpecified !== undefined) {
            queryParameters['price.specified'] = requestParameters.priceSpecified;
        }

        if (requestParameters.priceIn) {
            queryParameters['price.in'] = requestParameters.priceIn;
        }

        if (requestParameters.priceNotIn) {
            queryParameters['price.notIn'] = requestParameters.priceNotIn;
        }

        if (requestParameters.formationIdGreaterThan !== undefined) {
            queryParameters['formationId.greaterThan'] = requestParameters.formationIdGreaterThan;
        }

        if (requestParameters.formationIdLessThan !== undefined) {
            queryParameters['formationId.lessThan'] = requestParameters.formationIdLessThan;
        }

        if (requestParameters.formationIdGreaterThanOrEqual !== undefined) {
            queryParameters['formationId.greaterThanOrEqual'] = requestParameters.formationIdGreaterThanOrEqual;
        }

        if (requestParameters.formationIdLessThanOrEqual !== undefined) {
            queryParameters['formationId.lessThanOrEqual'] = requestParameters.formationIdLessThanOrEqual;
        }

        if (requestParameters.formationIdEquals !== undefined) {
            queryParameters['formationId.equals'] = requestParameters.formationIdEquals;
        }

        if (requestParameters.formationIdNotEquals !== undefined) {
            queryParameters['formationId.notEquals'] = requestParameters.formationIdNotEquals;
        }

        if (requestParameters.formationIdSpecified !== undefined) {
            queryParameters['formationId.specified'] = requestParameters.formationIdSpecified;
        }

        if (requestParameters.formationIdIn) {
            queryParameters['formationId.in'] = requestParameters.formationIdIn;
        }

        if (requestParameters.formationIdNotIn) {
            queryParameters['formationId.notIn'] = requestParameters.formationIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamFromJSON));
    }

    /**
     */
    async getAllTeams(requestParameters: GetAllTeamsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Team>> {
        const response = await this.getAllTeamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTeamRaw(requestParameters: GetTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Team>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTeam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/teams/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     */
    async getTeam(requestParameters: GetTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Team> {
        const response = await this.getTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async partialUpdateTeamRaw(requestParameters: PartialUpdateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Team>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateTeam.');
        }

        if (requestParameters.team === null || requestParameters.team === undefined) {
            throw new runtime.RequiredError('team','Required parameter requestParameters.team was null or undefined when calling partialUpdateTeam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/teams/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TeamToJSON(requestParameters.team),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateTeam(requestParameters: PartialUpdateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Team> {
        const response = await this.partialUpdateTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTeamRaw(requestParameters: UpdateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Team>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTeam.');
        }

        if (requestParameters.team === null || requestParameters.team === undefined) {
            throw new runtime.RequiredError('team','Required parameter requestParameters.team was null or undefined when calling updateTeam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/teams/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TeamToJSON(requestParameters.team),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     */
    async updateTeam(requestParameters: UpdateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Team> {
        const response = await this.updateTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
