/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RaceResult,
} from '../models';
import {
    RaceResultFromJSON,
    RaceResultToJSON,
} from '../models';

export interface CountRaceResultsRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    posContains?: string;
    posDoesNotContain?: string;
    posEquals?: string;
    posNotEquals?: string;
    posSpecified?: boolean;
    posIn?: Array<string>;
    posNotIn?: Array<string>;
    numberDriverContains?: string;
    numberDriverDoesNotContain?: string;
    numberDriverEquals?: string;
    numberDriverNotEquals?: string;
    numberDriverSpecified?: boolean;
    numberDriverIn?: Array<string>;
    numberDriverNotIn?: Array<string>;
    nameDriverContains?: string;
    nameDriverDoesNotContain?: string;
    nameDriverEquals?: string;
    nameDriverNotEquals?: string;
    nameDriverSpecified?: boolean;
    nameDriverIn?: Array<string>;
    nameDriverNotIn?: Array<string>;
    nameTeamContains?: string;
    nameTeamDoesNotContain?: string;
    nameTeamEquals?: string;
    nameTeamNotEquals?: string;
    nameTeamSpecified?: boolean;
    nameTeamIn?: Array<string>;
    nameTeamNotIn?: Array<string>;
    numberLapsContains?: string;
    numberLapsDoesNotContain?: string;
    numberLapsEquals?: string;
    numberLapsNotEquals?: string;
    numberLapsSpecified?: boolean;
    numberLapsIn?: Array<string>;
    numberLapsNotIn?: Array<string>;
    timeAllRaceContains?: string;
    timeAllRaceDoesNotContain?: string;
    timeAllRaceEquals?: string;
    timeAllRaceNotEquals?: string;
    timeAllRaceSpecified?: boolean;
    timeAllRaceIn?: Array<string>;
    timeAllRaceNotIn?: Array<string>;
    pointsGreaterThan?: number;
    pointsLessThan?: number;
    pointsGreaterThanOrEqual?: number;
    pointsLessThanOrEqual?: number;
    pointsEquals?: number;
    pointsNotEquals?: number;
    pointsSpecified?: boolean;
    pointsIn?: Array<number>;
    pointsNotIn?: Array<number>;
    raceTypeEquals?: CountRaceResultsRaceTypeEqualsEnum;
    raceTypeNotEquals?: CountRaceResultsRaceTypeNotEqualsEnum;
    raceTypeSpecified?: boolean;
    raceTypeIn?: Array<CountRaceResultsRaceTypeInEnum>;
    raceTypeNotIn?: Array<CountRaceResultsRaceTypeNotInEnum>;
    granPrixIdGreaterThan?: number;
    granPrixIdLessThan?: number;
    granPrixIdGreaterThanOrEqual?: number;
    granPrixIdLessThanOrEqual?: number;
    granPrixIdEquals?: number;
    granPrixIdNotEquals?: number;
    granPrixIdSpecified?: boolean;
    granPrixIdIn?: Array<number>;
    granPrixIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface CreateRaceResultRequest {
    raceResult: RaceResult;
}

export interface DeleteRaceResultRequest {
    id: number;
}

export interface GetAllRaceResultsRequest {
    idGreaterThan?: number;
    idLessThan?: number;
    idGreaterThanOrEqual?: number;
    idLessThanOrEqual?: number;
    idEquals?: number;
    idNotEquals?: number;
    idSpecified?: boolean;
    idIn?: Array<number>;
    idNotIn?: Array<number>;
    posContains?: string;
    posDoesNotContain?: string;
    posEquals?: string;
    posNotEquals?: string;
    posSpecified?: boolean;
    posIn?: Array<string>;
    posNotIn?: Array<string>;
    numberDriverContains?: string;
    numberDriverDoesNotContain?: string;
    numberDriverEquals?: string;
    numberDriverNotEquals?: string;
    numberDriverSpecified?: boolean;
    numberDriverIn?: Array<string>;
    numberDriverNotIn?: Array<string>;
    nameDriverContains?: string;
    nameDriverDoesNotContain?: string;
    nameDriverEquals?: string;
    nameDriverNotEquals?: string;
    nameDriverSpecified?: boolean;
    nameDriverIn?: Array<string>;
    nameDriverNotIn?: Array<string>;
    nameTeamContains?: string;
    nameTeamDoesNotContain?: string;
    nameTeamEquals?: string;
    nameTeamNotEquals?: string;
    nameTeamSpecified?: boolean;
    nameTeamIn?: Array<string>;
    nameTeamNotIn?: Array<string>;
    numberLapsContains?: string;
    numberLapsDoesNotContain?: string;
    numberLapsEquals?: string;
    numberLapsNotEquals?: string;
    numberLapsSpecified?: boolean;
    numberLapsIn?: Array<string>;
    numberLapsNotIn?: Array<string>;
    timeAllRaceContains?: string;
    timeAllRaceDoesNotContain?: string;
    timeAllRaceEquals?: string;
    timeAllRaceNotEquals?: string;
    timeAllRaceSpecified?: boolean;
    timeAllRaceIn?: Array<string>;
    timeAllRaceNotIn?: Array<string>;
    pointsGreaterThan?: number;
    pointsLessThan?: number;
    pointsGreaterThanOrEqual?: number;
    pointsLessThanOrEqual?: number;
    pointsEquals?: number;
    pointsNotEquals?: number;
    pointsSpecified?: boolean;
    pointsIn?: Array<number>;
    pointsNotIn?: Array<number>;
    raceTypeEquals?: GetAllRaceResultsRaceTypeEqualsEnum;
    raceTypeNotEquals?: GetAllRaceResultsRaceTypeNotEqualsEnum;
    raceTypeSpecified?: boolean;
    raceTypeIn?: Array<GetAllRaceResultsRaceTypeInEnum>;
    raceTypeNotIn?: Array<GetAllRaceResultsRaceTypeNotInEnum>;
    granPrixIdGreaterThan?: number;
    granPrixIdLessThan?: number;
    granPrixIdGreaterThanOrEqual?: number;
    granPrixIdLessThanOrEqual?: number;
    granPrixIdEquals?: number;
    granPrixIdNotEquals?: number;
    granPrixIdSpecified?: boolean;
    granPrixIdIn?: Array<number>;
    granPrixIdNotIn?: Array<number>;
    distinct?: boolean;
}

export interface GetRaceResultRequest {
    id: number;
}

export interface PartialUpdateRaceResultRequest {
    id: number;
    raceResult: RaceResult;
}

export interface UpdateRaceResultRequest {
    id: number;
    raceResult: RaceResult;
}

/**
 * 
 */
export class RaceResultResourceApi extends runtime.BaseAPI {

    /**
     */
    async countRaceResultsRaw(requestParameters: CountRaceResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.posContains !== undefined) {
            queryParameters['pos.contains'] = requestParameters.posContains;
        }

        if (requestParameters.posDoesNotContain !== undefined) {
            queryParameters['pos.doesNotContain'] = requestParameters.posDoesNotContain;
        }

        if (requestParameters.posEquals !== undefined) {
            queryParameters['pos.equals'] = requestParameters.posEquals;
        }

        if (requestParameters.posNotEquals !== undefined) {
            queryParameters['pos.notEquals'] = requestParameters.posNotEquals;
        }

        if (requestParameters.posSpecified !== undefined) {
            queryParameters['pos.specified'] = requestParameters.posSpecified;
        }

        if (requestParameters.posIn) {
            queryParameters['pos.in'] = requestParameters.posIn;
        }

        if (requestParameters.posNotIn) {
            queryParameters['pos.notIn'] = requestParameters.posNotIn;
        }

        if (requestParameters.numberDriverContains !== undefined) {
            queryParameters['numberDriver.contains'] = requestParameters.numberDriverContains;
        }

        if (requestParameters.numberDriverDoesNotContain !== undefined) {
            queryParameters['numberDriver.doesNotContain'] = requestParameters.numberDriverDoesNotContain;
        }

        if (requestParameters.numberDriverEquals !== undefined) {
            queryParameters['numberDriver.equals'] = requestParameters.numberDriverEquals;
        }

        if (requestParameters.numberDriverNotEquals !== undefined) {
            queryParameters['numberDriver.notEquals'] = requestParameters.numberDriverNotEquals;
        }

        if (requestParameters.numberDriverSpecified !== undefined) {
            queryParameters['numberDriver.specified'] = requestParameters.numberDriverSpecified;
        }

        if (requestParameters.numberDriverIn) {
            queryParameters['numberDriver.in'] = requestParameters.numberDriverIn;
        }

        if (requestParameters.numberDriverNotIn) {
            queryParameters['numberDriver.notIn'] = requestParameters.numberDriverNotIn;
        }

        if (requestParameters.nameDriverContains !== undefined) {
            queryParameters['nameDriver.contains'] = requestParameters.nameDriverContains;
        }

        if (requestParameters.nameDriverDoesNotContain !== undefined) {
            queryParameters['nameDriver.doesNotContain'] = requestParameters.nameDriverDoesNotContain;
        }

        if (requestParameters.nameDriverEquals !== undefined) {
            queryParameters['nameDriver.equals'] = requestParameters.nameDriverEquals;
        }

        if (requestParameters.nameDriverNotEquals !== undefined) {
            queryParameters['nameDriver.notEquals'] = requestParameters.nameDriverNotEquals;
        }

        if (requestParameters.nameDriverSpecified !== undefined) {
            queryParameters['nameDriver.specified'] = requestParameters.nameDriverSpecified;
        }

        if (requestParameters.nameDriverIn) {
            queryParameters['nameDriver.in'] = requestParameters.nameDriverIn;
        }

        if (requestParameters.nameDriverNotIn) {
            queryParameters['nameDriver.notIn'] = requestParameters.nameDriverNotIn;
        }

        if (requestParameters.nameTeamContains !== undefined) {
            queryParameters['nameTeam.contains'] = requestParameters.nameTeamContains;
        }

        if (requestParameters.nameTeamDoesNotContain !== undefined) {
            queryParameters['nameTeam.doesNotContain'] = requestParameters.nameTeamDoesNotContain;
        }

        if (requestParameters.nameTeamEquals !== undefined) {
            queryParameters['nameTeam.equals'] = requestParameters.nameTeamEquals;
        }

        if (requestParameters.nameTeamNotEquals !== undefined) {
            queryParameters['nameTeam.notEquals'] = requestParameters.nameTeamNotEquals;
        }

        if (requestParameters.nameTeamSpecified !== undefined) {
            queryParameters['nameTeam.specified'] = requestParameters.nameTeamSpecified;
        }

        if (requestParameters.nameTeamIn) {
            queryParameters['nameTeam.in'] = requestParameters.nameTeamIn;
        }

        if (requestParameters.nameTeamNotIn) {
            queryParameters['nameTeam.notIn'] = requestParameters.nameTeamNotIn;
        }

        if (requestParameters.numberLapsContains !== undefined) {
            queryParameters['numberLaps.contains'] = requestParameters.numberLapsContains;
        }

        if (requestParameters.numberLapsDoesNotContain !== undefined) {
            queryParameters['numberLaps.doesNotContain'] = requestParameters.numberLapsDoesNotContain;
        }

        if (requestParameters.numberLapsEquals !== undefined) {
            queryParameters['numberLaps.equals'] = requestParameters.numberLapsEquals;
        }

        if (requestParameters.numberLapsNotEquals !== undefined) {
            queryParameters['numberLaps.notEquals'] = requestParameters.numberLapsNotEquals;
        }

        if (requestParameters.numberLapsSpecified !== undefined) {
            queryParameters['numberLaps.specified'] = requestParameters.numberLapsSpecified;
        }

        if (requestParameters.numberLapsIn) {
            queryParameters['numberLaps.in'] = requestParameters.numberLapsIn;
        }

        if (requestParameters.numberLapsNotIn) {
            queryParameters['numberLaps.notIn'] = requestParameters.numberLapsNotIn;
        }

        if (requestParameters.timeAllRaceContains !== undefined) {
            queryParameters['timeAllRace.contains'] = requestParameters.timeAllRaceContains;
        }

        if (requestParameters.timeAllRaceDoesNotContain !== undefined) {
            queryParameters['timeAllRace.doesNotContain'] = requestParameters.timeAllRaceDoesNotContain;
        }

        if (requestParameters.timeAllRaceEquals !== undefined) {
            queryParameters['timeAllRace.equals'] = requestParameters.timeAllRaceEquals;
        }

        if (requestParameters.timeAllRaceNotEquals !== undefined) {
            queryParameters['timeAllRace.notEquals'] = requestParameters.timeAllRaceNotEquals;
        }

        if (requestParameters.timeAllRaceSpecified !== undefined) {
            queryParameters['timeAllRace.specified'] = requestParameters.timeAllRaceSpecified;
        }

        if (requestParameters.timeAllRaceIn) {
            queryParameters['timeAllRace.in'] = requestParameters.timeAllRaceIn;
        }

        if (requestParameters.timeAllRaceNotIn) {
            queryParameters['timeAllRace.notIn'] = requestParameters.timeAllRaceNotIn;
        }

        if (requestParameters.pointsGreaterThan !== undefined) {
            queryParameters['points.greaterThan'] = requestParameters.pointsGreaterThan;
        }

        if (requestParameters.pointsLessThan !== undefined) {
            queryParameters['points.lessThan'] = requestParameters.pointsLessThan;
        }

        if (requestParameters.pointsGreaterThanOrEqual !== undefined) {
            queryParameters['points.greaterThanOrEqual'] = requestParameters.pointsGreaterThanOrEqual;
        }

        if (requestParameters.pointsLessThanOrEqual !== undefined) {
            queryParameters['points.lessThanOrEqual'] = requestParameters.pointsLessThanOrEqual;
        }

        if (requestParameters.pointsEquals !== undefined) {
            queryParameters['points.equals'] = requestParameters.pointsEquals;
        }

        if (requestParameters.pointsNotEquals !== undefined) {
            queryParameters['points.notEquals'] = requestParameters.pointsNotEquals;
        }

        if (requestParameters.pointsSpecified !== undefined) {
            queryParameters['points.specified'] = requestParameters.pointsSpecified;
        }

        if (requestParameters.pointsIn) {
            queryParameters['points.in'] = requestParameters.pointsIn;
        }

        if (requestParameters.pointsNotIn) {
            queryParameters['points.notIn'] = requestParameters.pointsNotIn;
        }

        if (requestParameters.raceTypeEquals !== undefined) {
            queryParameters['raceType.equals'] = requestParameters.raceTypeEquals;
        }

        if (requestParameters.raceTypeNotEquals !== undefined) {
            queryParameters['raceType.notEquals'] = requestParameters.raceTypeNotEquals;
        }

        if (requestParameters.raceTypeSpecified !== undefined) {
            queryParameters['raceType.specified'] = requestParameters.raceTypeSpecified;
        }

        if (requestParameters.raceTypeIn) {
            queryParameters['raceType.in'] = requestParameters.raceTypeIn;
        }

        if (requestParameters.raceTypeNotIn) {
            queryParameters['raceType.notIn'] = requestParameters.raceTypeNotIn;
        }

        if (requestParameters.granPrixIdGreaterThan !== undefined) {
            queryParameters['granPrixId.greaterThan'] = requestParameters.granPrixIdGreaterThan;
        }

        if (requestParameters.granPrixIdLessThan !== undefined) {
            queryParameters['granPrixId.lessThan'] = requestParameters.granPrixIdLessThan;
        }

        if (requestParameters.granPrixIdGreaterThanOrEqual !== undefined) {
            queryParameters['granPrixId.greaterThanOrEqual'] = requestParameters.granPrixIdGreaterThanOrEqual;
        }

        if (requestParameters.granPrixIdLessThanOrEqual !== undefined) {
            queryParameters['granPrixId.lessThanOrEqual'] = requestParameters.granPrixIdLessThanOrEqual;
        }

        if (requestParameters.granPrixIdEquals !== undefined) {
            queryParameters['granPrixId.equals'] = requestParameters.granPrixIdEquals;
        }

        if (requestParameters.granPrixIdNotEquals !== undefined) {
            queryParameters['granPrixId.notEquals'] = requestParameters.granPrixIdNotEquals;
        }

        if (requestParameters.granPrixIdSpecified !== undefined) {
            queryParameters['granPrixId.specified'] = requestParameters.granPrixIdSpecified;
        }

        if (requestParameters.granPrixIdIn) {
            queryParameters['granPrixId.in'] = requestParameters.granPrixIdIn;
        }

        if (requestParameters.granPrixIdNotIn) {
            queryParameters['granPrixId.notIn'] = requestParameters.granPrixIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/race-results/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async countRaceResults(requestParameters: CountRaceResultsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.countRaceResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createRaceResultRaw(requestParameters: CreateRaceResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RaceResult>> {
        if (requestParameters.raceResult === null || requestParameters.raceResult === undefined) {
            throw new runtime.RequiredError('raceResult','Required parameter requestParameters.raceResult was null or undefined when calling createRaceResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/race-results`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RaceResultToJSON(requestParameters.raceResult),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RaceResultFromJSON(jsonValue));
    }

    /**
     */
    async createRaceResult(requestParameters: CreateRaceResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RaceResult> {
        const response = await this.createRaceResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteRaceResultRaw(requestParameters: DeleteRaceResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRaceResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/race-results/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteRaceResult(requestParameters: DeleteRaceResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRaceResultRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllRaceResultsRaw(requestParameters: GetAllRaceResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RaceResult>>> {
        const queryParameters: any = {};

        if (requestParameters.idGreaterThan !== undefined) {
            queryParameters['id.greaterThan'] = requestParameters.idGreaterThan;
        }

        if (requestParameters.idLessThan !== undefined) {
            queryParameters['id.lessThan'] = requestParameters.idLessThan;
        }

        if (requestParameters.idGreaterThanOrEqual !== undefined) {
            queryParameters['id.greaterThanOrEqual'] = requestParameters.idGreaterThanOrEqual;
        }

        if (requestParameters.idLessThanOrEqual !== undefined) {
            queryParameters['id.lessThanOrEqual'] = requestParameters.idLessThanOrEqual;
        }

        if (requestParameters.idEquals !== undefined) {
            queryParameters['id.equals'] = requestParameters.idEquals;
        }

        if (requestParameters.idNotEquals !== undefined) {
            queryParameters['id.notEquals'] = requestParameters.idNotEquals;
        }

        if (requestParameters.idSpecified !== undefined) {
            queryParameters['id.specified'] = requestParameters.idSpecified;
        }

        if (requestParameters.idIn) {
            queryParameters['id.in'] = requestParameters.idIn;
        }

        if (requestParameters.idNotIn) {
            queryParameters['id.notIn'] = requestParameters.idNotIn;
        }

        if (requestParameters.posContains !== undefined) {
            queryParameters['pos.contains'] = requestParameters.posContains;
        }

        if (requestParameters.posDoesNotContain !== undefined) {
            queryParameters['pos.doesNotContain'] = requestParameters.posDoesNotContain;
        }

        if (requestParameters.posEquals !== undefined) {
            queryParameters['pos.equals'] = requestParameters.posEquals;
        }

        if (requestParameters.posNotEquals !== undefined) {
            queryParameters['pos.notEquals'] = requestParameters.posNotEquals;
        }

        if (requestParameters.posSpecified !== undefined) {
            queryParameters['pos.specified'] = requestParameters.posSpecified;
        }

        if (requestParameters.posIn) {
            queryParameters['pos.in'] = requestParameters.posIn;
        }

        if (requestParameters.posNotIn) {
            queryParameters['pos.notIn'] = requestParameters.posNotIn;
        }

        if (requestParameters.numberDriverContains !== undefined) {
            queryParameters['numberDriver.contains'] = requestParameters.numberDriverContains;
        }

        if (requestParameters.numberDriverDoesNotContain !== undefined) {
            queryParameters['numberDriver.doesNotContain'] = requestParameters.numberDriverDoesNotContain;
        }

        if (requestParameters.numberDriverEquals !== undefined) {
            queryParameters['numberDriver.equals'] = requestParameters.numberDriverEquals;
        }

        if (requestParameters.numberDriverNotEquals !== undefined) {
            queryParameters['numberDriver.notEquals'] = requestParameters.numberDriverNotEquals;
        }

        if (requestParameters.numberDriverSpecified !== undefined) {
            queryParameters['numberDriver.specified'] = requestParameters.numberDriverSpecified;
        }

        if (requestParameters.numberDriverIn) {
            queryParameters['numberDriver.in'] = requestParameters.numberDriverIn;
        }

        if (requestParameters.numberDriverNotIn) {
            queryParameters['numberDriver.notIn'] = requestParameters.numberDriverNotIn;
        }

        if (requestParameters.nameDriverContains !== undefined) {
            queryParameters['nameDriver.contains'] = requestParameters.nameDriverContains;
        }

        if (requestParameters.nameDriverDoesNotContain !== undefined) {
            queryParameters['nameDriver.doesNotContain'] = requestParameters.nameDriverDoesNotContain;
        }

        if (requestParameters.nameDriverEquals !== undefined) {
            queryParameters['nameDriver.equals'] = requestParameters.nameDriverEquals;
        }

        if (requestParameters.nameDriverNotEquals !== undefined) {
            queryParameters['nameDriver.notEquals'] = requestParameters.nameDriverNotEquals;
        }

        if (requestParameters.nameDriverSpecified !== undefined) {
            queryParameters['nameDriver.specified'] = requestParameters.nameDriverSpecified;
        }

        if (requestParameters.nameDriverIn) {
            queryParameters['nameDriver.in'] = requestParameters.nameDriverIn;
        }

        if (requestParameters.nameDriverNotIn) {
            queryParameters['nameDriver.notIn'] = requestParameters.nameDriverNotIn;
        }

        if (requestParameters.nameTeamContains !== undefined) {
            queryParameters['nameTeam.contains'] = requestParameters.nameTeamContains;
        }

        if (requestParameters.nameTeamDoesNotContain !== undefined) {
            queryParameters['nameTeam.doesNotContain'] = requestParameters.nameTeamDoesNotContain;
        }

        if (requestParameters.nameTeamEquals !== undefined) {
            queryParameters['nameTeam.equals'] = requestParameters.nameTeamEquals;
        }

        if (requestParameters.nameTeamNotEquals !== undefined) {
            queryParameters['nameTeam.notEquals'] = requestParameters.nameTeamNotEquals;
        }

        if (requestParameters.nameTeamSpecified !== undefined) {
            queryParameters['nameTeam.specified'] = requestParameters.nameTeamSpecified;
        }

        if (requestParameters.nameTeamIn) {
            queryParameters['nameTeam.in'] = requestParameters.nameTeamIn;
        }

        if (requestParameters.nameTeamNotIn) {
            queryParameters['nameTeam.notIn'] = requestParameters.nameTeamNotIn;
        }

        if (requestParameters.numberLapsContains !== undefined) {
            queryParameters['numberLaps.contains'] = requestParameters.numberLapsContains;
        }

        if (requestParameters.numberLapsDoesNotContain !== undefined) {
            queryParameters['numberLaps.doesNotContain'] = requestParameters.numberLapsDoesNotContain;
        }

        if (requestParameters.numberLapsEquals !== undefined) {
            queryParameters['numberLaps.equals'] = requestParameters.numberLapsEquals;
        }

        if (requestParameters.numberLapsNotEquals !== undefined) {
            queryParameters['numberLaps.notEquals'] = requestParameters.numberLapsNotEquals;
        }

        if (requestParameters.numberLapsSpecified !== undefined) {
            queryParameters['numberLaps.specified'] = requestParameters.numberLapsSpecified;
        }

        if (requestParameters.numberLapsIn) {
            queryParameters['numberLaps.in'] = requestParameters.numberLapsIn;
        }

        if (requestParameters.numberLapsNotIn) {
            queryParameters['numberLaps.notIn'] = requestParameters.numberLapsNotIn;
        }

        if (requestParameters.timeAllRaceContains !== undefined) {
            queryParameters['timeAllRace.contains'] = requestParameters.timeAllRaceContains;
        }

        if (requestParameters.timeAllRaceDoesNotContain !== undefined) {
            queryParameters['timeAllRace.doesNotContain'] = requestParameters.timeAllRaceDoesNotContain;
        }

        if (requestParameters.timeAllRaceEquals !== undefined) {
            queryParameters['timeAllRace.equals'] = requestParameters.timeAllRaceEquals;
        }

        if (requestParameters.timeAllRaceNotEquals !== undefined) {
            queryParameters['timeAllRace.notEquals'] = requestParameters.timeAllRaceNotEquals;
        }

        if (requestParameters.timeAllRaceSpecified !== undefined) {
            queryParameters['timeAllRace.specified'] = requestParameters.timeAllRaceSpecified;
        }

        if (requestParameters.timeAllRaceIn) {
            queryParameters['timeAllRace.in'] = requestParameters.timeAllRaceIn;
        }

        if (requestParameters.timeAllRaceNotIn) {
            queryParameters['timeAllRace.notIn'] = requestParameters.timeAllRaceNotIn;
        }

        if (requestParameters.pointsGreaterThan !== undefined) {
            queryParameters['points.greaterThan'] = requestParameters.pointsGreaterThan;
        }

        if (requestParameters.pointsLessThan !== undefined) {
            queryParameters['points.lessThan'] = requestParameters.pointsLessThan;
        }

        if (requestParameters.pointsGreaterThanOrEqual !== undefined) {
            queryParameters['points.greaterThanOrEqual'] = requestParameters.pointsGreaterThanOrEqual;
        }

        if (requestParameters.pointsLessThanOrEqual !== undefined) {
            queryParameters['points.lessThanOrEqual'] = requestParameters.pointsLessThanOrEqual;
        }

        if (requestParameters.pointsEquals !== undefined) {
            queryParameters['points.equals'] = requestParameters.pointsEquals;
        }

        if (requestParameters.pointsNotEquals !== undefined) {
            queryParameters['points.notEquals'] = requestParameters.pointsNotEquals;
        }

        if (requestParameters.pointsSpecified !== undefined) {
            queryParameters['points.specified'] = requestParameters.pointsSpecified;
        }

        if (requestParameters.pointsIn) {
            queryParameters['points.in'] = requestParameters.pointsIn;
        }

        if (requestParameters.pointsNotIn) {
            queryParameters['points.notIn'] = requestParameters.pointsNotIn;
        }

        if (requestParameters.raceTypeEquals !== undefined) {
            queryParameters['raceType.equals'] = requestParameters.raceTypeEquals;
        }

        if (requestParameters.raceTypeNotEquals !== undefined) {
            queryParameters['raceType.notEquals'] = requestParameters.raceTypeNotEquals;
        }

        if (requestParameters.raceTypeSpecified !== undefined) {
            queryParameters['raceType.specified'] = requestParameters.raceTypeSpecified;
        }

        if (requestParameters.raceTypeIn) {
            queryParameters['raceType.in'] = requestParameters.raceTypeIn;
        }

        if (requestParameters.raceTypeNotIn) {
            queryParameters['raceType.notIn'] = requestParameters.raceTypeNotIn;
        }

        if (requestParameters.granPrixIdGreaterThan !== undefined) {
            queryParameters['granPrixId.greaterThan'] = requestParameters.granPrixIdGreaterThan;
        }

        if (requestParameters.granPrixIdLessThan !== undefined) {
            queryParameters['granPrixId.lessThan'] = requestParameters.granPrixIdLessThan;
        }

        if (requestParameters.granPrixIdGreaterThanOrEqual !== undefined) {
            queryParameters['granPrixId.greaterThanOrEqual'] = requestParameters.granPrixIdGreaterThanOrEqual;
        }

        if (requestParameters.granPrixIdLessThanOrEqual !== undefined) {
            queryParameters['granPrixId.lessThanOrEqual'] = requestParameters.granPrixIdLessThanOrEqual;
        }

        if (requestParameters.granPrixIdEquals !== undefined) {
            queryParameters['granPrixId.equals'] = requestParameters.granPrixIdEquals;
        }

        if (requestParameters.granPrixIdNotEquals !== undefined) {
            queryParameters['granPrixId.notEquals'] = requestParameters.granPrixIdNotEquals;
        }

        if (requestParameters.granPrixIdSpecified !== undefined) {
            queryParameters['granPrixId.specified'] = requestParameters.granPrixIdSpecified;
        }

        if (requestParameters.granPrixIdIn) {
            queryParameters['granPrixId.in'] = requestParameters.granPrixIdIn;
        }

        if (requestParameters.granPrixIdNotIn) {
            queryParameters['granPrixId.notIn'] = requestParameters.granPrixIdNotIn;
        }

        if (requestParameters.distinct !== undefined) {
            queryParameters['distinct'] = requestParameters.distinct;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/race-results`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RaceResultFromJSON));
    }

    /**
     */
    async getAllRaceResults(requestParameters: GetAllRaceResultsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RaceResult>> {
        const response = await this.getAllRaceResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRaceResultRaw(requestParameters: GetRaceResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RaceResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRaceResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/race-results/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RaceResultFromJSON(jsonValue));
    }

    /**
     */
    async getRaceResult(requestParameters: GetRaceResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RaceResult> {
        const response = await this.getRaceResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async partialUpdateRaceResultRaw(requestParameters: PartialUpdateRaceResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RaceResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateRaceResult.');
        }

        if (requestParameters.raceResult === null || requestParameters.raceResult === undefined) {
            throw new runtime.RequiredError('raceResult','Required parameter requestParameters.raceResult was null or undefined when calling partialUpdateRaceResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/race-results/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RaceResultToJSON(requestParameters.raceResult),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RaceResultFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateRaceResult(requestParameters: PartialUpdateRaceResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RaceResult> {
        const response = await this.partialUpdateRaceResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateRaceResultRaw(requestParameters: UpdateRaceResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RaceResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRaceResult.');
        }

        if (requestParameters.raceResult === null || requestParameters.raceResult === undefined) {
            throw new runtime.RequiredError('raceResult','Required parameter requestParameters.raceResult was null or undefined when calling updateRaceResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/race-results/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RaceResultToJSON(requestParameters.raceResult),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RaceResultFromJSON(jsonValue));
    }

    /**
     */
    async updateRaceResult(requestParameters: UpdateRaceResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RaceResult> {
        const response = await this.updateRaceResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CountRaceResultsRaceTypeEqualsEnum = {
    Sprint: 'SPRINT',
    Race: 'RACE'
} as const;
export type CountRaceResultsRaceTypeEqualsEnum = typeof CountRaceResultsRaceTypeEqualsEnum[keyof typeof CountRaceResultsRaceTypeEqualsEnum];
/**
 * @export
 */
export const CountRaceResultsRaceTypeNotEqualsEnum = {
    Sprint: 'SPRINT',
    Race: 'RACE'
} as const;
export type CountRaceResultsRaceTypeNotEqualsEnum = typeof CountRaceResultsRaceTypeNotEqualsEnum[keyof typeof CountRaceResultsRaceTypeNotEqualsEnum];
/**
 * @export
 */
export const CountRaceResultsRaceTypeInEnum = {
    Sprint: 'SPRINT',
    Race: 'RACE'
} as const;
export type CountRaceResultsRaceTypeInEnum = typeof CountRaceResultsRaceTypeInEnum[keyof typeof CountRaceResultsRaceTypeInEnum];
/**
 * @export
 */
export const CountRaceResultsRaceTypeNotInEnum = {
    Sprint: 'SPRINT',
    Race: 'RACE'
} as const;
export type CountRaceResultsRaceTypeNotInEnum = typeof CountRaceResultsRaceTypeNotInEnum[keyof typeof CountRaceResultsRaceTypeNotInEnum];
/**
 * @export
 */
export const GetAllRaceResultsRaceTypeEqualsEnum = {
    Sprint: 'SPRINT',
    Race: 'RACE'
} as const;
export type GetAllRaceResultsRaceTypeEqualsEnum = typeof GetAllRaceResultsRaceTypeEqualsEnum[keyof typeof GetAllRaceResultsRaceTypeEqualsEnum];
/**
 * @export
 */
export const GetAllRaceResultsRaceTypeNotEqualsEnum = {
    Sprint: 'SPRINT',
    Race: 'RACE'
} as const;
export type GetAllRaceResultsRaceTypeNotEqualsEnum = typeof GetAllRaceResultsRaceTypeNotEqualsEnum[keyof typeof GetAllRaceResultsRaceTypeNotEqualsEnum];
/**
 * @export
 */
export const GetAllRaceResultsRaceTypeInEnum = {
    Sprint: 'SPRINT',
    Race: 'RACE'
} as const;
export type GetAllRaceResultsRaceTypeInEnum = typeof GetAllRaceResultsRaceTypeInEnum[keyof typeof GetAllRaceResultsRaceTypeInEnum];
/**
 * @export
 */
export const GetAllRaceResultsRaceTypeNotInEnum = {
    Sprint: 'SPRINT',
    Race: 'RACE'
} as const;
export type GetAllRaceResultsRaceTypeNotInEnum = typeof GetAllRaceResultsRaceTypeNotInEnum[keyof typeof GetAllRaceResultsRaceTypeNotInEnum];
