/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GranPrix } from './GranPrix';
import {
    GranPrixFromJSON,
    GranPrixFromJSONTyped,
    GranPrixToJSON,
} from './GranPrix';
import type { League } from './League';
import {
    LeagueFromJSON,
    LeagueFromJSONTyped,
    LeagueToJSON,
} from './League';

/**
 * 
 * @export
 * @interface SeasonDTO
 */
export interface SeasonDTO {
    /**
     * 
     * @type {number}
     * @memberof SeasonDTO
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SeasonDTO
     */
    year?: string;
    /**
     * 
     * @type {Set<GranPrix>}
     * @memberof SeasonDTO
     */
    granPrixes?: Set<GranPrix>;
    /**
     * 
     * @type {League}
     * @memberof SeasonDTO
     */
    league?: League;
}

/**
 * Check if a given object implements the SeasonDTO interface.
 */
export function instanceOfSeasonDTO(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SeasonDTOFromJSON(json: any): SeasonDTO {
    return SeasonDTOFromJSONTyped(json, false);
}

export function SeasonDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeasonDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'year': !exists(json, 'year') ? undefined : json['year'],
        'granPrixes': !exists(json, 'granPrixes') ? undefined : (new Set((json['granPrixes'] as Array<any>).map(GranPrixFromJSON))),
        'league': !exists(json, 'league') ? undefined : LeagueFromJSON(json['league']),
    };
}

export function SeasonDTOToJSON(value?: SeasonDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'year': value.year,
        'granPrixes': value.granPrixes === undefined ? undefined : (Array.from(value.granPrixes as Set<any>).map(GranPrixToJSON)),
        'league': LeagueToJSON(value.league),
    };
}

