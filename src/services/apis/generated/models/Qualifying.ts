/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Qualifying
 */
export interface Qualifying {
    /**
     * 
     * @type {number}
     * @memberof Qualifying
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Qualifying
     */
    pos?: string;
    /**
     * 
     * @type {string}
     * @memberof Qualifying
     */
    numberDriver?: string;
    /**
     * 
     * @type {string}
     * @memberof Qualifying
     */
    nameDriver?: string;
    /**
     * 
     * @type {string}
     * @memberof Qualifying
     */
    nameTeam?: string;
    /**
     * 
     * @type {Date}
     * @memberof Qualifying
     */
    getq1BestLap?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Qualifying
     */
    getq2BestLap?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Qualifying
     */
    getq3BestLap?: Date;
    /**
     * 
     * @type {number}
     * @memberof Qualifying
     */
    numberLaps?: number;
    /**
     * 
     * @type {string}
     * @memberof Qualifying
     */
    qualifyType?: QualifyingQualifyTypeEnum;
}


/**
 * @export
 */
export const QualifyingQualifyTypeEnum = {
    Q1: 'Q1',
    Q2: 'Q2',
    Overallqualify: 'OVERALLQUALIFY'
} as const;
export type QualifyingQualifyTypeEnum = typeof QualifyingQualifyTypeEnum[keyof typeof QualifyingQualifyTypeEnum];


/**
 * Check if a given object implements the Qualifying interface.
 */
export function instanceOfQualifying(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function QualifyingFromJSON(json: any): Qualifying {
    return QualifyingFromJSONTyped(json, false);
}

export function QualifyingFromJSONTyped(json: any, ignoreDiscriminator: boolean): Qualifying {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'pos': !exists(json, 'pos') ? undefined : json['pos'],
        'numberDriver': !exists(json, 'numberDriver') ? undefined : json['numberDriver'],
        'nameDriver': !exists(json, 'nameDriver') ? undefined : json['nameDriver'],
        'nameTeam': !exists(json, 'nameTeam') ? undefined : json['nameTeam'],
        'getq1BestLap': !exists(json, 'getq1BestLap') ? undefined : (new Date(json['getq1BestLap'])),
        'getq2BestLap': !exists(json, 'getq2BestLap') ? undefined : (new Date(json['getq2BestLap'])),
        'getq3BestLap': !exists(json, 'getq3BestLap') ? undefined : (new Date(json['getq3BestLap'])),
        'numberLaps': !exists(json, 'numberLaps') ? undefined : json['numberLaps'],
        'qualifyType': !exists(json, 'qualifyType') ? undefined : json['qualifyType'],
    };
}

export function QualifyingToJSON(value?: Qualifying | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'pos': value.pos,
        'numberDriver': value.numberDriver,
        'nameDriver': value.nameDriver,
        'nameTeam': value.nameTeam,
        'getq1BestLap': value.getq1BestLap === undefined ? undefined : (value.getq1BestLap.toISOString()),
        'getq2BestLap': value.getq2BestLap === undefined ? undefined : (value.getq2BestLap.toISOString()),
        'getq3BestLap': value.getq3BestLap === undefined ? undefined : (value.getq3BestLap.toISOString()),
        'numberLaps': value.numberLaps,
        'qualifyType': value.qualifyType,
    };
}

