/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { League } from './League';
import {
    LeagueFromJSON,
    LeagueFromJSONTyped,
    LeagueToJSON,
} from './League';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';
import type { UserSeasonInviteState } from './UserSeasonInviteState';
import {
    UserSeasonInviteStateFromJSON,
    UserSeasonInviteStateFromJSONTyped,
    UserSeasonInviteStateToJSON,
} from './UserSeasonInviteState';

/**
 * 
 * @export
 * @interface UserSeasonInvite
 */
export interface UserSeasonInvite {
    /**
     * 
     * @type {number}
     * @memberof UserSeasonInvite
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof UserSeasonInvite
     */
    date?: Date;
    /**
     * 
     * @type {string}
     * @memberof UserSeasonInvite
     */
    currentState?: UserSeasonInviteCurrentStateEnum;
    /**
     * 
     * @type {string}
     * @memberof UserSeasonInvite
     */
    role?: UserSeasonInviteRoleEnum;
    /**
     * 
     * @type {Set<UserSeasonInviteState>}
     * @memberof UserSeasonInvite
     */
    userSeasonInviteStates?: Set<UserSeasonInviteState>;
    /**
     * 
     * @type {User}
     * @memberof UserSeasonInvite
     */
    user?: User;
    /**
     * 
     * @type {League}
     * @memberof UserSeasonInvite
     */
    league?: League;
}


/**
 * @export
 */
export const UserSeasonInviteCurrentStateEnum = {
    Pending: 'PENDING',
    Accepted: 'ACCEPTED',
    Rejected: 'REJECTED'
} as const;
export type UserSeasonInviteCurrentStateEnum = typeof UserSeasonInviteCurrentStateEnum[keyof typeof UserSeasonInviteCurrentStateEnum];

/**
 * @export
 */
export const UserSeasonInviteRoleEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type UserSeasonInviteRoleEnum = typeof UserSeasonInviteRoleEnum[keyof typeof UserSeasonInviteRoleEnum];


/**
 * Check if a given object implements the UserSeasonInvite interface.
 */
export function instanceOfUserSeasonInvite(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UserSeasonInviteFromJSON(json: any): UserSeasonInvite {
    return UserSeasonInviteFromJSONTyped(json, false);
}

export function UserSeasonInviteFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSeasonInvite {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'date': !exists(json, 'date') ? undefined : (new Date(json['date'])),
        'currentState': !exists(json, 'currentState') ? undefined : json['currentState'],
        'role': !exists(json, 'role') ? undefined : json['role'],
        'userSeasonInviteStates': !exists(json, 'userSeasonInviteStates') ? undefined : (new Set((json['userSeasonInviteStates'] as Array<any>).map(UserSeasonInviteStateFromJSON))),
        'user': !exists(json, 'user') ? undefined : UserFromJSON(json['user']),
        'league': !exists(json, 'league') ? undefined : LeagueFromJSON(json['league']),
    };
}

export function UserSeasonInviteToJSON(value?: UserSeasonInvite | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'date': value.date === undefined ? undefined : (value.date.toISOString()),
        'currentState': value.currentState,
        'role': value.role,
        'userSeasonInviteStates': value.userSeasonInviteStates === undefined ? undefined : (Array.from(value.userSeasonInviteStates as Set<any>).map(UserSeasonInviteStateToJSON)),
        'user': UserToJSON(value.user),
        'league': LeagueToJSON(value.league),
    };
}

