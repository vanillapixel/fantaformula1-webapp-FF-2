/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserSeasonInvite } from './UserSeasonInvite';
import {
    UserSeasonInviteFromJSON,
    UserSeasonInviteFromJSONTyped,
    UserSeasonInviteToJSON,
} from './UserSeasonInvite';

/**
 * 
 * @export
 * @interface UserSeasonInviteState
 */
export interface UserSeasonInviteState {
    /**
     * 
     * @type {number}
     * @memberof UserSeasonInviteState
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof UserSeasonInviteState
     */
    date?: Date;
    /**
     * 
     * @type {string}
     * @memberof UserSeasonInviteState
     */
    state?: UserSeasonInviteStateStateEnum;
    /**
     * 
     * @type {UserSeasonInvite}
     * @memberof UserSeasonInviteState
     */
    userSeasonInvite?: UserSeasonInvite;
}


/**
 * @export
 */
export const UserSeasonInviteStateStateEnum = {
    Pending: 'PENDING',
    Accepted: 'ACCEPTED',
    Rejected: 'REJECTED'
} as const;
export type UserSeasonInviteStateStateEnum = typeof UserSeasonInviteStateStateEnum[keyof typeof UserSeasonInviteStateStateEnum];


/**
 * Check if a given object implements the UserSeasonInviteState interface.
 */
export function instanceOfUserSeasonInviteState(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UserSeasonInviteStateFromJSON(json: any): UserSeasonInviteState {
    return UserSeasonInviteStateFromJSONTyped(json, false);
}

export function UserSeasonInviteStateFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSeasonInviteState {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'date': !exists(json, 'date') ? undefined : (new Date(json['date'])),
        'state': !exists(json, 'state') ? undefined : json['state'],
        'userSeasonInvite': !exists(json, 'userSeasonInvite') ? undefined : UserSeasonInviteFromJSON(json['userSeasonInvite']),
    };
}

export function UserSeasonInviteStateToJSON(value?: UserSeasonInviteState | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'date': value.date === undefined ? undefined : (value.date.toISOString()),
        'state': value.state,
        'userSeasonInvite': UserSeasonInviteToJSON(value.userSeasonInvite),
    };
}

