/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GranPrix } from './GranPrix';
import {
    GranPrixFromJSON,
    GranPrixFromJSONTyped,
    GranPrixToJSON,
} from './GranPrix';

/**
 * 
 * @export
 * @interface RaceResult
 */
export interface RaceResult {
    /**
     * 
     * @type {number}
     * @memberof RaceResult
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof RaceResult
     */
    pos?: string;
    /**
     * 
     * @type {string}
     * @memberof RaceResult
     */
    numberDriver?: string;
    /**
     * 
     * @type {string}
     * @memberof RaceResult
     */
    nameDriver?: string;
    /**
     * 
     * @type {string}
     * @memberof RaceResult
     */
    nameTeam?: string;
    /**
     * 
     * @type {string}
     * @memberof RaceResult
     */
    numberLaps?: string;
    /**
     * 
     * @type {string}
     * @memberof RaceResult
     */
    timeAllRace?: string;
    /**
     * 
     * @type {number}
     * @memberof RaceResult
     */
    points?: number;
    /**
     * 
     * @type {string}
     * @memberof RaceResult
     */
    raceType?: RaceResultRaceTypeEnum;
    /**
     * 
     * @type {GranPrix}
     * @memberof RaceResult
     */
    granPrix?: GranPrix;
}


/**
 * @export
 */
export const RaceResultRaceTypeEnum = {
    Sprint: 'SPRINT',
    Race: 'RACE'
} as const;
export type RaceResultRaceTypeEnum = typeof RaceResultRaceTypeEnum[keyof typeof RaceResultRaceTypeEnum];


/**
 * Check if a given object implements the RaceResult interface.
 */
export function instanceOfRaceResult(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RaceResultFromJSON(json: any): RaceResult {
    return RaceResultFromJSONTyped(json, false);
}

export function RaceResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): RaceResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'pos': !exists(json, 'pos') ? undefined : json['pos'],
        'numberDriver': !exists(json, 'numberDriver') ? undefined : json['numberDriver'],
        'nameDriver': !exists(json, 'nameDriver') ? undefined : json['nameDriver'],
        'nameTeam': !exists(json, 'nameTeam') ? undefined : json['nameTeam'],
        'numberLaps': !exists(json, 'numberLaps') ? undefined : json['numberLaps'],
        'timeAllRace': !exists(json, 'timeAllRace') ? undefined : json['timeAllRace'],
        'points': !exists(json, 'points') ? undefined : json['points'],
        'raceType': !exists(json, 'raceType') ? undefined : json['raceType'],
        'granPrix': !exists(json, 'granPrix') ? undefined : GranPrixFromJSON(json['granPrix']),
    };
}

export function RaceResultToJSON(value?: RaceResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'pos': value.pos,
        'numberDriver': value.numberDriver,
        'nameDriver': value.nameDriver,
        'nameTeam': value.nameTeam,
        'numberLaps': value.numberLaps,
        'timeAllRace': value.timeAllRace,
        'points': value.points,
        'raceType': value.raceType,
        'granPrix': GranPrixToJSON(value.granPrix),
    };
}

