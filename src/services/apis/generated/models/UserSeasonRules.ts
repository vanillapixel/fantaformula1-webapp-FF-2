/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { League } from './League';
import {
    LeagueFromJSON,
    LeagueFromJSONTyped,
    LeagueToJSON,
} from './League';
import type { Rules } from './Rules';
import {
    RulesFromJSON,
    RulesFromJSONTyped,
    RulesToJSON,
} from './Rules';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface UserSeasonRules
 */
export interface UserSeasonRules {
    /**
     * 
     * @type {number}
     * @memberof UserSeasonRules
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UserSeasonRules
     */
    role?: UserSeasonRulesRoleEnum;
    /**
     * 
     * @type {User}
     * @memberof UserSeasonRules
     */
    user?: User;
    /**
     * 
     * @type {League}
     * @memberof UserSeasonRules
     */
    league?: League;
    /**
     * 
     * @type {Rules}
     * @memberof UserSeasonRules
     */
    rules?: Rules;
}


/**
 * @export
 */
export const UserSeasonRulesRoleEnum = {
    Administrator: 'ADMINISTRATOR',
    Player: 'PLAYER'
} as const;
export type UserSeasonRulesRoleEnum = typeof UserSeasonRulesRoleEnum[keyof typeof UserSeasonRulesRoleEnum];


/**
 * Check if a given object implements the UserSeasonRules interface.
 */
export function instanceOfUserSeasonRules(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UserSeasonRulesFromJSON(json: any): UserSeasonRules {
    return UserSeasonRulesFromJSONTyped(json, false);
}

export function UserSeasonRulesFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSeasonRules {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'role': !exists(json, 'role') ? undefined : json['role'],
        'user': !exists(json, 'user') ? undefined : UserFromJSON(json['user']),
        'league': !exists(json, 'league') ? undefined : LeagueFromJSON(json['league']),
        'rules': !exists(json, 'rules') ? undefined : RulesFromJSON(json['rules']),
    };
}

export function UserSeasonRulesToJSON(value?: UserSeasonRules | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'role': value.role,
        'user': UserToJSON(value.user),
        'league': LeagueToJSON(value.league),
        'rules': RulesToJSON(value.rules),
    };
}

