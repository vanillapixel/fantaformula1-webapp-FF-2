/* tslint:disable */
/* eslint-disable */
/**
 * Fanta F 1 API
 * Fanta F 1 API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Rules } from './Rules';
import {
    RulesFromJSON,
    RulesFromJSONTyped,
    RulesToJSON,
} from './Rules';

/**
 * 
 * @export
 * @interface StandingPoints
 */
export interface StandingPoints {
    /**
     * 
     * @type {number}
     * @memberof StandingPoints
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof StandingPoints
     */
    pos?: number;
    /**
     * 
     * @type {number}
     * @memberof StandingPoints
     */
    point?: number;
    /**
     * 
     * @type {string}
     * @memberof StandingPoints
     */
    standingsPlayerType?: StandingPointsStandingsPlayerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof StandingPoints
     */
    standingsRaceType?: StandingPointsStandingsRaceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof StandingPoints
     */
    rulesType?: StandingPointsRulesTypeEnum;
    /**
     * 
     * @type {Rules}
     * @memberof StandingPoints
     */
    rules?: Rules;
}


/**
 * @export
 */
export const StandingPointsStandingsPlayerTypeEnum = {
    Player: 'PLAYER',
    Driver: 'DRIVER',
    Team: 'TEAM'
} as const;
export type StandingPointsStandingsPlayerTypeEnum = typeof StandingPointsStandingsPlayerTypeEnum[keyof typeof StandingPointsStandingsPlayerTypeEnum];

/**
 * @export
 */
export const StandingPointsStandingsRaceTypeEnum = {
    Qualify: 'QUALIFY',
    Race: 'RACE'
} as const;
export type StandingPointsStandingsRaceTypeEnum = typeof StandingPointsStandingsRaceTypeEnum[keyof typeof StandingPointsStandingsRaceTypeEnum];

/**
 * @export
 */
export const StandingPointsRulesTypeEnum = {
    Fantasyformula1Managment: 'FANTASYFORMULA1MANAGMENT'
} as const;
export type StandingPointsRulesTypeEnum = typeof StandingPointsRulesTypeEnum[keyof typeof StandingPointsRulesTypeEnum];


/**
 * Check if a given object implements the StandingPoints interface.
 */
export function instanceOfStandingPoints(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StandingPointsFromJSON(json: any): StandingPoints {
    return StandingPointsFromJSONTyped(json, false);
}

export function StandingPointsFromJSONTyped(json: any, ignoreDiscriminator: boolean): StandingPoints {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'pos': !exists(json, 'pos') ? undefined : json['pos'],
        'point': !exists(json, 'point') ? undefined : json['point'],
        'standingsPlayerType': !exists(json, 'standingsPlayerType') ? undefined : json['standingsPlayerType'],
        'standingsRaceType': !exists(json, 'standingsRaceType') ? undefined : json['standingsRaceType'],
        'rulesType': !exists(json, 'rulesType') ? undefined : json['rulesType'],
        'rules': !exists(json, 'rules') ? undefined : RulesFromJSON(json['rules']),
    };
}

export function StandingPointsToJSON(value?: StandingPoints | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'pos': value.pos,
        'point': value.point,
        'standingsPlayerType': value.standingsPlayerType,
        'standingsRaceType': value.standingsRaceType,
        'rulesType': value.rulesType,
        'rules': RulesToJSON(value.rules),
    };
}

